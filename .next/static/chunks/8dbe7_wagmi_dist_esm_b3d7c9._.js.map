{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"hydrate.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hydrate.ts"],"sourcesContent":["'use client'\n\nimport { type ResolvedRegister, type State, hydrate } from '@wagmi/core'\nimport { type ReactElement, useEffect, useRef } from 'react'\n\nexport type HydrateProps = {\n  config: ResolvedRegister['config']\n  initialState?: State | undefined\n  reconnectOnMount?: boolean | undefined\n}\n\nexport function Hydrate(parameters: React.PropsWithChildren<HydrateProps>) {\n  const { children, config, initialState, reconnectOnMount = true } = parameters\n\n  const { onMount } = hydrate(config, {\n    initialState,\n    reconnectOnMount,\n  })\n\n  // Hydrate for non-SSR\n  if (!config._internal.ssr) onMount()\n\n  // Hydrate for SSR\n  const active = useRef(true)\n  // biome-ignore lint/correctness/useExhaustiveDependencies: `queryKey` not required\n  useEffect(() => {\n    if (!active.current) return\n    if (!config._internal.ssr) return\n    onMount()\n    return () => {\n      active.current = false\n    }\n  }, [])\n\n  return children as ReactElement\n}\n"],"names":[],"mappings":";;;AAGA,OAAO,EAAqB,SAAS,EAAE,MAAM,EAAE,MAAM,OAAO,CAAA;AAD5D,OAAO,EAAqC,OAAO,EAAE,MAAM,aAAa,CAAA;AAFxE,YAAY,CAAA;;;AAWN,SAAU,OAAO,CAAC,UAAiD;IACvE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,YAAY,EAAE,gBAAgB,GAAG,IAAI,EAAE,GAAG,UAAU,CAAA;IAE9E,MAAM,EAAE,OAAO,EAAE,IAAG,uXAAA,AAAO,EAAC,MAAM,EAAE;QAClC,YAAY;QACZ,gBAAgB;KACjB,CAAC,CAAA;IAEF,sBAAsB;IACtB,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,EAAE,OAAO,EAAE,CAAA;IAEpC,kBAAkB;IAClB,MAAM,MAAM,IAAG,2UAAA,AAAM,EAAC,IAAI,CAAC,CAAA;IAC3B,mFAAmF;uUACnF,YAAA,AAAS;6BAAC,GAAG,EAAE;YACb,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,OAAM;YAC3B,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,EAAE,OAAM;YACjC,OAAO,EAAE,CAAA;YACT;qCAAO,GAAG,EAAE;oBACV,MAAM,CAAC,OAAO,GAAG,KAAK,CAAA;gBACxB,CAAC,CAAA;;QACH,CAAC;4BAAE,EAAE,CAAC,CAAA;IAEN,OAAO,QAAwB,CAAA;AACjC,CAAC","ignoreList":[0]}},
    {"offset": {"line": 40, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 46, "column": 0}, "map": {"version":3,"file":"context.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/context.ts"],"sourcesContent":["'use client'\n\nimport type { ResolvedRegister, State } from '@wagmi/core'\nimport { createContext, createElement } from 'react'\nimport { Hydrate } from './hydrate.js'\n\nexport const WagmiContext = createContext<\n  ResolvedRegister['config'] | undefined\n>(undefined)\n\nexport type WagmiProviderProps = {\n  config: ResolvedRegister['config']\n  initialState?: State | undefined\n  reconnectOnMount?: boolean | undefined\n}\n\nexport function WagmiProvider(\n  parameters: React.PropsWithChildren<WagmiProviderProps>,\n) {\n  const { children, config } = parameters\n\n  const props = { value: config }\n  return createElement(\n    Hydrate,\n    parameters,\n    createElement(WagmiContext.Provider, props, children),\n  )\n}\n"],"names":[],"mappings":";;;;AAGA,OAAO,EAAE,aAAa,EAAE,aAAa,EAAE,MAAM,OAAO,CAAA;AACpD,OAAO,EAAE,OAAO,EAAE,MAAM,cAAc,CAAA;AAJtC,YAAY,CAAA;;;AAML,MAAM,YAAY,sUAAG,gBAAA,AAAa,EAEvC,SAAS,CAAC,CAAA;AAQN,SAAU,aAAa,CAC3B,UAAuD;IAEvD,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,GAAG,UAAU,CAAA;IAEvC,MAAM,KAAK,GAAG;QAAE,KAAK,EAAE,MAAM;IAAA,CAAE,CAAA;IAC/B,0UAAO,gBAAA,AAAa,qWAClB,UAAO,EACP,UAAU,qUACV,gBAAA,AAAa,EAAC,YAAY,CAAC,QAAQ,EAAE,KAAK,EAAE,QAAQ,CAAC,CACtD,CAAA;AACH,CAAC","ignoreList":[0]}},
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 69, "column": 0}, "map": {"version":3,"file":"version.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/version.ts"],"sourcesContent":["export const version = '2.14.11'\n"],"names":[],"mappings":";;;AAAO,MAAM,OAAO,GAAG,SAAS,CAAA","ignoreList":[0]}},
    {"offset": {"line": 73, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"file":"getVersion.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/utils/getVersion.ts"],"sourcesContent":["import { version } from '../version.js'\n\nexport const getVersion = () => `wagmi@${version}`\n"],"names":[],"mappings":";;;AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,eAAe,CAAA;;AAEhC,MAAM,UAAU,GAAG,GAAG,CAAG,CAAD,AAAC,MAAA,qWAAS,UAAO,EAAE,CAAA","ignoreList":[0]}},
    {"offset": {"line": 85, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"file":"base.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/errors/base.ts"],"sourcesContent":["import { BaseError as CoreError } from '@wagmi/core'\n\nimport { getVersion } from '../utils/getVersion.js'\n\nexport type BaseErrorType = BaseError & { name: 'WagmiError' }\nexport class BaseError extends CoreError {\n  override name = 'WagmiError'\n  override get docsBaseUrl() {\n    return 'https://wagmi.sh/react'\n  }\n  override get version() {\n    return getVersion()\n  }\n}\n"],"names":[],"mappings":";;;AAEA,OAAO,EAAE,UAAU,EAAE,MAAM,wBAAwB,CAAA;AAFnD,OAAO,EAAE,SAAS,IAAI,SAAS,EAAE,MAAM,aAAa,CAAA;;;AAK9C,MAAO,SAAU,0XAAQ,YAAS;IAAxC,aAAA;;QACW,OAAA,cAAA,CAAA,IAAA,EAAA,QAAA;;;;mBAAO,YAAY;WAAA;IAO9B,CAAC;IANC,IAAa,WAAW,GAAA;QACtB,OAAO,wBAAwB,CAAA;IACjC,CAAC;IACD,IAAa,OAAO,GAAA;QAClB,0XAAO,aAAA,AAAU,EAAE,CAAA;IACrB,CAAC;CACF","ignoreList":[0]}},
    {"offset": {"line": 115, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 121, "column": 0}, "map": {"version":3,"file":"context.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/errors/context.ts"],"sourcesContent":["import { BaseError } from './base.js'\n\nexport type WagmiProviderNotFoundErrorType = WagmiProviderNotFoundError & {\n  name: 'WagmiProviderNotFoundError'\n}\nexport class WagmiProviderNotFoundError extends BaseError {\n  override name = 'WagmiProviderNotFoundError'\n  constructor() {\n    super('`useConfig` must be used within `WagmiProvider`.', {\n      docsPath: '/api/WagmiProvider',\n    })\n  }\n}\n"],"names":[],"mappings":";;;AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,WAAW,CAAA;;AAK/B,MAAO,0BAA2B,mXAAQ,YAAS;IAEvD,aAAA;QACE,KAAK,CAAC,kDAAkD,EAAE;YACxD,QAAQ,EAAE,oBAAoB;SAC/B,CAAC,CAAA;QAJK,OAAA,cAAA,CAAA,IAAA,EAAA,QAAA;;;;mBAAO,4BAA4B;WAAA;IAK5C,CAAC;CACF","ignoreList":[0]}},
    {"offset": {"line": 139, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 145, "column": 0}, "map": {"version":3,"file":"useConfig.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useConfig.ts"],"sourcesContent":["'use client'\n\nimport type { Config, ResolvedRegister } from '@wagmi/core'\nimport { useContext } from 'react'\n\nimport { WagmiContext } from '../context.js'\nimport { WagmiProviderNotFoundError } from '../errors/context.js'\nimport type { ConfigParameter } from '../types/properties.js'\n\nexport type UseConfigParameters<config extends Config = Config> =\n  ConfigParameter<config>\n\nexport type UseConfigReturnType<config extends Config = Config> = config\n\n/** https://wagmi.sh/react/api/hooks/useConfig */\nexport function useConfig<config extends Config = ResolvedRegister['config']>(\n  parameters: UseConfigParameters<config> = {},\n): UseConfigReturnType<config> {\n  const config = parameters.config ?? useContext(WagmiContext)\n  if (!config) throw new WagmiProviderNotFoundError()\n  return config as UseConfigReturnType<config>\n}\n"],"names":[],"mappings":";;;AAGA,OAAO,EAAE,UAAU,EAAE,MAAM,OAAO,CAAA;AAElC,OAAO,EAAE,YAAY,EAAE,MAAM,eAAe,CAAA;AAC5C,OAAO,EAAE,0BAA0B,EAAE,MAAM,sBAAsB,CAAA;AANjE,YAAY,CAAA;;;;AAeN,SAAU,SAAS,CACvB,aAA0C,CAAA,CAAE;IAE5C,MAAM,MAAM,GAAG,UAAU,CAAC,MAAM,uUAAI,aAAA,AAAU,qWAAC,eAAY,CAAC,CAAA;IAC5D,IAAI,CAAC,MAAM,EAAE,MAAM,iXAAI,6BAA0B,EAAE,CAAA;IACnD,OAAO,MAAqC,CAAA;AAC9C,CAAC","ignoreList":[0]}},
    {"offset": {"line": 160, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 166, "column": 0}, "map": {"version":3,"file":"useSyncExternalStoreWithTracked.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useSyncExternalStoreWithTracked.ts"],"sourcesContent":["'use client'\n\nimport { deepEqual } from '@wagmi/core/internal'\nimport { useMemo, useRef } from 'react'\nimport { useSyncExternalStoreWithSelector } from 'use-sync-external-store/shim/with-selector.js'\n\nconst isPlainObject = (obj: unknown) =>\n  typeof obj === 'object' && !Array.isArray(obj)\n\nexport function useSyncExternalStoreWithTracked<\n  snapshot extends selection,\n  selection = snapshot,\n>(\n  subscribe: (onStoreChange: () => void) => () => void,\n  getSnapshot: () => snapshot,\n  getServerSnapshot: undefined | null | (() => snapshot) = getSnapshot,\n  isEqual: (a: selection, b: selection) => boolean = deepEqual,\n) {\n  const trackedKeys = useRef<string[]>([])\n  const result = useSyncExternalStoreWithSelector(\n    subscribe,\n    getSnapshot,\n    getServerSnapshot,\n    (x) => x,\n    (a, b) => {\n      if (isPlainObject(a) && isPlainObject(b) && trackedKeys.current.length) {\n        for (const key of trackedKeys.current) {\n          const equal = isEqual(\n            (a as { [_a: string]: any })[key],\n            (b as { [_b: string]: any })[key],\n          )\n          if (!equal) return false\n        }\n        return true\n      }\n      return isEqual(a, b)\n    },\n  )\n\n  return useMemo(() => {\n    if (isPlainObject(result)) {\n      const trackedResult = { ...result }\n      let properties = {}\n      for (const [key, value] of Object.entries(\n        trackedResult as { [key: string]: any },\n      )) {\n        properties = {\n          ...properties,\n          [key]: {\n            configurable: false,\n            enumerable: true,\n            get: () => {\n              if (!trackedKeys.current.includes(key)) {\n                trackedKeys.current.push(key)\n              }\n              return value\n            },\n          },\n        }\n      }\n      Object.defineProperties(trackedResult, properties)\n      return trackedResult\n    }\n\n    return result\n  }, [result])\n}\n"],"names":[],"mappings":";;;AAGA,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,OAAO,CAAA;AACvC,OAAO,EAAE,gCAAgC,EAAE,MAAM,+CAA+C,CAAA;AAFhG,OAAO,EAAE,SAAS,EAAE,MAAM,sBAAsB,CAAA;AAFhD,YAAY,CAAA;;;;AAMZ,MAAM,aAAa,GAAG,CAAC,GAAY,EAAE,CACnC,CADqC,MAC9B,GAAG,KAAK,QAAQ,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAA;AAE1C,SAAU,+BAA+B,CAI7C,SAAoD,EACpD,WAA2B,EAC3B,oBAAyD,WAAW,EACpE,+XAAmD,YAAS;IAE5D,MAAM,WAAW,GAAG,4UAAA,AAAM,EAAW,EAAE,CAAC,CAAA;IACxC,MAAM,MAAM,0RAAG,mCAAA,AAAgC,EAC7C,SAAS,EACT,WAAW,EACX,iBAAiB;oFACjB,CAAC,CAAC,EAAE,CAAG,CAAD,AAAE;;oFACR,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YACP,IAAI,aAAa,CAAC,CAAC,CAAC,IAAI,aAAa,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;gBACvE,KAAK,MAAM,GAAG,IAAI,WAAW,CAAC,OAAO,CAAE,CAAC;oBACtC,MAAM,KAAK,GAAG,OAAO,CAClB,CAA2B,CAAC,GAAG,CAAC,EAChC,CAA2B,CAAC,GAAG,CAAC,CAClC,CAAA;oBACD,IAAI,CAAC,KAAK,EAAE,OAAO,KAAK,CAAA;gBAC1B,CAAC;gBACD,OAAO,IAAI,CAAA;YACb,CAAC;YACD,OAAO,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;QACtB,CAAC,CACF,CAAA;;IAED,0UAAO,UAAA,AAAO;mDAAC,GAAG,EAAE;YAClB,IAAI,aAAa,CAAC,MAAM,CAAC,EAAE,CAAC;gBAC1B,MAAM,aAAa,GAAG;oBAAE,GAAG,MAAM;gBAAA,CAAE,CAAA;gBACnC,IAAI,UAAU,GAAG,CAAA,CAAE,CAAA;gBACnB,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CACvC,aAAuC,CACxC,CAAE,CAAC;oBACF,UAAU,GAAG;wBACX,GAAG,UAAU;wBACb,CAAC,GAAG,CAAC,EAAE;4BACL,YAAY,EAAE,KAAK;4BACnB,UAAU,EAAE,IAAI;4BAChB,GAAG;2EAAE,GAAG,EAAE;oCACR,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;wCACvC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;oCAC/B,CAAC;oCACD,OAAO,KAAK,CAAA;gCACd,CAAC;;yBACF;qBACF,CAAA;gBACH,CAAC;gBACD,MAAM,CAAC,gBAAgB,CAAC,aAAa,EAAE,UAAU,CAAC,CAAA;gBAClD,OAAO,aAAa,CAAA;YACtB,CAAC;YAED,OAAO,MAAM,CAAA;QACf,CAAC;kDAAE;QAAC,MAAM;KAAC,CAAC,CAAA;AACd,CAAC","ignoreList":[0]}},
    {"offset": {"line": 226, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 232, "column": 0}, "map": {"version":3,"file":"useAccount.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useAccount.ts"],"sourcesContent":["'use client'\n\nimport {\n  type Config,\n  type GetAccountReturnType,\n  type ResolvedRegister,\n  getAccount,\n  watchAccount,\n} from '@wagmi/core'\n\nimport type { ConfigParameter } from '../types/properties.js'\nimport { useConfig } from './useConfig.js'\nimport { useSyncExternalStoreWithTracked } from './useSyncExternalStoreWithTracked.js'\n\nexport type UseAccountParameters<config extends Config = Config> =\n  ConfigParameter<config>\n\nexport type UseAccountReturnType<config extends Config = Config> =\n  GetAccountReturnType<config>\n\n/** https://wagmi.sh/react/api/hooks/useAccount */\nexport function useAccount<config extends Config = ResolvedRegister['config']>(\n  parameters: UseAccountParameters<config> = {},\n): UseAccountReturnType<config> {\n  const config = useConfig(parameters)\n\n  return useSyncExternalStoreWithTracked(\n    (onChange) => watchAccount(config, { onChange }),\n    () => getAccount(config),\n  )\n}\n"],"names":[],"mappings":";;;AAWA,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAC1C,OAAO,EAAE,+BAA+B,EAAE,MAAM,sCAAsC,CAAA;;AAVtF,OAAO,EAIL,UAAU,EACV,YAAY,GACb,MAAM,aAAa,CAAA;AARpB,YAAY,CAAA;;;;AAqBN,SAAU,UAAU,CACxB,aAA2C,CAAA,CAAE;IAE7C,MAAM,MAAM,qXAAG,YAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IAEpC,+YAAO,kCAAA,AAA+B;sDACpC,CAAC,QAAQ,EAAE,EAAE,6XAAC,eAAY,AAAZ,EAAa,MAAM,EAAE;gBAAE,QAAQ;YAAA,CAAE,CAAC;;sDAChD,GAAG,EAAE,2XAAC,aAAA,AAAU,EAAC,MAAM,CAAC,CACzB,CAAA;;AACH,CAAC","ignoreList":[0]}},
    {"offset": {"line": 253, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 259, "column": 0}, "map": {"version":3,"file":"useAccountEffect.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useAccountEffect.ts"],"sourcesContent":["'use client'\n\nimport { type GetAccountReturnType, watchAccount } from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport { useEffect } from 'react'\n\nimport type { ConfigParameter } from '../types/properties.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseAccountEffectParameters = Compute<\n  {\n    onConnect?(\n      data: Compute<\n        Pick<\n          Extract<GetAccountReturnType, { status: 'connected' }>,\n          'address' | 'addresses' | 'chain' | 'chainId' | 'connector'\n        > & {\n          isReconnected: boolean\n        }\n      >,\n    ): void\n    onDisconnect?(): void\n  } & ConfigParameter\n>\n\n/** https://wagmi.sh/react/api/hooks/useAccountEffect */\nexport function useAccountEffect(parameters: UseAccountEffectParameters = {}) {\n  const { onConnect, onDisconnect } = parameters\n\n  const config = useConfig(parameters)\n\n  useEffect(() => {\n    return watchAccount(config, {\n      onChange(data, prevData) {\n        if (\n          (prevData.status === 'reconnecting' ||\n            (prevData.status === 'connecting' &&\n              prevData.address === undefined)) &&\n          data.status === 'connected'\n        ) {\n          const { address, addresses, chain, chainId, connector } = data\n          const isReconnected =\n            prevData.status === 'reconnecting' ||\n            // if `previousAccount.status` is `undefined`, the connector connected immediately.\n            prevData.status === undefined\n          onConnect?.({\n            address,\n            addresses,\n            chain,\n            chainId,\n            connector,\n            isReconnected,\n          })\n        } else if (\n          prevData.status === 'connected' &&\n          data.status === 'disconnected'\n        )\n          onDisconnect?.()\n      },\n    })\n  }, [config, onConnect, onDisconnect])\n}\n"],"names":[],"mappings":";;;AAIA,OAAO,EAAE,SAAS,EAAE,MAAM,OAAO,CAAA;AAGjC,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAL1C,OAAO,EAA6B,YAAY,EAAE,MAAM,aAAa,CAAA;AAFrE,YAAY,CAAA;;;;AA0BN,SAAU,gBAAgB,CAAC,aAAyC,CAAA,CAAE;IAC1E,MAAM,EAAE,SAAS,EAAE,YAAY,EAAE,GAAG,UAAU,CAAA;IAE9C,MAAM,MAAM,GAAG,8XAAA,AAAS,EAAC,UAAU,CAAC,CAAA;uUAEpC,YAAA,AAAS;sCAAC,GAAG,EAAE;YACb,QAAO,4YAAA,AAAY,EAAC,MAAM,EAAE;gBAC1B,QAAQ,EAAC,IAAI,EAAE,QAAQ;oBACrB,IACE,CAAC,QAAQ,CAAC,MAAM,KAAK,cAAc,IAChC,QAAQ,CAAC,MAAM,KAAK,YAAY,IAC/B,QAAQ,CAAC,OAAO,KAAK,SAAS,AAAC,CAAC,IACpC,IAAI,CAAC,MAAM,KAAK,WAAW,EAC3B,CAAC;wBACD,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,SAAS,EAAE,GAAG,IAAI,CAAA;wBAC9D,MAAM,aAAa,GACjB,QAAQ,CAAC,MAAM,KAAK,cAAc,IAClC,mFAAmF;wBACnF,QAAQ,CAAC,MAAM,KAAK,SAAS,CAAA;wBAC/B,SAAS,EAAE,CAAC;4BACV,OAAO;4BACP,SAAS;4BACT,KAAK;4BACL,OAAO;4BACP,SAAS;4BACT,aAAa;yBACd,CAAC,CAAA;oBACJ,CAAC,MAAM,IACL,QAAQ,CAAC,MAAM,KAAK,WAAW,IAC/B,IAAI,CAAC,MAAM,KAAK,cAAc,EAE9B,YAAY,EAAE,EAAE,CAAA;gBACpB,CAAC;aACF,CAAC,CAAA;QACJ,CAAC;qCAAE;QAAC,MAAM;QAAE,SAAS;QAAE,YAAY;KAAC,CAAC,CAAA;AACvC,CAAC","ignoreList":[0]}},
    {"offset": {"line": 298, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 304, "column": 0}, "map": {"version":3,"file":"useSignMessage.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useSignMessage.ts"],"sourcesContent":["'use client'\n\nimport { useMutation } from '@tanstack/react-query'\nimport type { SignMessageErrorType } from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport {\n  type SignMessageData,\n  type SignMessageMutate,\n  type SignMessageMutateAsync,\n  type SignMessageVariables,\n  signMessageMutationOptions,\n} from '@wagmi/core/query'\n\nimport type { ConfigParameter } from '../types/properties.js'\nimport type {\n  UseMutationParameters,\n  UseMutationReturnType,\n} from '../utils/query.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseSignMessageParameters<context = unknown> = Compute<\n  ConfigParameter & {\n    mutation?:\n      | UseMutationParameters<\n          SignMessageData,\n          SignMessageErrorType,\n          SignMessageVariables,\n          context\n        >\n      | undefined\n  }\n>\n\nexport type UseSignMessageReturnType<context = unknown> = Compute<\n  UseMutationReturnType<\n    SignMessageData,\n    SignMessageErrorType,\n    SignMessageVariables,\n    context\n  > & {\n    signMessage: SignMessageMutate<context>\n    signMessageAsync: SignMessageMutateAsync<context>\n  }\n>\n\n/** https://wagmi.sh/react/api/hooks/useSignMessage */\nexport function useSignMessage<context = unknown>(\n  parameters: UseSignMessageParameters<context> = {},\n): UseSignMessageReturnType<context> {\n  const { mutation } = parameters\n\n  const config = useConfig(parameters)\n\n  const mutationOptions = signMessageMutationOptions(config)\n  const { mutate, mutateAsync, ...result } = useMutation({\n    ...mutation,\n    ...mutationOptions,\n  })\n\n  return {\n    ...result,\n    signMessage: mutate,\n    signMessageAsync: mutateAsync,\n  }\n}\n"],"names":[],"mappings":";;;AAkBA,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAb1C,OAAO,EAKL,0BAA0B,GAC3B,MAAM,mBAAmB,CAAA;AAT1B,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAA;AAFnD,YAAY,CAAA;;;;AA8CN,SAAU,cAAc,CAC5B,aAAgD,CAAA,CAAE;IAElD,MAAM,EAAE,QAAQ,EAAE,GAAG,UAAU,CAAA;IAE/B,MAAM,MAAM,IAAG,6XAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IAEpC,MAAM,eAAe,8XAAG,6BAAA,AAA0B,EAAC,MAAM,CAAC,CAAA;IAC1D,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,GAAG,MAAM,EAAE,yRAAG,cAAA,AAAW,EAAC;QACrD,GAAG,QAAQ;QACX,GAAG,eAAe;KACnB,CAAC,CAAA;IAEF,OAAO;QACL,GAAG,MAAM;QACT,WAAW,EAAE,MAAM;QACnB,gBAAgB,EAAE,WAAW;KAC9B,CAAA;AACH,CAAC","ignoreList":[0]}},
    {"offset": {"line": 328, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 334, "column": 0}, "map": {"version":3,"file":"useConnectors.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useConnectors.ts"],"sourcesContent":["'use client'\n\nimport {\n  type Config,\n  type GetConnectorsReturnType,\n  type ResolvedRegister,\n  getConnectors,\n  watchConnectors,\n} from '@wagmi/core'\nimport { useSyncExternalStore } from 'react'\n\nimport type { ConfigParameter } from '../types/properties.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseConnectorsParameters<config extends Config = Config> =\n  ConfigParameter<config>\n\nexport type UseConnectorsReturnType<config extends Config = Config> =\n  GetConnectorsReturnType<config>\n\n/** https://wagmi.sh/react/api/hooks/useConnectors */\nexport function useConnectors<\n  config extends Config = ResolvedRegister['config'],\n>(\n  parameters: UseConnectorsParameters<config> = {},\n): UseConnectorsReturnType<config> {\n  const config = useConfig(parameters)\n\n  return useSyncExternalStore(\n    (onChange) => watchConnectors(config, { onChange }),\n    () => getConnectors(config),\n    () => getConnectors(config),\n  )\n}\n"],"names":[],"mappings":";;;AASA,OAAO,EAAE,oBAAoB,EAAE,MAAM,OAAO,CAAA;AAG5C,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;;AAV1C,OAAO,EAIL,aAAa,EACb,eAAe,GAChB,MAAM,aAAa,CAAA;AARpB,YAAY,CAAA;;;;AAqBN,SAAU,aAAa,CAG3B,aAA8C,CAAA,CAAE;IAEhD,MAAM,MAAM,qXAAG,YAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IAEpC,0UAAO,uBAAA,AAAoB;8CACzB,CAAC,QAAQ,EAAE,EAAE,gYAAC,kBAAA,AAAe,EAAC,MAAM,EAAE;gBAAE,QAAQ;YAAA,CAAE,CAAC;;8CACnD,GAAG,EAAE,8XAAC,gBAAA,AAAa,EAAC,MAAM,CAAC;;8CAC3B,GAAG,EAAE,8XAAC,gBAAA,AAAa,EAAC,MAAM,CAAC,CAC5B,CAAA;;AACH,CAAC","ignoreList":[0]}},
    {"offset": {"line": 357, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 363, "column": 0}, "map": {"version":3,"file":"useChains.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useChains.ts"],"sourcesContent":["'use client'\n\nimport {\n  type Config,\n  type GetChainsReturnType,\n  type ResolvedRegister,\n  getChains,\n} from '@wagmi/core'\nimport { watchChains } from '@wagmi/core/internal'\nimport { useSyncExternalStore } from 'react'\n\nimport type { ConfigParameter } from '../types/properties.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseChainsParameters<config extends Config = Config> =\n  ConfigParameter<config>\n\nexport type UseChainsReturnType<config extends Config = Config> =\n  GetChainsReturnType<config>\n\n/** https://wagmi.sh/react/api/hooks/useChains */\nexport function useChains<config extends Config = ResolvedRegister['config']>(\n  parameters: UseChainsParameters<config> = {},\n): UseChainsReturnType<config> {\n  const config = useConfig(parameters)\n\n  return useSyncExternalStore(\n    (onChange) => watchChains(config, { onChange }),\n    () => getChains(config),\n    () => getChains(config),\n  )\n}\n"],"names":[],"mappings":";;;AASA,OAAO,EAAE,oBAAoB,EAAE,MAAM,OAAO,CAAA;AAG5C,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAJ1C,OAAO,EAAE,WAAW,EAAE,MAAM,sBAAsB,CAAA;AANlD,OAAO,EAIL,SAAS,GACV,MAAM,aAAa,CAAA;AAPpB,YAAY,CAAA;;;;;AAqBN,SAAU,SAAS,CACvB,aAA0C,CAAA,CAAE;IAE5C,MAAM,MAAM,qXAAG,YAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IAEpC,0UAAO,uBAAA,AAAoB;0CACzB,CAAC,QAAQ,EAAE,EAAE,4XAAC,cAAA,AAAW,EAAC,MAAM,EAAE;gBAAE,QAAQ;YAAA,CAAE,CAAC;;0CAC/C,GAAG,EAAE,0XAAC,YAAA,AAAS,EAAC,MAAM,CAAC;;0CACvB,GAAG,EAAE,0XAAC,YAAA,AAAS,EAAC,MAAM,CAAC,CACxB,CAAA;;AACH,CAAC","ignoreList":[0]}},
    {"offset": {"line": 387, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 393, "column": 0}, "map": {"version":3,"file":"useSwitchChain.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useSwitchChain.ts"],"sourcesContent":["'use client'\n\nimport { useMutation } from '@tanstack/react-query'\nimport type {\n  Config,\n  ResolvedRegister,\n  SwitchChainErrorType,\n} from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport {\n  type SwitchChainData,\n  type SwitchChainMutate,\n  type SwitchChainMutateAsync,\n  type SwitchChainVariables,\n  switchChainMutationOptions,\n} from '@wagmi/core/query'\n\nimport type { ConfigParameter } from '../types/properties.js'\nimport type {\n  UseMutationParameters,\n  UseMutationReturnType,\n} from '../utils/query.js'\nimport { useChains } from './useChains.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseSwitchChainParameters<\n  config extends Config = Config,\n  context = unknown,\n> = Compute<\n  ConfigParameter<config> & {\n    mutation?:\n      | UseMutationParameters<\n          SwitchChainData<config, config['chains'][number]['id']>,\n          SwitchChainErrorType,\n          SwitchChainVariables<config, config['chains'][number]['id']>,\n          context\n        >\n      | undefined\n  }\n>\n\nexport type UseSwitchChainReturnType<\n  config extends Config = Config,\n  context = unknown,\n> = Compute<\n  UseMutationReturnType<\n    SwitchChainData<config, config['chains'][number]['id']>,\n    SwitchChainErrorType,\n    SwitchChainVariables<config, config['chains'][number]['id']>,\n    context\n  > & {\n    chains: config['chains']\n    switchChain: SwitchChainMutate<config, context>\n    switchChainAsync: SwitchChainMutateAsync<config, context>\n  }\n>\n\n/** https://wagmi.sh/react/api/hooks/useSwitchChain */\nexport function useSwitchChain<\n  config extends Config = ResolvedRegister['config'],\n  context = unknown,\n>(\n  parameters: UseSwitchChainParameters<config, context> = {},\n): UseSwitchChainReturnType<config, context> {\n  const { mutation } = parameters\n\n  const config = useConfig(parameters)\n\n  const mutationOptions = switchChainMutationOptions(config)\n  const { mutate, mutateAsync, ...result } = useMutation({\n    ...mutation,\n    ...mutationOptions,\n  })\n\n  type Return = UseSwitchChainReturnType<config, context>\n  return {\n    ...result,\n    chains: useChains({ config }) as unknown as config['chains'],\n    switchChain: mutate as Return['switchChain'],\n    switchChainAsync: mutateAsync as Return['switchChainAsync'],\n  }\n}\n"],"names":[],"mappings":";;;AAuBA,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAd1C,OAAO,EAKL,0BAA0B,GAC3B,MAAM,mBAAmB,CAAA;AAb1B,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAA;AAoBnD,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAtB1C,YAAY,CAAA;;;;;AA0DN,SAAU,cAAc,CAI5B,aAAwD,CAAA,CAAE;IAE1D,MAAM,EAAE,QAAQ,EAAE,GAAG,UAAU,CAAA;IAE/B,MAAM,MAAM,IAAG,6XAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IAEpC,MAAM,eAAe,8XAAG,6BAAA,AAA0B,EAAC,MAAM,CAAC,CAAA;IAC1D,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,GAAG,MAAM,EAAE,yRAAG,cAAA,AAAW,EAAC;QACrD,GAAG,QAAQ;QACX,GAAG,eAAe;KACnB,CAAC,CAAA;IAGF,OAAO;QACL,GAAG,MAAM;QACT,MAAM,oXAAE,YAAA,AAAS,EAAC;YAAE,MAAM;QAAA,CAAE,CAAgC;QAC5D,WAAW,EAAE,MAA+B;QAC5C,gBAAgB,EAAE,WAAyC;KAC5D,CAAA;AACH,CAAC","ignoreList":[0]}},
    {"offset": {"line": 422, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 428, "column": 0}, "map": {"version":3,"file":"useConnect.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useConnect.ts"],"sourcesContent":["'use client'\n\nimport { useMutation } from '@tanstack/react-query'\nimport type { Config, ConnectErrorType, ResolvedRegister } from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport {\n  type ConnectData,\n  type ConnectMutate,\n  type ConnectMutateAsync,\n  type ConnectVariables,\n  connectMutationOptions,\n} from '@wagmi/core/query'\nimport { useEffect } from 'react'\n\nimport type { ConfigParameter } from '../types/properties.js'\nimport type {\n  UseMutationParameters,\n  UseMutationReturnType,\n} from '../utils/query.js'\nimport { useConfig } from './useConfig.js'\nimport { type UseConnectorsReturnType, useConnectors } from './useConnectors.js'\n\nexport type UseConnectParameters<\n  config extends Config = Config,\n  context = unknown,\n> = Compute<\n  ConfigParameter<config> & {\n    mutation?:\n      | UseMutationParameters<\n          ConnectData<config>,\n          ConnectErrorType,\n          ConnectVariables<config, config['connectors'][number]>,\n          context\n        >\n      | undefined\n  }\n>\n\nexport type UseConnectReturnType<\n  config extends Config = Config,\n  context = unknown,\n> = Compute<\n  UseMutationReturnType<\n    ConnectData<config>,\n    ConnectErrorType,\n    ConnectVariables<config, config['connectors'][number]>,\n    context\n  > & {\n    connect: ConnectMutate<config, context>\n    connectAsync: ConnectMutateAsync<config, context>\n    connectors: Compute<UseConnectorsReturnType> | config['connectors']\n  }\n>\n\n/** https://wagmi.sh/react/api/hooks/useConnect */\nexport function useConnect<\n  config extends Config = ResolvedRegister['config'],\n  context = unknown,\n>(\n  parameters: UseConnectParameters<config, context> = {},\n): UseConnectReturnType<config, context> {\n  const { mutation } = parameters\n\n  const config = useConfig(parameters)\n\n  const mutationOptions = connectMutationOptions(config)\n  const { mutate, mutateAsync, ...result } = useMutation({\n    ...mutation,\n    ...mutationOptions,\n  })\n\n  // Reset mutation back to an idle state when the connector disconnects.\n  useEffect(() => {\n    return config.subscribe(\n      ({ status }) => status,\n      (status, previousStatus) => {\n        if (previousStatus === 'connected' && status === 'disconnected')\n          result.reset()\n      },\n    )\n  }, [config, result.reset])\n\n  type Return = UseConnectReturnType<config, context>\n  return {\n    ...(result as Return),\n    connect: mutate as Return['connect'],\n    connectAsync: mutateAsync as Return['connectAsync'],\n    connectors: useConnectors({ config }),\n  }\n}\n"],"names":[],"mappings":";;;AAYA,OAAO,EAAE,SAAS,EAAE,MAAM,OAAO,CAAA;AAOjC,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAd1C,OAAO,EAKL,sBAAsB,GACvB,MAAM,mBAAmB,CAAA;AAT1B,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAA;AAkBnD,OAAO,EAAgC,aAAa,EAAE,MAAM,oBAAoB,CAAA;AApBhF,YAAY,CAAA;;;;;;AAuDN,SAAU,UAAU,CAIxB,aAAoD,CAAA,CAAE;IAEtD,MAAM,EAAE,QAAQ,EAAE,GAAG,UAAU,CAAA;IAE/B,MAAM,MAAM,GAAG,8XAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IAEpC,MAAM,eAAe,0XAAG,yBAAA,AAAsB,EAAC,MAAM,CAAC,CAAA;IACtD,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,GAAG,MAAM,EAAE,yRAAG,cAAA,AAAW,EAAC;QACrD,GAAG,QAAQ;QACX,GAAG,eAAe;KACnB,CAAC,CAAA;IAEF,uEAAuE;KACvE,8UAAA,AAAS;gCAAC,GAAG,EAAE;YACb,OAAO,MAAM,CAAC,SAAS;wCACrB,CAAC,EAAE,MAAM,EAAE,EAAE,CAAG,CAAD,KAAO;;wCACtB,CAAC,MAAM,EAAE,cAAc,EAAE,EAAE;oBACzB,IAAI,cAAc,KAAK,WAAW,IAAI,MAAM,KAAK,cAAc,EAC7D,MAAM,CAAC,KAAK,EAAE,CAAA;gBAClB,CAAC,CACF,CAAA;;QACH,CAAC;+BAAE;QAAC,MAAM;QAAE,MAAM,CAAC,KAAK;KAAC,CAAC,CAAA;IAG1B,OAAO;QACL,GAAI,MAAiB;QACrB,OAAO,EAAE,MAA2B;QACpC,YAAY,EAAE,WAAqC;QACnD,UAAU,wXAAE,gBAAA,AAAa,EAAC;YAAE,MAAM;QAAA,CAAE,CAAC;KACtC,CAAA;AACH,CAAC","ignoreList":[0]}},
    {"offset": {"line": 474, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 480, "column": 0}, "map": {"version":3,"file":"useChainId.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useChainId.ts"],"sourcesContent":["'use client'\n\nimport {\n  type Config,\n  type GetChainIdReturnType,\n  type ResolvedRegister,\n  getChainId,\n  watchChainId,\n} from '@wagmi/core'\nimport { useSyncExternalStore } from 'react'\n\nimport type { ConfigParameter } from '../types/properties.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseChainIdParameters<config extends Config = Config> =\n  ConfigParameter<config>\n\nexport type UseChainIdReturnType<config extends Config = Config> =\n  GetChainIdReturnType<config>\n\n/** https://wagmi.sh/react/api/hooks/useChainId */\nexport function useChainId<config extends Config = ResolvedRegister['config']>(\n  parameters: UseChainIdParameters<config> = {},\n): UseChainIdReturnType<config> {\n  const config = useConfig(parameters)\n\n  return useSyncExternalStore(\n    (onChange) => watchChainId(config, { onChange }),\n    () => getChainId(config),\n    () => getChainId(config),\n  )\n}\n"],"names":[],"mappings":";;;AASA,OAAO,EAAE,oBAAoB,EAAE,MAAM,OAAO,CAAA;AAG5C,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;;AAV1C,OAAO,EAIL,UAAU,EACV,YAAY,GACb,MAAM,aAAa,CAAA;AARpB,YAAY,CAAA;;;;AAqBN,SAAU,UAAU,CACxB,aAA2C,CAAA,CAAE;IAE7C,MAAM,MAAM,qXAAG,YAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IAEpC,0UAAO,uBAAA,AAAoB;2CACzB,CAAC,QAAQ,EAAE,EAAE,6XAAC,eAAA,AAAY,EAAC,MAAM,EAAE;gBAAE,QAAQ;YAAA,CAAE,CAAC;;2CAChD,GAAG,EAAE,2XAAC,aAAA,AAAU,EAAC,MAAM,CAAC;;2CACxB,GAAG,EAAE,2XAAC,aAAA,AAAU,EAAC,MAAM,CAAC,CACzB,CAAA;;AACH,CAAC","ignoreList":[0]}},
    {"offset": {"line": 503, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 509, "column": 0}, "map": {"version":3,"file":"query.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/utils/query.ts"],"sourcesContent":["import {\n  type DefaultError,\n  type QueryKey,\n  type UseInfiniteQueryOptions,\n  type UseInfiniteQueryResult,\n  type UseMutationOptions,\n  type UseMutationResult,\n  type UseQueryOptions,\n  type UseQueryResult,\n  useInfiniteQuery as tanstack_useInfiniteQuery,\n  useQuery as tanstack_useQuery,\n  useMutation,\n} from '@tanstack/react-query'\nimport type {\n  Compute,\n  ExactPartial,\n  Omit,\n  UnionStrictOmit,\n} from '@wagmi/core/internal'\nimport { hashFn } from '@wagmi/core/query'\n\nexport type UseMutationParameters<\n  data = unknown,\n  error = Error,\n  variables = void,\n  context = unknown,\n> = Compute<\n  Omit<\n    UseMutationOptions<data, error, Compute<variables>, context>,\n    'mutationFn' | 'mutationKey' | 'throwOnError'\n  >\n>\n\nexport type UseMutationReturnType<\n  data = unknown,\n  error = Error,\n  variables = void,\n  context = unknown,\n> = Compute<\n  UnionStrictOmit<\n    UseMutationResult<data, error, variables, context>,\n    'mutate' | 'mutateAsync'\n  >\n>\n\nexport { useMutation }\n\n////////////////////////////////////////////////////////////////////////////////\n\nexport type UseQueryParameters<\n  queryFnData = unknown,\n  error = DefaultError,\n  data = queryFnData,\n  queryKey extends QueryKey = QueryKey,\n> = Compute<\n  ExactPartial<\n    Omit<UseQueryOptions<queryFnData, error, data, queryKey>, 'initialData'>\n  > & {\n    // Fix `initialData` type\n    initialData?:\n      | UseQueryOptions<queryFnData, error, data, queryKey>['initialData']\n      | undefined\n  }\n>\n\nexport type UseQueryReturnType<data = unknown, error = DefaultError> = Compute<\n  UseQueryResult<data, error> & {\n    queryKey: QueryKey\n  }\n>\n\n// Adding some basic customization.\n// Ideally we don't have this function, but `import('@tanstack/react-query').useQuery` currently has some quirks where it is super hard to\n// pass down the inferred `initialData` type because of it's discriminated overload in the on `useQuery`.\nexport function useQuery<queryFnData, error, data, queryKey extends QueryKey>(\n  parameters: UseQueryParameters<queryFnData, error, data, queryKey> & {\n    queryKey: QueryKey\n  },\n): UseQueryReturnType<data, error> {\n  const result = tanstack_useQuery({\n    ...(parameters as any),\n    queryKeyHashFn: hashFn, // for bigint support\n  }) as UseQueryReturnType<data, error>\n  result.queryKey = parameters.queryKey\n  return result\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nexport type UseInfiniteQueryParameters<\n  queryFnData = unknown,\n  error = DefaultError,\n  data = queryFnData,\n  queryData = queryFnData,\n  queryKey extends QueryKey = QueryKey,\n  pageParam = unknown,\n> = Compute<\n  Omit<\n    UseInfiniteQueryOptions<\n      queryFnData,\n      error,\n      data,\n      queryData,\n      queryKey,\n      pageParam\n    >,\n    'initialData'\n  > & {\n    // Fix `initialData` type\n    initialData?:\n      | UseInfiniteQueryOptions<\n          queryFnData,\n          error,\n          data,\n          queryKey\n        >['initialData']\n      | undefined\n  }\n>\n\nexport type UseInfiniteQueryReturnType<\n  data = unknown,\n  error = DefaultError,\n> = UseInfiniteQueryResult<data, error> & {\n  queryKey: QueryKey\n}\n\n// Adding some basic customization.\nexport function useInfiniteQuery<\n  queryFnData,\n  error,\n  data,\n  queryKey extends QueryKey,\n>(\n  parameters: UseInfiniteQueryParameters<queryFnData, error, data, queryKey> & {\n    queryKey: QueryKey\n  },\n): UseInfiniteQueryReturnType<data, error> {\n  const result = tanstack_useInfiniteQuery({\n    ...(parameters as any),\n    queryKeyHashFn: hashFn, // for bigint support\n  }) as UseInfiniteQueryReturnType<data, error>\n  result.queryKey = parameters.queryKey\n  return result\n}\n"],"names":[],"mappings":";;;;AAAA,OAAO,EASL,gBAAgB,IAAI,yBAAyB,EAC7C,QAAQ,IAAI,iBAAiB,EAC7B,WAAW,GACZ,MAAM,uBAAuB,CAAA;AAO9B,OAAO,EAAE,MAAM,EAAE,MAAM,mBAAmB,CAAA;;;;;AAuDpC,SAAU,QAAQ,CACtB,UAEC;IAED,MAAM,MAAM,sRAAG,WAAA,AAAiB,EAAC;QAC/B,GAAI,UAAkB;QACtB,cAAc,mXAAE,SAAM,EAAE,qBAAqB;KAC9C,CAAoC,CAAA;IACrC,MAAM,CAAC,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAA;IACrC,OAAO,MAAM,CAAA;AACf,CAAC;AA2CK,SAAU,gBAAgB,CAM9B,UAEC;IAED,MAAM,MAAM,8RAAG,mBAAA,AAAyB,EAAC;QACvC,GAAI,UAAkB;QACtB,cAAc,mXAAE,SAAM,EAAE,qBAAqB;KAC9C,CAA4C,CAAA;IAC7C,MAAM,CAAC,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAA;IACrC,OAAO,MAAM,CAAA;AACf,CAAC","ignoreList":[0]}},
    {"offset": {"line": 535, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 541, "column": 0}, "map": {"version":3,"file":"useEnsAddress.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useEnsAddress.ts"],"sourcesContent":["'use client'\n\nimport type {\n  Config,\n  GetEnsAddressErrorType,\n  ResolvedRegister,\n} from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport {\n  type GetEnsAddressData,\n  type GetEnsAddressOptions,\n  type GetEnsAddressQueryFnData,\n  type GetEnsAddressQueryKey,\n  getEnsAddressQueryOptions,\n} from '@wagmi/core/query'\n\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseEnsAddressParameters<\n  config extends Config = Config,\n  selectData = GetEnsAddressData,\n> = Compute<\n  GetEnsAddressOptions<config> &\n    ConfigParameter<config> &\n    QueryParameter<\n      GetEnsAddressQueryFnData,\n      GetEnsAddressErrorType,\n      selectData,\n      GetEnsAddressQueryKey<config>\n    >\n>\n\nexport type UseEnsAddressReturnType<selectData = GetEnsAddressData> =\n  UseQueryReturnType<selectData, GetEnsAddressErrorType>\n\n/** https://wagmi.sh/react/api/hooks/useEnsAddress */\nexport function useEnsAddress<\n  config extends Config = ResolvedRegister['config'],\n  selectData = GetEnsAddressData,\n>(\n  parameters: UseEnsAddressParameters<config, selectData> = {},\n): UseEnsAddressReturnType<selectData> {\n  const { name, query = {} } = parameters\n\n  const config = useConfig(parameters)\n  const chainId = useChainId({ config })\n\n  const options = getEnsAddressQueryOptions(config, {\n    ...parameters,\n    chainId: parameters.chainId ?? chainId,\n  })\n  const enabled = Boolean(name && (query.enabled ?? true))\n\n  return useQuery({ ...query, ...options, enabled })\n}\n"],"names":[],"mappings":";;;AAmBA,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAD1C,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAA;AAV5C,OAAO,EAKL,yBAAyB,GAC1B,MAAM,mBAAmB,CAAA;AAG1B,OAAO,EAA2B,QAAQ,EAAE,MAAM,mBAAmB,CAAA;AAjBrE,YAAY,CAAA;;;;;AAuCN,SAAU,aAAa,CAI3B,aAA0D,CAAA,CAAE;IAE5D,MAAM,EAAE,IAAI,EAAE,KAAK,GAAG,CAAA,CAAE,EAAE,GAAG,UAAU,CAAA;IAEvC,MAAM,MAAM,qXAAG,YAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IACpC,MAAM,OAAO,sXAAG,aAAA,AAAU,EAAC;QAAE,MAAM;IAAA,CAAE,CAAC,CAAA;IAEtC,MAAM,OAAO,IAAG,wZAAA,AAAyB,EAAC,MAAM,EAAE;QAChD,GAAG,UAAU;QACb,OAAO,EAAE,UAAU,CAAC,OAAO,IAAI,OAAO;KACvC,CAAC,CAAA;IACF,MAAM,OAAO,GAAG,OAAO,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC,CAAA;IAExD,qYAAO,WAAA,AAAQ,EAAC;QAAE,GAAG,KAAK;QAAE,GAAG,OAAO;QAAE,OAAO;IAAA,CAAE,CAAC,CAAA;AACpD,CAAC","ignoreList":[0]}},
    {"offset": {"line": 570, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 576, "column": 0}, "map": {"version":3,"file":"useEnsName.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useEnsName.ts"],"sourcesContent":["'use client'\n\nimport type { Config, GetEnsNameErrorType, ResolvedRegister } from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport {\n  type GetEnsNameData,\n  type GetEnsNameOptions,\n  type GetEnsNameQueryFnData,\n  type GetEnsNameQueryKey,\n  getEnsNameQueryOptions,\n} from '@wagmi/core/query'\n\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseEnsNameParameters<\n  config extends Config = Config,\n  selectData = GetEnsNameData,\n> = Compute<\n  GetEnsNameOptions<config> &\n    ConfigParameter<config> &\n    QueryParameter<\n      GetEnsNameQueryFnData,\n      GetEnsNameErrorType,\n      selectData,\n      GetEnsNameQueryKey<config>\n    >\n>\n\nexport type UseEnsNameReturnType<selectData = GetEnsNameData> =\n  UseQueryReturnType<selectData, GetEnsNameErrorType>\n\n/** https://wagmi.sh/react/api/hooks/useEnsName */\nexport function useEnsName<\n  config extends Config = ResolvedRegister['config'],\n  selectData = GetEnsNameData,\n>(\n  parameters: UseEnsNameParameters<config, selectData> = {},\n): UseEnsNameReturnType<selectData> {\n  const { address, query = {} } = parameters\n\n  const config = useConfig(parameters)\n  const chainId = useChainId({ config })\n\n  const options = getEnsNameQueryOptions(config, {\n    ...parameters,\n    chainId: parameters.chainId ?? chainId,\n  })\n  const enabled = Boolean(address && (query.enabled ?? true))\n\n  return useQuery({ ...query, ...options, enabled })\n}\n"],"names":[],"mappings":";;;AAeA,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAD1C,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAA;AAV5C,OAAO,EAKL,sBAAsB,GACvB,MAAM,mBAAmB,CAAA;AAG1B,OAAO,EAA2B,QAAQ,EAAE,MAAM,mBAAmB,CAAA;AAbrE,YAAY,CAAA;;;;;AAmCN,SAAU,UAAU,CAIxB,aAAuD,CAAA,CAAE;IAEzD,MAAM,EAAE,OAAO,EAAE,KAAK,GAAG,CAAA,CAAE,EAAE,GAAG,UAAU,CAAA;IAE1C,MAAM,MAAM,qXAAG,YAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IACpC,MAAM,OAAO,sXAAG,aAAA,AAAU,EAAC;QAAE,MAAM;IAAA,CAAE,CAAC,CAAA;IAEtC,MAAM,OAAO,IAAG,kZAAA,AAAsB,EAAC,MAAM,EAAE;QAC7C,GAAG,UAAU;QACb,OAAO,EAAE,UAAU,CAAC,OAAO,IAAI,OAAO;KACvC,CAAC,CAAA;IACF,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC,CAAA;IAE3D,qYAAO,WAAA,AAAQ,EAAC;QAAE,GAAG,KAAK;QAAE,GAAG,OAAO;QAAE,OAAO;IAAA,CAAE,CAAC,CAAA;AACpD,CAAC","ignoreList":[0]}},
    {"offset": {"line": 605, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 611, "column": 0}, "map": {"version":3,"file":"useEnsAvatar.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useEnsAvatar.ts"],"sourcesContent":["'use client'\n\nimport type {\n  Config,\n  GetEnsAvatarErrorType,\n  ResolvedRegister,\n} from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport {\n  type GetEnsAvatarData,\n  type GetEnsAvatarOptions,\n  type GetEnsAvatarQueryFnData,\n  type GetEnsAvatarQueryKey,\n  getEnsAvatarQueryOptions,\n} from '@wagmi/core/query'\n\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseEnsAvatarParameters<\n  config extends Config = Config,\n  selectData = GetEnsAvatarData,\n> = Compute<\n  GetEnsAvatarOptions<config> &\n    ConfigParameter<config> &\n    QueryParameter<\n      GetEnsAvatarQueryFnData,\n      GetEnsAvatarErrorType,\n      selectData,\n      GetEnsAvatarQueryKey<config>\n    >\n>\n\nexport type UseEnsAvatarReturnType<selectData = GetEnsAvatarData> =\n  UseQueryReturnType<selectData, GetEnsAvatarErrorType>\n\n/** https://wagmi.sh/react/api/hooks/useEnsAvatar */\nexport function useEnsAvatar<\n  config extends Config = ResolvedRegister['config'],\n  selectData = GetEnsAvatarData,\n>(\n  parameters: UseEnsAvatarParameters<config, selectData> = {},\n): UseEnsAvatarReturnType<selectData> {\n  const { name, query = {} } = parameters\n\n  const config = useConfig(parameters)\n  const chainId = useChainId({ config })\n\n  const options = getEnsAvatarQueryOptions(config, {\n    ...parameters,\n    chainId: parameters.chainId ?? chainId,\n  })\n  const enabled = Boolean(name && (query.enabled ?? true))\n\n  return useQuery({ ...query, ...options, enabled })\n}\n"],"names":[],"mappings":";;;AAmBA,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAD1C,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAA;AAV5C,OAAO,EAKL,wBAAwB,GACzB,MAAM,mBAAmB,CAAA;AAG1B,OAAO,EAA2B,QAAQ,EAAE,MAAM,mBAAmB,CAAA;AAjBrE,YAAY,CAAA;;;;;AAuCN,SAAU,YAAY,CAI1B,aAAyD,CAAA,CAAE;IAE3D,MAAM,EAAE,IAAI,EAAE,KAAK,GAAG,CAAA,CAAE,EAAE,GAAG,UAAU,CAAA;IAEvC,MAAM,MAAM,qXAAG,YAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IACpC,MAAM,OAAO,sXAAG,aAAA,AAAU,EAAC;QAAE,MAAM;IAAA,CAAE,CAAC,CAAA;IAEtC,MAAM,OAAO,IAAG,sZAAA,AAAwB,EAAC,MAAM,EAAE;QAC/C,GAAG,UAAU;QACb,OAAO,EAAE,UAAU,CAAC,OAAO,IAAI,OAAO;KACvC,CAAC,CAAA;IACF,MAAM,OAAO,GAAG,OAAO,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC,CAAA;IAExD,qYAAO,WAAA,AAAQ,EAAC;QAAE,GAAG,KAAK;QAAE,GAAG,OAAO;QAAE,OAAO;IAAA,CAAE,CAAC,CAAA;AACpD,CAAC","ignoreList":[0]}},
    {"offset": {"line": 640, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 646, "column": 0}, "map": {"version":3,"file":"useConnections.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useConnections.ts"],"sourcesContent":["'use client'\n\nimport {\n  type GetConnectionsReturnType,\n  getConnections,\n  watchConnections,\n} from '@wagmi/core'\nimport { useSyncExternalStore } from 'react'\n\nimport type { ConfigParameter } from '../types/properties.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseConnectionsParameters = ConfigParameter\n\nexport type UseConnectionsReturnType = GetConnectionsReturnType\n\n/** https://wagmi.sh/react/api/hooks/useConnections */\nexport function useConnections(\n  parameters: UseConnectionsParameters = {},\n): UseConnectionsReturnType {\n  const config = useConfig(parameters)\n\n  return useSyncExternalStore(\n    (onChange) => watchConnections(config, { onChange }),\n    () => getConnections(config),\n    () => getConnections(config),\n  )\n}\n"],"names":[],"mappings":";;;AAOA,OAAO,EAAE,oBAAoB,EAAE,MAAM,OAAO,CAAA;AAG5C,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;;AAR1C,OAAO,EAEL,cAAc,EACd,gBAAgB,GACjB,MAAM,aAAa,CAAA;AANpB,YAAY,CAAA;;;;AAiBN,SAAU,cAAc,CAC5B,aAAuC,CAAA,CAAE;IAEzC,MAAM,MAAM,qXAAG,YAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IAEpC,0UAAO,uBAAA,AAAoB;+CACzB,CAAC,QAAQ,EAAE,EAAE,iYAAC,mBAAA,AAAgB,EAAC,MAAM,EAAE;gBAAE,QAAQ;YAAA,CAAE,CAAC;;+CACpD,GAAG,EAAE,+XAAC,iBAAA,AAAc,EAAC,MAAM,CAAC;;+CAC5B,GAAG,EAAE,+XAAC,iBAAA,AAAc,EAAC,MAAM,CAAC,CAC7B,CAAA;;AACH,CAAC","ignoreList":[0]}},
    {"offset": {"line": 669, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 675, "column": 0}, "map": {"version":3,"file":"useDisconnect.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useDisconnect.ts"],"sourcesContent":["'use client'\n\nimport { useMutation } from '@tanstack/react-query'\nimport type { Connector, DisconnectErrorType } from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport {\n  type DisconnectData,\n  type DisconnectMutate,\n  type DisconnectMutateAsync,\n  type DisconnectVariables,\n  disconnectMutationOptions,\n} from '@wagmi/core/query'\n\nimport type { ConfigParameter } from '../types/properties.js'\nimport type {\n  UseMutationParameters,\n  UseMutationReturnType,\n} from '../utils/query.js'\nimport { useConfig } from './useConfig.js'\nimport { useConnections } from './useConnections.js'\n\nexport type UseDisconnectParameters<context = unknown> = Compute<\n  ConfigParameter & {\n    mutation?:\n      | UseMutationParameters<\n          DisconnectData,\n          DisconnectErrorType,\n          DisconnectVariables,\n          context\n        >\n      | undefined\n  }\n>\n\nexport type UseDisconnectReturnType<context = unknown> = Compute<\n  UseMutationReturnType<\n    DisconnectData,\n    DisconnectErrorType,\n    DisconnectVariables,\n    context\n  > & {\n    connectors: readonly Connector[]\n    disconnect: DisconnectMutate<context>\n    disconnectAsync: DisconnectMutateAsync<context>\n  }\n>\n\n/** https://wagmi.sh/react/api/hooks/useDisconnect */\nexport function useDisconnect<context = unknown>(\n  parameters: UseDisconnectParameters<context> = {},\n): UseDisconnectReturnType<context> {\n  const { mutation } = parameters\n\n  const config = useConfig(parameters)\n\n  const mutationOptions = disconnectMutationOptions(config)\n  const { mutate, mutateAsync, ...result } = useMutation({\n    ...mutation,\n    ...mutationOptions,\n  })\n\n  return {\n    ...result,\n    connectors: useConnections({ config }).map(\n      (connection) => connection.connector,\n    ),\n    disconnect: mutate,\n    disconnectAsync: mutateAsync,\n  }\n}\n"],"names":[],"mappings":";;;AAkBA,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAb1C,OAAO,EAKL,yBAAyB,GAC1B,MAAM,mBAAmB,CAAA;AAT1B,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAA;AAiBnD,OAAO,EAAE,cAAc,EAAE,MAAM,qBAAqB,CAAA;AAnBpD,YAAY,CAAA;;;;;AAgDN,SAAU,aAAa,CAC3B,aAA+C,CAAA,CAAE;IAEjD,MAAM,EAAE,QAAQ,EAAE,GAAG,UAAU,CAAA;IAE/B,MAAM,MAAM,IAAG,6XAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IAEpC,MAAM,eAAe,6XAAG,4BAAA,AAAyB,EAAC,MAAM,CAAC,CAAA;IACzD,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,GAAG,MAAM,EAAE,IAAG,mSAAA,AAAW,EAAC;QACrD,GAAG,QAAQ;QACX,GAAG,eAAe;KACnB,CAAC,CAAA;IAEF,OAAO;QACL,GAAG,MAAM;QACT,UAAU,yXAAE,iBAAA,AAAc,EAAC;YAAE,MAAM;QAAA,CAAE,CAAC,CAAC,GAAG,CACxC,CAAC,UAAU,EAAE,CAAG,CAAD,SAAW,CAAC,SAAS,CACrC;QACD,UAAU,EAAE,MAAM;QAClB,eAAe,EAAE,WAAW;KAC7B,CAAA;AACH,CAAC","ignoreList":[0]}},
    {"offset": {"line": 704, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 710, "column": 0}, "map": {"version":3,"file":"useBalance.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useBalance.ts"],"sourcesContent":["'use client'\n\nimport type { Config, GetBalanceErrorType, ResolvedRegister } from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport {\n  type GetBalanceData,\n  type GetBalanceOptions,\n  type GetBalanceQueryKey,\n  getBalanceQueryOptions,\n} from '@wagmi/core/query'\nimport type { GetBalanceQueryFnData } from '@wagmi/core/query'\n\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseBalanceParameters<\n  config extends Config = Config,\n  selectData = GetBalanceData,\n> = Compute<\n  GetBalanceOptions<config> &\n    ConfigParameter<config> &\n    QueryParameter<\n      GetBalanceQueryFnData,\n      GetBalanceErrorType,\n      selectData,\n      GetBalanceQueryKey<config>\n    >\n>\n\nexport type UseBalanceReturnType<selectData = GetBalanceData> =\n  UseQueryReturnType<selectData, GetBalanceErrorType>\n\n/** https://wagmi.sh/react/api/hooks/useBalance */\nexport function useBalance<\n  config extends Config = ResolvedRegister['config'],\n  selectData = GetBalanceData,\n>(\n  parameters: UseBalanceParameters<config, selectData> = {},\n): UseBalanceReturnType<selectData> {\n  const { address, query = {} } = parameters\n\n  const config = useConfig(parameters)\n  const chainId = useChainId({ config })\n\n  const options = getBalanceQueryOptions(config, {\n    ...parameters,\n    chainId: parameters.chainId ?? chainId,\n  })\n  const enabled = Boolean(address && (query.enabled ?? true))\n\n  return useQuery({ ...query, ...options, enabled })\n}\n"],"names":[],"mappings":";;;AAeA,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAD1C,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAA;AAV5C,OAAO,EAIL,sBAAsB,GACvB,MAAM,mBAAmB,CAAA;AAI1B,OAAO,EAA2B,QAAQ,EAAE,MAAM,mBAAmB,CAAA;AAbrE,YAAY,CAAA;;;;;AAmCN,SAAU,UAAU,CAIxB,aAAuD,CAAA,CAAE;IAEzD,MAAM,EAAE,OAAO,EAAE,KAAK,GAAG,CAAA,CAAE,EAAE,GAAG,UAAU,CAAA;IAE1C,MAAM,MAAM,qXAAG,YAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IACpC,MAAM,OAAO,sXAAG,aAAA,AAAU,EAAC;QAAE,MAAM;IAAA,CAAE,CAAC,CAAA;IAEtC,MAAM,OAAO,IAAG,kZAAA,AAAsB,EAAC,MAAM,EAAE;QAC7C,GAAG,UAAU;QACb,OAAO,EAAE,UAAU,CAAC,OAAO,IAAI,OAAO;KACvC,CAAC,CAAA;IACF,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC,CAAA;IAE3D,qYAAO,WAAA,AAAQ,EAAC;QAAE,GAAG,KAAK;QAAE,GAAG,OAAO;QAAE,OAAO;IAAA,CAAE,CAAC,CAAA;AACpD,CAAC","ignoreList":[0]}},
    {"offset": {"line": 739, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 745, "column": 0}, "map": {"version":3,"file":"useWatchBlockNumber.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useWatchBlockNumber.ts"],"sourcesContent":["'use client'\n\nimport {\n  type Config,\n  type ResolvedRegister,\n  type WatchBlockNumberParameters,\n  watchBlockNumber,\n} from '@wagmi/core'\nimport type { UnionCompute, UnionExactPartial } from '@wagmi/core/internal'\nimport { useEffect } from 'react'\n\nimport type { ConfigParameter, EnabledParameter } from '../types/properties.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseWatchBlockNumberParameters<\n  config extends Config = Config,\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n> = UnionCompute<\n  UnionExactPartial<WatchBlockNumberParameters<config, chainId>> &\n    ConfigParameter<config> &\n    EnabledParameter\n>\n\nexport type UseWatchBlockNumberReturnType = void\n\n/** https://wagmi.sh/react/api/hooks/useWatchBlockNumber */\nexport function useWatchBlockNumber<\n  config extends Config = ResolvedRegister['config'],\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n>(\n  parameters: UseWatchBlockNumberParameters<config, chainId> = {} as any,\n): UseWatchBlockNumberReturnType {\n  const { enabled = true, onBlockNumber, config: _, ...rest } = parameters\n\n  const config = useConfig(parameters)\n  const configChainId = useChainId({ config })\n  const chainId = parameters.chainId ?? configChainId\n\n  // TODO(react@19): cleanup\n  // biome-ignore lint/correctness/useExhaustiveDependencies: `rest` changes every render so only including properties in dependency array\n  useEffect(() => {\n    if (!enabled) return\n    if (!onBlockNumber) return\n    return watchBlockNumber(config, {\n      ...(rest as any),\n      chainId,\n      onBlockNumber,\n    })\n  }, [\n    chainId,\n    config,\n    enabled,\n    onBlockNumber,\n    ///\n    rest.onError,\n    rest.emitMissed,\n    rest.emitOnBegin,\n    rest.poll,\n    rest.pollingInterval,\n    rest.syncConnectedChain,\n  ])\n}\n"],"names":[],"mappings":";;;AASA,OAAO,EAAE,SAAS,EAAE,MAAM,OAAO,CAAA;AAIjC,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAD1C,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAA;AAV5C,OAAO,EAIL,gBAAgB,GACjB,MAAM,aAAa,CAAA;AAPpB,YAAY,CAAA;;;;;AA4BN,SAAU,mBAAmB,CAKjC,aAA6D,CAAA,CAAS;IAEtE,MAAM,EAAE,OAAO,GAAG,IAAI,EAAE,aAAa,EAAE,MAAM,EAAE,CAAC,EAAE,GAAG,IAAI,EAAE,GAAG,UAAU,CAAA;IAExE,MAAM,MAAM,IAAG,6XAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IACpC,MAAM,aAAa,sXAAG,aAAA,AAAU,EAAC;QAAE,MAAM;IAAA,CAAE,CAAC,CAAA;IAC5C,MAAM,OAAO,GAAG,UAAU,CAAC,OAAO,IAAI,aAAa,CAAA;IAEnD,0BAA0B;IAC1B,wIAAwI;KACxI,8UAAA,AAAS;yCAAC,GAAG,EAAE;YACb,IAAI,CAAC,OAAO,EAAE,OAAM;YACpB,IAAI,CAAC,aAAa,EAAE,OAAM;YAC1B,yYAAO,mBAAA,AAAgB,EAAC,MAAM,EAAE;gBAC9B,GAAI,IAAY;gBAChB,OAAO;gBACP,aAAa;aACd,CAAC,CAAA;QACJ,CAAC;wCAAE;QACD,OAAO;QACP,MAAM;QACN,OAAO;QACP,aAAa;QACb,GAAG;QACH,IAAI,CAAC,OAAO;QACZ,IAAI,CAAC,UAAU;QACf,IAAI,CAAC,WAAW;QAChB,IAAI,CAAC,IAAI;QACT,IAAI,CAAC,eAAe;QACpB,IAAI,CAAC,kBAAkB;KACxB,CAAC,CAAA;AACJ,CAAC","ignoreList":[0]}},
    {"offset": {"line": 790, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 796, "column": 0}, "map": {"version":3,"file":"useBlockNumber.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useBlockNumber.ts"],"sourcesContent":["'use client'\n\nimport { useQueryClient } from '@tanstack/react-query'\nimport type {\n  Config,\n  GetBlockNumberErrorType,\n  ResolvedRegister,\n} from '@wagmi/core'\nimport type {\n  Compute,\n  UnionCompute,\n  UnionStrictOmit,\n} from '@wagmi/core/internal'\nimport {\n  type GetBlockNumberData,\n  type GetBlockNumberOptions,\n  type GetBlockNumberQueryFnData,\n  type GetBlockNumberQueryKey,\n  getBlockNumberQueryOptions,\n} from '@wagmi/core/query'\n\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\nimport {\n  type UseWatchBlockNumberParameters,\n  useWatchBlockNumber,\n} from './useWatchBlockNumber.js'\n\nexport type UseBlockNumberParameters<\n  config extends Config = Config,\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n  selectData = GetBlockNumberData,\n> = Compute<\n  GetBlockNumberOptions<config, chainId> &\n    ConfigParameter<config> &\n    QueryParameter<\n      GetBlockNumberQueryFnData,\n      GetBlockNumberErrorType,\n      selectData,\n      GetBlockNumberQueryKey<config, chainId>\n    > & {\n      watch?:\n        | boolean\n        | UnionCompute<\n            UnionStrictOmit<\n              UseWatchBlockNumberParameters<config, chainId>,\n              'chainId' | 'config' | 'onBlockNumber' | 'onError'\n            >\n          >\n        | undefined\n    }\n>\n\nexport type UseBlockNumberReturnType<selectData = GetBlockNumberData> =\n  UseQueryReturnType<selectData, GetBlockNumberErrorType>\n\n/** https://wagmi.sh/react/api/hooks/useBlockNumber */\nexport function useBlockNumber<\n  config extends Config = ResolvedRegister['config'],\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n  selectData = GetBlockNumberData,\n>(\n  parameters: UseBlockNumberParameters<config, chainId, selectData> = {},\n): UseBlockNumberReturnType<selectData> {\n  const { query = {}, watch } = parameters\n\n  const config = useConfig(parameters)\n  const queryClient = useQueryClient()\n  const configChainId = useChainId({ config })\n  const chainId = parameters.chainId ?? configChainId\n\n  const options = getBlockNumberQueryOptions(config, {\n    ...parameters,\n    chainId,\n  })\n\n  useWatchBlockNumber({\n    ...({\n      config: parameters.config,\n      chainId: parameters.chainId,\n      ...(typeof watch === 'object' ? watch : {}),\n    } as UseWatchBlockNumberParameters),\n    enabled: Boolean(\n      (query.enabled ?? true) &&\n        (typeof watch === 'object' ? watch.enabled : watch),\n    ),\n    onBlockNumber(blockNumber) {\n      queryClient.setQueryData(options.queryKey, blockNumber)\n    },\n  })\n\n  return useQuery({ ...query, ...options })\n}\n"],"names":[],"mappings":";;;AAwBA,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAtB1C,OAAO,EAAE,cAAc,EAAE,MAAM,uBAAuB,CAAA;AAqBtD,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAA;AAV5C,OAAO,EAKL,0BAA0B,GAC3B,MAAM,mBAAmB,CAAA;AAM1B,OAAO,EAEL,mBAAmB,GACpB,MAAM,0BAA0B,CAAA;AANjC,OAAO,EAA2B,QAAQ,EAAE,MAAM,mBAAmB,CAAA;AAtBrE,YAAY,CAAA;;;;;;;AA4DN,SAAU,cAAc,CAM5B,aAAoE,CAAA,CAAE;IAEtE,MAAM,EAAE,KAAK,GAAG,CAAA,CAAE,EAAE,KAAK,EAAE,GAAG,UAAU,CAAA;IAExC,MAAM,MAAM,qXAAG,YAAS,AAAT,EAAU,UAAU,CAAC,CAAA;IACpC,MAAM,WAAW,iSAAG,iBAAA,AAAc,EAAE,CAAA;IACpC,MAAM,aAAa,IAAG,+XAAA,AAAU,EAAC;QAAE,MAAM;IAAA,CAAE,CAAC,CAAA;IAC5C,MAAM,OAAO,GAAG,UAAU,CAAC,OAAO,IAAI,aAAa,CAAA;IAEnD,MAAM,OAAO,IAAG,0ZAAA,AAA0B,EAAC,MAAM,EAAE;QACjD,GAAG,UAAU;QACb,OAAO;KACR,CAAC,CAAA;gYAEF,sBAAmB,AAAnB,EAAoB;QAClB,GAAI;YACF,MAAM,EAAE,UAAU,CAAC,MAAM;YACzB,OAAO,EAAE,UAAU,CAAC,OAAO;YAC3B,GAAG,AAAC,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA,CAAE,CAAC;SACV;QACnC,OAAO,EAAE,OAAO,CACd,CAAC,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,IACrB,CAAC,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CACtD;QACD,aAAa,EAAC,WAAW;YACvB,WAAW,CAAC,YAAY,CAAC,OAAO,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAA;QACzD,CAAC;KACF,CAAC,CAAA;IAEF,qYAAO,WAAA,AAAQ,EAAC;QAAE,GAAG,KAAK;QAAE,GAAG,OAAO;IAAA,CAAE,CAAC,CAAA;AAC3C,CAAC","ignoreList":[0]}},
    {"offset": {"line": 840, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 846, "column": 0}, "map": {"version":3,"file":"useWatchBlocks.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useWatchBlocks.ts"],"sourcesContent":["'use client'\n\nimport {\n  type Config,\n  type ResolvedRegister,\n  type WatchBlocksParameters,\n  watchBlocks,\n} from '@wagmi/core'\nimport type { UnionCompute, UnionExactPartial } from '@wagmi/core/internal'\nimport { useEffect } from 'react'\nimport type { BlockTag } from 'viem'\n\nimport type { ConfigParameter, EnabledParameter } from '../types/properties.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseWatchBlocksParameters<\n  includeTransactions extends boolean = false,\n  blockTag extends BlockTag = 'latest',\n  config extends Config = Config,\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n> = UnionCompute<\n  UnionExactPartial<\n    WatchBlocksParameters<includeTransactions, blockTag, config, chainId>\n  > &\n    ConfigParameter<config> &\n    EnabledParameter\n>\n\nexport type UseWatchBlocksReturnType = void\n\n/** https://wagmi.sh/react/hooks/useWatchBlocks */\nexport function useWatchBlocks<\n  config extends Config = ResolvedRegister['config'],\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n  includeTransactions extends boolean = false,\n  blockTag extends BlockTag = 'latest',\n>(\n  parameters: UseWatchBlocksParameters<\n    includeTransactions,\n    blockTag,\n    config,\n    chainId\n  > = {} as any,\n): UseWatchBlocksReturnType {\n  const { enabled = true, onBlock, config: _, ...rest } = parameters\n\n  const config = useConfig(parameters)\n  const configChainId = useChainId({ config })\n  const chainId = parameters.chainId ?? configChainId\n\n  // TODO(react@19): cleanup\n  // biome-ignore lint/correctness/useExhaustiveDependencies: `rest` changes every render so only including properties in dependency array\n  useEffect(() => {\n    if (!enabled) return\n    if (!onBlock) return\n    return watchBlocks(config, {\n      ...(rest as any),\n      chainId,\n      onBlock,\n    })\n  }, [\n    chainId,\n    config,\n    enabled,\n    onBlock,\n    ///\n    rest.blockTag,\n    rest.emitMissed,\n    rest.emitOnBegin,\n    rest.includeTransactions,\n    rest.onError,\n    rest.poll,\n    rest.pollingInterval,\n    rest.syncConnectedChain,\n  ])\n}\n"],"names":[],"mappings":";;;AASA,OAAO,EAAE,SAAS,EAAE,MAAM,OAAO,CAAA;AAKjC,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAD1C,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAA;AAX5C,OAAO,EAIL,WAAW,GACZ,MAAM,aAAa,CAAA;AAPpB,YAAY,CAAA;;;;;AAiCN,SAAU,cAAc,CAO5B,aAKI,CAAA,CAAS;IAEb,MAAM,EAAE,OAAO,GAAG,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC,EAAE,GAAG,IAAI,EAAE,GAAG,UAAU,CAAA;IAElE,MAAM,MAAM,qXAAG,YAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IACpC,MAAM,aAAa,IAAG,+XAAA,AAAU,EAAC;QAAE,MAAM;IAAA,CAAE,CAAC,CAAA;IAC5C,MAAM,OAAO,GAAG,UAAU,CAAC,OAAO,IAAI,aAAa,CAAA;IAEnD,0BAA0B;IAC1B,wIAAwI;uUACxI,YAAA,AAAS;oCAAC,GAAG,EAAE;YACb,IAAI,CAAC,OAAO,EAAE,OAAM;YACpB,IAAI,CAAC,OAAO,EAAE,OAAM;YACpB,oYAAO,cAAA,AAAW,EAAC,MAAM,EAAE;gBACzB,GAAI,IAAY;gBAChB,OAAO;gBACP,OAAO;aACR,CAAC,CAAA;QACJ,CAAC;mCAAE;QACD,OAAO;QACP,MAAM;QACN,OAAO;QACP,OAAO;QACP,GAAG;QACH,IAAI,CAAC,QAAQ;QACb,IAAI,CAAC,UAAU;QACf,IAAI,CAAC,WAAW;QAChB,IAAI,CAAC,mBAAmB;QACxB,IAAI,CAAC,OAAO;QACZ,IAAI,CAAC,IAAI;QACT,IAAI,CAAC,eAAe;QACpB,IAAI,CAAC,kBAAkB;KACxB,CAAC,CAAA;AACJ,CAAC","ignoreList":[0]}},
    {"offset": {"line": 893, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 899, "column": 0}, "map": {"version":3,"file":"useBlock.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useBlock.ts"],"sourcesContent":["'use client'\n\nimport { useQueryClient } from '@tanstack/react-query'\nimport type { Config, GetBlockErrorType, ResolvedRegister } from '@wagmi/core'\nimport type {\n  Compute,\n  UnionCompute,\n  UnionStrictOmit,\n} from '@wagmi/core/internal'\nimport {\n  type GetBlockData,\n  type GetBlockOptions,\n  type GetBlockQueryFnData,\n  type GetBlockQueryKey,\n  getBlockQueryOptions,\n} from '@wagmi/core/query'\nimport type { BlockTag } from 'viem'\n\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\nimport {\n  type UseWatchBlocksParameters,\n  useWatchBlocks,\n} from './useWatchBlocks.js'\n\nexport type UseBlockParameters<\n  includeTransactions extends boolean = false,\n  blockTag extends BlockTag = 'latest',\n  config extends Config = Config,\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n  selectData = GetBlockData<includeTransactions, blockTag, config, chainId>,\n> = Compute<\n  GetBlockOptions<includeTransactions, blockTag, config, chainId> &\n    ConfigParameter<config> &\n    QueryParameter<\n      GetBlockQueryFnData<includeTransactions, blockTag, config, chainId>,\n      GetBlockErrorType,\n      selectData,\n      GetBlockQueryKey<includeTransactions, blockTag, config, chainId>\n    > & {\n      watch?:\n        | boolean\n        | UnionCompute<\n            UnionStrictOmit<\n              UseWatchBlocksParameters<\n                includeTransactions,\n                blockTag,\n                config,\n                chainId\n              >,\n              'chainId' | 'config' | 'onBlock' | 'onError'\n            >\n          >\n        | undefined\n    }\n>\n\nexport type UseBlockReturnType<\n  includeTransactions extends boolean = false,\n  blockTag extends BlockTag = 'latest',\n  config extends Config = Config,\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n  selectData = GetBlockData<includeTransactions, blockTag, config, chainId>,\n> = UseQueryReturnType<selectData, GetBlockErrorType>\n\n/** https://wagmi.sh/react/hooks/useBlock */\nexport function useBlock<\n  includeTransactions extends boolean = false,\n  blockTag extends BlockTag = 'latest',\n  config extends Config = ResolvedRegister['config'],\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n  selectData = GetBlockData<includeTransactions, blockTag, config, chainId>,\n>(\n  parameters: UseBlockParameters<\n    includeTransactions,\n    blockTag,\n    config,\n    chainId,\n    selectData\n  > = {},\n): UseBlockReturnType<\n  includeTransactions,\n  blockTag,\n  config,\n  chainId,\n  selectData\n> {\n  const { query = {}, watch } = parameters\n\n  const config = useConfig(parameters)\n  const queryClient = useQueryClient()\n  const configChainId = useChainId({ config })\n  const chainId = parameters.chainId ?? configChainId\n\n  const options = getBlockQueryOptions(config, {\n    ...parameters,\n    chainId,\n  })\n  const enabled = Boolean(query.enabled ?? true)\n\n  useWatchBlocks({\n    ...({\n      config: parameters.config,\n      chainId: parameters.chainId!,\n      ...(typeof watch === 'object' ? watch : {}),\n    } as UseWatchBlocksParameters),\n    enabled: Boolean(\n      enabled && (typeof watch === 'object' ? watch.enabled : watch),\n    ),\n    onBlock(block) {\n      queryClient.setQueryData(options.queryKey, block)\n    },\n  })\n\n  return useQuery({\n    ...(query as any),\n    ...options,\n    enabled,\n  }) as UseBlockReturnType<\n    includeTransactions,\n    blockTag,\n    config,\n    chainId,\n    selectData\n  >\n}\n"],"names":[],"mappings":";;;AAqBA,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAnB1C,OAAO,EAAE,cAAc,EAAE,MAAM,uBAAuB,CAAA;AAkBtD,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAA;AAX5C,OAAO,EAKL,oBAAoB,GACrB,MAAM,mBAAmB,CAAA;AAO1B,OAAO,EAEL,cAAc,GACf,MAAM,qBAAqB,CAAA;AAN5B,OAAO,EAA2B,QAAQ,EAAE,MAAM,mBAAmB,CAAA;AAnBrE,YAAY,CAAA;;;;;;;AAsEN,SAAU,QAAQ,CAQtB,aAMI,CAAA,CAAE;IAQN,MAAM,EAAE,KAAK,GAAG,CAAA,CAAE,EAAE,KAAK,EAAE,GAAG,UAAU,CAAA;IAExC,MAAM,MAAM,qXAAG,YAAS,AAAT,EAAU,UAAU,CAAC,CAAA;IACpC,MAAM,WAAW,iSAAG,iBAAA,AAAc,EAAE,CAAA;IACpC,MAAM,aAAa,IAAG,+XAAA,AAAU,EAAC;QAAE,MAAM;IAAA,CAAE,CAAC,CAAA;IAC5C,MAAM,OAAO,GAAG,UAAU,CAAC,OAAO,IAAI,aAAa,CAAA;IAEnD,MAAM,OAAO,IAAG,8YAAA,AAAoB,EAAC,MAAM,EAAE;QAC3C,GAAG,UAAU;QACb,OAAO;KACR,CAAC,CAAA;IACF,MAAM,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,CAAA;IAE9C,wYAAA,AAAc,EAAC;QACb,GAAI;YACF,MAAM,EAAE,UAAU,CAAC,MAAM;YACzB,OAAO,EAAE,UAAU,CAAC,OAAQ;YAC5B,GAAI,AAAD,OAAQ,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA,CAAE,CAAC;SACf;QAC9B,OAAO,EAAE,OAAO,CACd,OAAO,IAAI,CAAC,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAC/D;QACD,OAAO,EAAC,KAAK;YACX,WAAW,CAAC,YAAY,CAAC,OAAO,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAA;QACnD,CAAC;KACF,CAAC,CAAA;IAEF,qYAAO,WAAA,AAAQ,EAAC;QACd,GAAI,KAAa;QACjB,GAAG,OAAO;QACV,OAAO;KACR,CAMA,CAAA;AACH,CAAC","ignoreList":[0]}},
    {"offset": {"line": 945, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 951, "column": 0}, "map": {"version":3,"file":"useBlockTransactionCount.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useBlockTransactionCount.ts"],"sourcesContent":["'use client'\n\nimport type {\n  Config,\n  GetBlockTransactionCountErrorType,\n  ResolvedRegister,\n} from '@wagmi/core'\nimport type { UnionCompute } from '@wagmi/core/internal'\nimport {\n  type GetBlockTransactionCountData,\n  type GetBlockTransactionCountOptions,\n  type GetBlockTransactionCountQueryFnData,\n  type GetBlockTransactionCountQueryKey,\n  getBlockTransactionCountQueryOptions,\n} from '@wagmi/core/query'\n\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseBlockTransactionCountParameters<\n  config extends Config = Config,\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n  selectData = GetBlockTransactionCountData,\n> = UnionCompute<\n  GetBlockTransactionCountOptions<config, chainId> &\n    ConfigParameter<config> &\n    QueryParameter<\n      GetBlockTransactionCountQueryFnData,\n      GetBlockTransactionCountErrorType,\n      selectData,\n      GetBlockTransactionCountQueryKey<config, chainId>\n    >\n>\n\nexport type UseBlockTransactionCountReturnType<\n  selectData = GetBlockTransactionCountData,\n> = UseQueryReturnType<selectData, GetBlockTransactionCountErrorType>\n\n/** https://wagmi.sh/react/api/hooks/useBlockTransactionCount */\nexport function useBlockTransactionCount<\n  config extends Config = ResolvedRegister['config'],\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n  selectData = GetBlockTransactionCountData,\n>(\n  parameters: UseBlockTransactionCountParameters<\n    config,\n    chainId,\n    selectData\n  > = {},\n): UseBlockTransactionCountReturnType<selectData> {\n  const { query = {} } = parameters\n\n  const config = useConfig(parameters)\n  const configChainId = useChainId({ config })\n  const chainId = parameters.chainId ?? configChainId\n\n  const options = getBlockTransactionCountQueryOptions(config, {\n    ...parameters,\n    chainId,\n  })\n\n  return useQuery({ ...query, ...options })\n}\n"],"names":[],"mappings":";;;AAmBA,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAD1C,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAA;AAV5C,OAAO,EAKL,oCAAoC,GACrC,MAAM,mBAAmB,CAAA;AAG1B,OAAO,EAA2B,QAAQ,EAAE,MAAM,mBAAmB,CAAA;AAjBrE,YAAY,CAAA;;;;;AA0CN,SAAU,wBAAwB,CAMtC,aAII,CAAA,CAAE;IAEN,MAAM,EAAE,KAAK,GAAG,CAAA,CAAE,EAAE,GAAG,UAAU,CAAA;IAEjC,MAAM,MAAM,IAAG,6XAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IACpC,MAAM,aAAa,sXAAG,aAAA,AAAU,EAAC;QAAE,MAAM;IAAA,CAAE,CAAC,CAAA;IAC5C,MAAM,OAAO,GAAG,UAAU,CAAC,OAAO,IAAI,aAAa,CAAA;IAEnD,MAAM,OAAO,2YAAG,uCAAA,AAAoC,EAAC,MAAM,EAAE;QAC3D,GAAG,UAAU;QACb,OAAO;KACR,CAAC,CAAA;IAEF,qYAAO,WAAA,AAAQ,EAAC;QAAE,GAAG,KAAK;QAAE,GAAG,OAAO;IAAA,CAAE,CAAC,CAAA;AAC3C,CAAC","ignoreList":[0]}},
    {"offset": {"line": 979, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 985, "column": 0}, "map": {"version":3,"file":"useBytecode.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useBytecode.ts"],"sourcesContent":["'use client'\n\nimport type {\n  Config,\n  GetBytecodeErrorType,\n  ResolvedRegister,\n} from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport {\n  type GetBytecodeData,\n  type GetBytecodeOptions,\n  type GetBytecodeQueryKey,\n  getBytecodeQueryOptions,\n} from '@wagmi/core/query'\nimport type { GetBytecodeQueryFnData } from '@wagmi/core/query'\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseBytecodeParameters<\n  config extends Config = Config,\n  selectData = GetBytecodeData,\n> = Compute<\n  GetBytecodeOptions<config> &\n    ConfigParameter<config> &\n    QueryParameter<\n      GetBytecodeQueryFnData,\n      GetBytecodeErrorType,\n      selectData,\n      GetBytecodeQueryKey<config>\n    >\n>\n\nexport type UseBytecodeReturnType<selectData = GetBytecodeData> =\n  UseQueryReturnType<selectData, GetBytecodeErrorType>\n\n/** https://wagmi.sh/react/api/hooks/useBytecode */\nexport function useBytecode<\n  config extends Config = ResolvedRegister['config'],\n  selectData = GetBytecodeData,\n>(\n  parameters: UseBytecodeParameters<config, selectData> = {},\n): UseBytecodeReturnType<selectData> {\n  const { address, query = {} } = parameters\n\n  const config = useConfig(parameters)\n  const chainId = useChainId({ config })\n\n  const options = getBytecodeQueryOptions(config, {\n    ...parameters,\n    chainId: parameters.chainId ?? chainId,\n  })\n  const enabled = Boolean(address && (query.enabled ?? true))\n\n  return useQuery({ ...query, ...options, enabled })\n}\n"],"names":[],"mappings":";;;AAkBA,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAD1C,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAA;AAT5C,OAAO,EAIL,uBAAuB,GACxB,MAAM,mBAAmB,CAAA;AAG1B,OAAO,EAA2B,QAAQ,EAAE,MAAM,mBAAmB,CAAA;AAhBrE,YAAY,CAAA;;;;;AAsCN,SAAU,WAAW,CAIzB,aAAwD,CAAA,CAAE;IAE1D,MAAM,EAAE,OAAO,EAAE,KAAK,GAAG,CAAA,CAAE,EAAE,GAAG,UAAU,CAAA;IAE1C,MAAM,MAAM,qXAAG,YAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IACpC,MAAM,OAAO,sXAAG,aAAA,AAAU,EAAC;QAAE,MAAM;IAAA,CAAE,CAAC,CAAA;IAEtC,MAAM,OAAO,IAAG,oZAAA,AAAuB,EAAC,MAAM,EAAE;QAC9C,GAAG,UAAU;QACb,OAAO,EAAE,UAAU,CAAC,OAAO,IAAI,OAAO;KACvC,CAAC,CAAA;IACF,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC,CAAA;IAE3D,qYAAO,WAAA,AAAQ,EAAC;QAAE,GAAG,KAAK;QAAE,GAAG,OAAO;QAAE,OAAO;IAAA,CAAE,CAAC,CAAA;AACpD,CAAC","ignoreList":[0]}},
    {"offset": {"line": 1014, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1020, "column": 0}, "map": {"version":3,"file":"useCall.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useCall.ts"],"sourcesContent":["'use client'\n\nimport type { CallErrorType, Config, ResolvedRegister } from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport {\n  type CallData,\n  type CallOptions,\n  type CallQueryKey,\n  callQueryOptions,\n} from '@wagmi/core/query'\nimport type { CallQueryFnData } from '@wagmi/core/query'\n\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseCallParameters<\n  config extends Config = Config,\n  selectData = CallData,\n> = Compute<\n  CallOptions<config> &\n    ConfigParameter<config> &\n    QueryParameter<\n      CallQueryFnData,\n      CallErrorType,\n      selectData,\n      CallQueryKey<config>\n    >\n>\n\nexport type UseCallReturnType<selectData = CallData> = UseQueryReturnType<\n  selectData,\n  CallErrorType\n>\n\n/** https://wagmi.sh/react/api/hooks/useCall */\nexport function useCall<\n  config extends Config = ResolvedRegister['config'],\n  selectData = CallData,\n>(\n  parameters: UseCallParameters<config, selectData> = {},\n): UseCallReturnType<selectData> {\n  const { query = {} } = parameters\n\n  const config = useConfig(parameters)\n  const chainId = useChainId({ config })\n\n  const options = callQueryOptions(config, {\n    ...parameters,\n    chainId: parameters.chainId ?? chainId,\n  })\n\n  return useQuery({ ...query, ...options })\n}\n"],"names":[],"mappings":";;;AAeA,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAD1C,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAA;AAV5C,OAAO,EAIL,gBAAgB,GACjB,MAAM,mBAAmB,CAAA;AAI1B,OAAO,EAA2B,QAAQ,EAAE,MAAM,mBAAmB,CAAA;AAbrE,YAAY,CAAA;;;;;AAqCN,SAAU,OAAO,CAIrB,aAAoD,CAAA,CAAE;IAEtD,MAAM,EAAE,KAAK,GAAG,CAAA,CAAE,EAAE,GAAG,UAAU,CAAA;IAEjC,MAAM,MAAM,IAAG,6XAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IACpC,MAAM,OAAO,sXAAG,aAAA,AAAU,EAAC;QAAE,MAAM;IAAA,CAAE,CAAC,CAAA;IAEtC,MAAM,OAAO,IAAG,sYAAA,AAAgB,EAAC,MAAM,EAAE;QACvC,GAAG,UAAU;QACb,OAAO,EAAE,UAAU,CAAC,OAAO,IAAI,OAAO;KACvC,CAAC,CAAA;IAEF,qYAAO,WAAA,AAAQ,EAAC;QAAE,GAAG,KAAK;QAAE,GAAG,OAAO;IAAA,CAAE,CAAC,CAAA;AAC3C,CAAC","ignoreList":[0]}},
    {"offset": {"line": 1047, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1053, "column": 0}, "map": {"version":3,"file":"useClient.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useClient.ts"],"sourcesContent":["'use client'\n\nimport {\n  type Config,\n  type GetClientParameters,\n  type GetClientReturnType,\n  type ResolvedRegister,\n  getClient,\n  watchClient,\n} from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport { useSyncExternalStoreWithSelector } from 'use-sync-external-store/shim/with-selector.js'\n\nimport type { ConfigParameter } from '../types/properties.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseClientParameters<\n  config extends Config = Config,\n  chainId extends config['chains'][number]['id'] | number | undefined =\n    | config['chains'][number]['id']\n    | undefined,\n> = Compute<GetClientParameters<config, chainId> & ConfigParameter<config>>\n\nexport type UseClientReturnType<\n  config extends Config = Config,\n  chainId extends config['chains'][number]['id'] | number | undefined =\n    | config['chains'][number]['id']\n    | undefined,\n> = GetClientReturnType<config, chainId>\n\n/** https://wagmi.sh/react/api/hooks/useClient */\nexport function useClient<\n  config extends Config = ResolvedRegister['config'],\n  chainId extends config['chains'][number]['id'] | number | undefined =\n    | config['chains'][number]['id']\n    | undefined,\n>(\n  parameters: UseClientParameters<config, chainId> = {},\n): UseClientReturnType<config, chainId> {\n  const config = useConfig(parameters)\n\n  return useSyncExternalStoreWithSelector(\n    (onChange) => watchClient(config, { onChange }),\n    () => getClient(config, parameters),\n    () => getClient(config, parameters),\n    (x) => x,\n    (a, b) => a?.uid === b?.uid,\n  ) as any\n}\n"],"names":[],"mappings":";;;AAWA,OAAO,EAAE,gCAAgC,EAAE,MAAM,+CAA+C,CAAA;AAGhG,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;;AAZ1C,OAAO,EAKL,SAAS,EACT,WAAW,GACZ,MAAM,aAAa,CAAA;AATpB,YAAY,CAAA;;;;AA+BN,SAAU,SAAS,CAMvB,aAAmD,CAAA,CAAE;IAErD,MAAM,MAAM,qXAAG,YAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IAEpC,OAAO,0TAAA,AAAgC;sDACrC,CAAC,QAAQ,EAAE,EAAE,4XAAC,cAAA,AAAW,EAAC,MAAM,EAAE;gBAAE,QAAQ;YAAA,CAAE,CAAC;;sDAC/C,GAAG,EAAE,0XAAC,YAAA,AAAS,EAAC,MAAM,EAAE,UAAU,CAAC;;sDACnC,GAAG,CAAG,CAAD,sYAAC,AAAS,EAAC,MAAM,EAAE,UAAU,CAAC;;sDACnC,CAAC,CAAC,EAAE,CAAG,CAAD,AAAE;;sDACR,CAAC,CAAC,EAAE,CAAC,EAAE,CAAG,CAAD,AAAE,EAAE,GAAG,KAAK,CAAC,EAAE,GAAG,CACrB,CAAA;;AACV,CAAC","ignoreList":[0]}},
    {"offset": {"line": 1080, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1086, "column": 0}, "map": {"version":3,"file":"useConnectorClient.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useConnectorClient.ts"],"sourcesContent":["'use client'\n\nimport { useQueryClient } from '@tanstack/react-query'\nimport type {\n  Config,\n  GetConnectorClientErrorType,\n  ResolvedRegister,\n} from '@wagmi/core'\nimport type { Compute, Omit } from '@wagmi/core/internal'\nimport {\n  type GetConnectorClientData,\n  type GetConnectorClientOptions,\n  type GetConnectorClientQueryFnData,\n  type GetConnectorClientQueryKey,\n  getConnectorClientQueryOptions,\n} from '@wagmi/core/query'\nimport { useEffect, useRef } from 'react'\n\nimport type { ConfigParameter } from '../types/properties.js'\nimport {\n  type UseQueryParameters,\n  type UseQueryReturnType,\n  useQuery,\n} from '../utils/query.js'\nimport { useAccount } from './useAccount.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseConnectorClientParameters<\n  config extends Config = Config,\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n  selectData = GetConnectorClientData<config, chainId>,\n> = Compute<\n  GetConnectorClientOptions<config, chainId> &\n    ConfigParameter<config> & {\n      query?:\n        | Compute<\n            Omit<\n              UseQueryParameters<\n                GetConnectorClientQueryFnData<config, chainId>,\n                GetConnectorClientErrorType,\n                selectData,\n                GetConnectorClientQueryKey<config, chainId>\n              >,\n              'gcTime' | 'staleTime'\n            >\n          >\n        | undefined\n    }\n>\n\nexport type UseConnectorClientReturnType<\n  config extends Config = Config,\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n  selectData = GetConnectorClientData<config, chainId>,\n> = UseQueryReturnType<selectData, GetConnectorClientErrorType>\n\n/** https://wagmi.sh/react/api/hooks/useConnectorClient */\nexport function useConnectorClient<\n  config extends Config = ResolvedRegister['config'],\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n  selectData = GetConnectorClientData<config, chainId>,\n>(\n  parameters: UseConnectorClientParameters<config, chainId, selectData> = {},\n): UseConnectorClientReturnType<config, chainId, selectData> {\n  const { query = {}, ...rest } = parameters\n\n  const config = useConfig(rest)\n  const queryClient = useQueryClient()\n  const { address, connector, status } = useAccount({ config })\n  const chainId = useChainId({ config })\n  const activeConnector = parameters.connector ?? connector\n\n  const { queryKey, ...options } = getConnectorClientQueryOptions<\n    config,\n    chainId\n  >(config, {\n    ...parameters,\n    chainId: parameters.chainId ?? chainId,\n    connector: activeConnector,\n  })\n  const enabled = Boolean(\n    (status === 'connected' ||\n      (status === 'reconnecting' && activeConnector?.getProvider)) &&\n      (query.enabled ?? true),\n  )\n\n  const addressRef = useRef(address)\n  // biome-ignore lint/correctness/useExhaustiveDependencies: `queryKey` not required\n  useEffect(() => {\n    const previousAddress = addressRef.current\n    if (!address && previousAddress) {\n      // remove when account is disconnected\n      queryClient.removeQueries({ queryKey })\n      addressRef.current = undefined\n    } else if (address !== previousAddress) {\n      // invalidate when address changes\n      queryClient.invalidateQueries({ queryKey })\n      addressRef.current = address\n    }\n  }, [address, queryClient])\n\n  return useQuery({\n    ...query,\n    ...options,\n    queryKey,\n    enabled,\n    staleTime: Number.POSITIVE_INFINITY,\n  })\n}\n"],"names":[],"mappings":";;;AAgBA,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,OAAO,CAAA;AAUzC,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAxB1C,OAAO,EAAE,cAAc,EAAE,MAAM,uBAAuB,CAAA;AAsBtD,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAA;AAC5C,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAA;AAhB5C,OAAO,EAKL,8BAA8B,GAC/B,MAAM,mBAAmB,CAAA;AAI1B,OAAO,EAGL,QAAQ,GACT,MAAM,mBAAmB,CAAA;AAvB1B,YAAY,CAAA;;;;;;;;AA4DN,SAAU,kBAAkB,CAMhC,aAAwE,CAAA,CAAE;IAE1E,MAAM,EAAE,KAAK,GAAG,CAAA,CAAE,EAAE,GAAG,IAAI,EAAE,GAAG,UAAU,CAAA;IAE1C,MAAM,MAAM,OAAG,0XAAA,AAAS,EAAC,IAAI,CAAC,CAAA;IAC9B,MAAM,WAAW,iSAAG,iBAAc,AAAd,EAAgB,CAAA;IACpC,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,sXAAG,aAAA,AAAU,EAAC;QAAE,MAAM;IAAA,CAAE,CAAC,CAAA;IAC7D,MAAM,OAAO,sXAAG,aAAA,AAAU,EAAC;QAAE,MAAM;IAAA,CAAE,CAAC,CAAA;IACtC,MAAM,eAAe,GAAG,UAAU,CAAC,SAAS,IAAI,SAAS,CAAA;IAEzD,MAAM,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,IAAG,kaAAA,AAA8B,EAG7D,MAAM,EAAE;QACR,GAAG,UAAU;QACb,OAAO,EAAE,UAAU,CAAC,OAAO,IAAI,OAAO;QACtC,SAAS,EAAE,eAAe;KAC3B,CAAC,CAAA;IACF,MAAM,OAAO,GAAG,OAAO,CACrB,CAAC,MAAM,KAAK,WAAW,IACpB,MAAM,KAAK,cAAc,IAAI,eAAe,EAAE,WAAW,AAAC,CAAC,IAC5D,CAAC,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,CAC1B,CAAA;IAED,MAAM,UAAU,sUAAG,SAAA,AAAM,EAAC,OAAO,CAAC,CAAA;IAClC,mFAAmF;uUACnF,YAAA,AAAS;wCAAC,GAAG,EAAE;YACb,MAAM,eAAe,GAAG,UAAU,CAAC,OAAO,CAAA;YAC1C,IAAI,CAAC,OAAO,IAAI,eAAe,EAAE,CAAC;gBAChC,sCAAsC;gBACtC,WAAW,CAAC,aAAa,CAAC;oBAAE,QAAQ;gBAAA,CAAE,CAAC,CAAA;gBACvC,UAAU,CAAC,OAAO,GAAG,SAAS,CAAA;YAChC,CAAC,MAAM,IAAI,OAAO,KAAK,eAAe,EAAE,CAAC;gBACvC,kCAAkC;gBAClC,WAAW,CAAC,iBAAiB,CAAC;oBAAE,QAAQ;gBAAA,CAAE,CAAC,CAAA;gBAC3C,UAAU,CAAC,OAAO,GAAG,OAAO,CAAA;YAC9B,CAAC;QACH,CAAC;uCAAE;QAAC,OAAO;QAAE,WAAW;KAAC,CAAC,CAAA;IAE1B,qYAAO,WAAA,AAAQ,EAAC;QACd,GAAG,KAAK;QACR,GAAG,OAAO;QACV,QAAQ;QACR,OAAO;QACP,SAAS,EAAE,MAAM,CAAC,iBAAiB;KACpC,CAAC,CAAA;AACJ,CAAC","ignoreList":[0]}},
    {"offset": {"line": 1152, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1158, "column": 0}, "map": {"version":3,"file":"useInfiniteReadContracts.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useInfiniteReadContracts.ts"],"sourcesContent":["'use client'\n\nimport type {\n  Config,\n  ReadContractsErrorType,\n  ResolvedRegister,\n} from '@wagmi/core'\nimport {\n  type InfiniteReadContractsQueryFnData,\n  type InfiniteReadContractsQueryKey,\n  infiniteReadContractsQueryOptions,\n  structuralSharing,\n} from '@wagmi/core/query'\nimport type { ContractFunctionParameters } from 'viem'\n\nimport type {\n  InfiniteReadContractsData,\n  InfiniteReadContractsOptions,\n} from '../exports/query.js'\nimport type {\n  ConfigParameter,\n  InfiniteQueryParameter,\n} from '../types/properties.js'\nimport {\n  type UseInfiniteQueryParameters,\n  type UseInfiniteQueryReturnType,\n  useInfiniteQuery,\n} from '../utils/query.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseInfiniteContractReadsParameters<\n  contracts extends readonly unknown[] = readonly ContractFunctionParameters[],\n  allowFailure extends boolean = true,\n  config extends Config = Config,\n  pageParam = unknown,\n  selectData = InfiniteReadContractsData<contracts, allowFailure>,\n> = InfiniteReadContractsOptions<contracts, allowFailure, pageParam, config> &\n  ConfigParameter<config> &\n  InfiniteQueryParameter<\n    InfiniteReadContractsQueryFnData<contracts, allowFailure>,\n    ReadContractsErrorType,\n    selectData,\n    InfiniteReadContractsData<contracts, allowFailure>,\n    InfiniteReadContractsQueryKey<contracts, allowFailure, pageParam, config>,\n    pageParam\n  >\n\nexport type UseInfiniteContractReadsReturnType<\n  contracts extends readonly unknown[] = readonly ContractFunctionParameters[],\n  allowFailure extends boolean = true,\n  selectData = InfiniteReadContractsData<contracts, allowFailure>,\n> = UseInfiniteQueryReturnType<selectData, ReadContractsErrorType>\n\n/** https://wagmi.sh/react/api/hooks/useInfiniteReadContracts */\nexport function useInfiniteReadContracts<\n  const contracts extends readonly unknown[],\n  allowFailure extends boolean = true,\n  config extends Config = ResolvedRegister['config'],\n  pageParam = unknown,\n  selectData = InfiniteReadContractsData<contracts, allowFailure>,\n>(\n  parameters: UseInfiniteContractReadsParameters<\n    contracts,\n    allowFailure,\n    config,\n    pageParam,\n    selectData\n  >,\n): UseInfiniteContractReadsReturnType<contracts, allowFailure, selectData> {\n  const { contracts = [], query } = parameters\n\n  const config = useConfig(parameters)\n  const chainId = useChainId({ config })\n\n  const options = infiniteReadContractsQueryOptions(config, {\n    ...parameters,\n    chainId,\n    contracts: contracts as UseInfiniteContractReadsParameters['contracts'],\n    query: query as UseInfiniteQueryParameters,\n  })\n\n  return useInfiniteQuery({\n    ...(query as any),\n    ...options,\n    initialPageParam: options.initialPageParam,\n    structuralSharing: query.structuralSharing ?? structuralSharing,\n  })\n}\n"],"names":[],"mappings":";;;AA6BA,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAD1C,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAA;;AAL5C,OAAO,EAGL,gBAAgB,GACjB,MAAM,mBAAmB,CAAA;AApB1B,OAAO,EAGL,iCAAiC,EACjC,iBAAiB,GAClB,MAAM,mBAAmB,CAAA;AAZ1B,YAAY,CAAA;;;;;AAuDN,SAAU,wBAAwB,CAOtC,UAMC;IAED,MAAM,EAAE,SAAS,GAAG,EAAE,EAAE,KAAK,EAAE,GAAG,UAAU,CAAA;IAE5C,MAAM,MAAM,IAAG,6XAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IACpC,MAAM,OAAO,sXAAG,aAAA,AAAU,EAAC;QAAE,MAAM;IAAA,CAAE,CAAC,CAAA;IAEtC,MAAM,OAAO,wYAAG,oCAAA,AAAiC,EAAC,MAAM,EAAE;QACxD,GAAG,UAAU;QACb,OAAO;QACP,SAAS,EAAE,SAA4D;QACvE,KAAK,EAAE,KAAmC;KAC3C,CAAC,CAAA;IAEF,qYAAO,mBAAA,AAAgB,EAAC;QACtB,GAAI,KAAa;QACjB,GAAG,OAAO;QACV,gBAAgB,EAAE,OAAO,CAAC,gBAAgB;QAC1C,iBAAiB,EAAE,KAAK,CAAC,iBAAiB,qXAAI,oBAAiB;KAChE,CAAC,CAAA;AACJ,CAAC","ignoreList":[0]}},
    {"offset": {"line": 1190, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1196, "column": 0}, "map": {"version":3,"file":"useReadContract.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useReadContract.ts"],"sourcesContent":["'use client'\n\nimport type {\n  Config,\n  ReadContractErrorType,\n  ResolvedRegister,\n} from '@wagmi/core'\nimport type { UnionCompute } from '@wagmi/core/internal'\nimport {\n  type ReadContractData,\n  type ReadContractOptions,\n  type ReadContractQueryFnData,\n  type ReadContractQueryKey,\n  readContractQueryOptions,\n  structuralSharing,\n} from '@wagmi/core/query'\nimport type { Abi, ContractFunctionArgs, ContractFunctionName, Hex } from 'viem'\n\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseReadContractParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  functionName extends ContractFunctionName<\n    abi,\n    'pure' | 'view'\n  > = ContractFunctionName<abi, 'pure' | 'view'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'pure' | 'view',\n    functionName\n  > = ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\n  config extends Config = Config,\n  selectData = ReadContractData<abi, functionName, args>,\n> = UnionCompute<\n  ReadContractOptions<abi, functionName, args, config> &\n    ConfigParameter<config> &\n    QueryParameter<\n      ReadContractQueryFnData<abi, functionName, args>,\n      ReadContractErrorType,\n      selectData,\n      ReadContractQueryKey<abi, functionName, args, config>\n    >\n>\n\nexport type UseReadContractReturnType<\n  abi extends Abi | readonly unknown[] = Abi,\n  functionName extends ContractFunctionName<\n    abi,\n    'pure' | 'view'\n  > = ContractFunctionName<abi, 'pure' | 'view'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'pure' | 'view',\n    functionName\n  > = ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\n  selectData = ReadContractData<abi, functionName, args>,\n> = UseQueryReturnType<selectData, ReadContractErrorType>\n\n/** https://wagmi.sh/react/api/hooks/useReadContract */\nexport function useReadContract<\n  const abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'pure' | 'view'>,\n  args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\n  config extends Config = ResolvedRegister['config'],\n  selectData = ReadContractData<abi, functionName, args>,\n>(\n  parameters: UseReadContractParameters<\n    abi,\n    functionName,\n    args,\n    config,\n    selectData\n  > = {} as any,\n): UseReadContractReturnType<abi, functionName, args, selectData> {\n  const { abi, address, functionName, query = {} } = parameters\n  // @ts-ignore\n  const code = parameters.code as Hex | undefined\n\n  const config = useConfig(parameters)\n  const chainId = useChainId({ config })\n\n  const options = readContractQueryOptions<config, abi, functionName, args>(\n    config,\n    { ...(parameters as any), chainId: parameters.chainId ?? chainId },\n  )\n  const enabled = Boolean(\n    (address || code) && abi && functionName && (query.enabled ?? true),\n  )\n\n  return useQuery({\n    ...query,\n    ...options,\n    enabled,\n    structuralSharing: query.structuralSharing ?? structuralSharing,\n  })\n}\n"],"names":[],"mappings":";;;AAqBA,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAD1C,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAA;;AAD5C,OAAO,EAA2B,QAAQ,EAAE,MAAM,mBAAmB,CAAA;AAXrE,OAAO,EAKL,wBAAwB,EACxB,iBAAiB,GAClB,MAAM,mBAAmB,CAAA;AAf1B,YAAY,CAAA;;;;;AA8DN,SAAU,eAAe,CAO7B,aAMI,CAAA,CAAS;IAEb,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,YAAY,EAAE,KAAK,GAAG,CAAA,CAAE,EAAE,GAAG,UAAU,CAAA;IAC7D,aAAa;IACb,MAAM,IAAI,GAAG,UAAU,CAAC,IAAuB,CAAA;IAE/C,MAAM,MAAM,qXAAG,YAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IACpC,MAAM,OAAO,sXAAG,aAAA,AAAU,EAAC;QAAE,MAAM;IAAA,CAAE,CAAC,CAAA;IAEtC,MAAM,OAAO,IAAG,sZAAA,AAAwB,EACtC,MAAM,EACN;QAAE,GAAI,UAAkB;QAAE,OAAO,EAAE,UAAU,CAAC,OAAO,IAAI,OAAO;IAAA,CAAE,CACnE,CAAA;IACD,MAAM,OAAO,GAAG,OAAO,CACrB,CAAC,OAAO,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,YAAY,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,CACpE,CAAA;IAED,qYAAO,WAAA,AAAQ,EAAC;QACd,GAAG,KAAK;QACR,GAAG,OAAO;QACV,OAAO;QACP,iBAAiB,EAAE,KAAK,CAAC,iBAAiB,qXAAI,oBAAiB;KAChE,CAAC,CAAA;AACJ,CAAC","ignoreList":[0]}},
    {"offset": {"line": 1229, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1235, "column": 0}, "map": {"version":3,"file":"useReadContracts.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useReadContracts.ts"],"sourcesContent":["'use client'\n\nimport type {\n  Config,\n  ReadContractsErrorType,\n  ResolvedRegister,\n} from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport {\n  type ReadContractsData,\n  type ReadContractsOptions,\n  type ReadContractsQueryFnData,\n  type ReadContractsQueryKey,\n  readContractsQueryOptions,\n  structuralSharing,\n} from '@wagmi/core/query'\nimport { useMemo } from 'react'\nimport type { ContractFunctionParameters } from 'viem'\n\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseReadContractsParameters<\n  contracts extends readonly unknown[] = readonly ContractFunctionParameters[],\n  allowFailure extends boolean = true,\n  config extends Config = Config,\n  selectData = ReadContractsData<contracts, allowFailure>,\n> = Compute<\n  ReadContractsOptions<contracts, allowFailure, config> &\n    ConfigParameter<config> &\n    QueryParameter<\n      ReadContractsQueryFnData<contracts, allowFailure>,\n      ReadContractsErrorType,\n      selectData,\n      ReadContractsQueryKey<contracts, allowFailure, config>\n    >\n>\n\nexport type UseReadContractsReturnType<\n  contracts extends readonly unknown[] = readonly ContractFunctionParameters[],\n  allowFailure extends boolean = true,\n  selectData = ReadContractsData<contracts, allowFailure>,\n> = UseQueryReturnType<selectData, ReadContractsErrorType>\n\n/** https://wagmi.sh/react/api/hooks/useReadContracts */\nexport function useReadContracts<\n  const contracts extends readonly unknown[],\n  allowFailure extends boolean = true,\n  config extends Config = ResolvedRegister['config'],\n  selectData = ReadContractsData<contracts, allowFailure>,\n>(\n  parameters: UseReadContractsParameters<\n    contracts,\n    allowFailure,\n    config,\n    selectData\n  > = {},\n): UseReadContractsReturnType<contracts, allowFailure, selectData> {\n  const { contracts = [], query = {} } = parameters\n\n  const config = useConfig(parameters)\n  const chainId = useChainId({ config })\n\n  const options = readContractsQueryOptions<config, contracts, allowFailure>(\n    config,\n    { ...parameters, chainId },\n  )\n\n  const enabled = useMemo(() => {\n    let isContractsValid = false\n    for (const contract of contracts) {\n      const { abi, address, functionName } =\n        contract as ContractFunctionParameters\n      if (!abi || !address || !functionName) {\n        isContractsValid = false\n        break\n      }\n      isContractsValid = true\n    }\n    return Boolean(isContractsValid && (query.enabled ?? true))\n  }, [contracts, query.enabled])\n\n  return useQuery({\n    ...options,\n    ...query,\n    enabled,\n    structuralSharing: query.structuralSharing ?? structuralSharing,\n  })\n}\n"],"names":[],"mappings":";;;AAgBA,OAAO,EAAE,OAAO,EAAE,MAAM,OAAO,CAAA;AAM/B,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAD1C,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAA;;AAD5C,OAAO,EAA2B,QAAQ,EAAE,MAAM,mBAAmB,CAAA;AAZrE,OAAO,EAKL,yBAAyB,EACzB,iBAAiB,GAClB,MAAM,mBAAmB,CAAA;AAf1B,YAAY,CAAA;;;;;;AA+CN,SAAU,gBAAgB,CAM9B,aAKI,CAAA,CAAE;IAEN,MAAM,EAAE,SAAS,GAAG,EAAE,EAAE,KAAK,GAAG,CAAA,CAAE,EAAE,GAAG,UAAU,CAAA;IAEjD,MAAM,MAAM,qXAAG,YAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IACpC,MAAM,OAAO,sXAAG,aAAA,AAAU,EAAC;QAAE,MAAM;IAAA,CAAE,CAAC,CAAA;IAEtC,MAAM,OAAO,gYAAG,4BAAyB,AAAzB,EACd,MAAM,EACN;QAAE,GAAG,UAAU;QAAE,OAAO;IAAA,CAAE,CAC3B,CAAA;IAED,MAAM,OAAO,GAAG,6UAAA,AAAO;6CAAC,GAAG,EAAE;YAC3B,IAAI,gBAAgB,GAAG,KAAK,CAAA;YAC5B,KAAK,MAAM,QAAQ,IAAI,SAAS,CAAE,CAAC;gBACjC,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,YAAY,EAAE,GAClC,QAAsC,CAAA;gBACxC,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,IAAI,CAAC,YAAY,EAAE,CAAC;oBACtC,gBAAgB,GAAG,KAAK,CAAA;oBACxB,MAAK;gBACP,CAAC;gBACD,gBAAgB,GAAG,IAAI,CAAA;YACzB,CAAC;YACD,OAAO,OAAO,CAAC,gBAAgB,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC,CAAA;QAC7D,CAAC;4CAAE;QAAC,SAAS;QAAE,KAAK,CAAC,OAAO;KAAC,CAAC,CAAA;IAE9B,qYAAO,WAAA,AAAQ,EAAC;QACd,GAAG,OAAO;QACV,GAAG,KAAK;QACR,OAAO;QACP,iBAAiB,EAAE,KAAK,CAAC,iBAAiB,qXAAI,oBAAiB;KAChE,CAAC,CAAA;AACJ,CAAC","ignoreList":[0]}},
    {"offset": {"line": 1284, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1290, "column": 0}, "map": {"version":3,"file":"useWriteContract.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useWriteContract.ts"],"sourcesContent":["'use client'\n\nimport { useMutation } from '@tanstack/react-query'\nimport type {\n  Config,\n  ResolvedRegister,\n  WriteContractErrorType,\n} from '@wagmi/core'\nimport {\n  type WriteContractData,\n  type WriteContractMutate,\n  type WriteContractMutateAsync,\n  type WriteContractVariables,\n  writeContractMutationOptions,\n} from '@wagmi/core/query'\nimport type { Abi } from 'viem'\n\nimport type { ConfigParameter } from '../types/properties.js'\nimport type {\n  UseMutationParameters,\n  UseMutationReturnType,\n} from '../utils/query.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseWriteContractParameters<\n  config extends Config = Config,\n  context = unknown,\n> = ConfigParameter<config> & {\n  mutation?:\n    | UseMutationParameters<\n        WriteContractData,\n        WriteContractErrorType,\n        WriteContractVariables<\n          Abi,\n          string,\n          readonly unknown[],\n          config,\n          config['chains'][number]['id']\n        >,\n        context\n      >\n    | undefined\n}\n\nexport type UseWriteContractReturnType<\n  config extends Config = Config,\n  context = unknown,\n> = UseMutationReturnType<\n  WriteContractData,\n  WriteContractErrorType,\n  WriteContractVariables<\n    Abi,\n    string,\n    readonly unknown[],\n    config,\n    config['chains'][number]['id']\n  >,\n  context\n> & {\n  writeContract: WriteContractMutate<config, context>\n  writeContractAsync: WriteContractMutateAsync<config, context>\n}\n\n/** https://wagmi.sh/react/api/hooks/useWriteContract */\nexport function useWriteContract<\n  config extends Config = ResolvedRegister['config'],\n  context = unknown,\n>(\n  parameters: UseWriteContractParameters<config, context> = {},\n): UseWriteContractReturnType<config, context> {\n  const { mutation } = parameters\n\n  const config = useConfig(parameters)\n\n  const mutationOptions = writeContractMutationOptions(config)\n  const { mutate, mutateAsync, ...result } = useMutation({\n    ...mutation,\n    ...mutationOptions,\n  })\n\n  type Return = UseWriteContractReturnType<config, context>\n  return {\n    ...result,\n    writeContract: mutate as Return['writeContract'],\n    writeContractAsync: mutateAsync as Return['writeContractAsync'],\n  }\n}\n"],"names":[],"mappings":";;;AAsBA,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAd1C,OAAO,EAKL,4BAA4B,GAC7B,MAAM,mBAAmB,CAAA;AAZ1B,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAA;AAFnD,YAAY,CAAA;;;;AAgEN,SAAU,gBAAgB,CAI9B,aAA0D,CAAA,CAAE;IAE5D,MAAM,EAAE,QAAQ,EAAE,GAAG,UAAU,CAAA;IAE/B,MAAM,MAAM,IAAG,6XAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IAEpC,MAAM,eAAe,gYAAG,+BAAA,AAA4B,EAAC,MAAM,CAAC,CAAA;IAC5D,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,GAAG,MAAM,EAAE,yRAAG,cAAA,AAAW,EAAC;QACrD,GAAG,QAAQ;QACX,GAAG,eAAe;KACnB,CAAC,CAAA;IAGF,OAAO;QACL,GAAG,MAAM;QACT,aAAa,EAAE,MAAiC;QAChD,kBAAkB,EAAE,WAA2C;KAChE,CAAA;AACH,CAAC","ignoreList":[0]}},
    {"offset": {"line": 1314, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1320, "column": 0}, "map": {"version":3,"file":"useDeployContract.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useDeployContract.ts"],"sourcesContent":["'use client'\n\nimport { useMutation } from '@tanstack/react-query'\nimport type {\n  Config,\n  DeployContractErrorType,\n  ResolvedRegister,\n} from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport {\n  type DeployContractData,\n  type DeployContractMutate,\n  type DeployContractMutateAsync,\n  type DeployContractVariables,\n  deployContractMutationOptions,\n} from '@wagmi/core/query'\nimport type { Abi } from 'viem'\n\nimport type { ConfigParameter } from '../types/properties.js'\nimport type {\n  UseMutationParameters,\n  UseMutationReturnType,\n} from '../utils/query.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseDeployContractParameters<\n  config extends Config = Config,\n  context = unknown,\n> = Compute<\n  ConfigParameter<config> & {\n    mutation?:\n      | UseMutationParameters<\n          DeployContractData,\n          DeployContractErrorType,\n          DeployContractVariables<Abi, config, config['chains'][number]['id']>,\n          context\n        >\n      | undefined\n  }\n>\n\nexport type UseDeployContractReturnType<\n  config extends Config = Config,\n  context = unknown,\n> = UseMutationReturnType<\n  DeployContractData,\n  DeployContractErrorType,\n  DeployContractVariables<Abi, config, config['chains'][number]['id']>,\n  context\n> & {\n  deployContract: DeployContractMutate<config, context>\n  deployContractAsync: DeployContractMutateAsync<config, context>\n}\n\n/** https://wagmi.sh/react/api/hooks/useDeployContract */\nexport function useDeployContract<\n  config extends Config = ResolvedRegister['config'],\n  context = unknown,\n>(\n  parameters: UseDeployContractParameters<config, context> = {},\n): UseDeployContractReturnType<config, context> {\n  const { mutation } = parameters\n\n  const config = useConfig(parameters)\n\n  const mutationOptions = deployContractMutationOptions(config)\n  const { mutate, mutateAsync, ...result } = useMutation({\n    ...mutation,\n    ...mutationOptions,\n  })\n\n  type Return = UseDeployContractReturnType<config, context>\n  return {\n    ...result,\n    deployContract: mutate as Return['deployContract'],\n    deployContractAsync: mutateAsync as Return['deployContractAsync'],\n  }\n}\n"],"names":[],"mappings":";;;AAuBA,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAd1C,OAAO,EAKL,6BAA6B,GAC9B,MAAM,mBAAmB,CAAA;AAb1B,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAA;AAFnD,YAAY,CAAA;;;;AAuDN,SAAU,iBAAiB,CAI/B,aAA2D,CAAA,CAAE;IAE7D,MAAM,EAAE,QAAQ,EAAE,GAAG,UAAU,CAAA;IAE/B,MAAM,MAAM,IAAG,6XAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IAEpC,MAAM,eAAe,iYAAG,gCAAA,AAA6B,EAAC,MAAM,CAAC,CAAA;IAC7D,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,GAAG,MAAM,EAAE,yRAAG,cAAA,AAAW,EAAC;QACrD,GAAG,QAAQ;QACX,GAAG,eAAe;KACnB,CAAC,CAAA;IAGF,OAAO;QACL,GAAG,MAAM;QACT,cAAc,EAAE,MAAkC;QAClD,mBAAmB,EAAE,WAA4C;KAClE,CAAA;AACH,CAAC","ignoreList":[0]}},
    {"offset": {"line": 1344, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1350, "column": 0}, "map": {"version":3,"file":"useEnsResolver.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useEnsResolver.ts"],"sourcesContent":["'use client'\n\nimport type {\n  Config,\n  GetEnsResolverErrorType,\n  ResolvedRegister,\n} from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport {\n  type GetEnsResolverData,\n  type GetEnsResolverOptions,\n  type GetEnsResolverQueryFnData,\n  type GetEnsResolverQueryKey,\n  getEnsResolverQueryOptions,\n} from '@wagmi/core/query'\n\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseEnsResolverParameters<\n  config extends Config = Config,\n  selectData = GetEnsResolverData,\n> = Compute<\n  GetEnsResolverOptions<config> &\n    ConfigParameter<config> &\n    QueryParameter<\n      GetEnsResolverQueryFnData,\n      GetEnsResolverErrorType,\n      selectData,\n      GetEnsResolverQueryKey<config>\n    >\n>\n\nexport type UseEnsResolverReturnType<selectData = GetEnsResolverData> =\n  UseQueryReturnType<selectData, GetEnsResolverErrorType>\n\n/** https://wagmi.sh/react/api/hooks/useEnsResolver */\nexport function useEnsResolver<\n  config extends Config = ResolvedRegister['config'],\n  selectData = GetEnsResolverData,\n>(\n  parameters: UseEnsResolverParameters<config, selectData> = {},\n): UseEnsResolverReturnType<selectData> {\n  const { name, query = {} } = parameters\n\n  const config = useConfig(parameters)\n  const chainId = useChainId({ config })\n\n  const options = getEnsResolverQueryOptions(config, {\n    ...parameters,\n    chainId: parameters.chainId ?? chainId,\n  })\n  const enabled = Boolean(name && (query.enabled ?? true))\n\n  return useQuery({ ...query, ...options, enabled })\n}\n"],"names":[],"mappings":";;;AAmBA,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAD1C,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAA;AAV5C,OAAO,EAKL,0BAA0B,GAC3B,MAAM,mBAAmB,CAAA;AAG1B,OAAO,EAA2B,QAAQ,EAAE,MAAM,mBAAmB,CAAA;AAjBrE,YAAY,CAAA;;;;;AAuCN,SAAU,cAAc,CAI5B,aAA2D,CAAA,CAAE;IAE7D,MAAM,EAAE,IAAI,EAAE,KAAK,GAAG,CAAA,CAAE,EAAE,GAAG,UAAU,CAAA;IAEvC,MAAM,MAAM,qXAAG,YAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IACpC,MAAM,OAAO,sXAAG,aAAA,AAAU,EAAC;QAAE,MAAM;IAAA,CAAE,CAAC,CAAA;IAEtC,MAAM,OAAO,IAAG,0ZAAA,AAA0B,EAAC,MAAM,EAAE;QACjD,GAAG,UAAU;QACb,OAAO,EAAE,UAAU,CAAC,OAAO,IAAI,OAAO;KACvC,CAAC,CAAA;IACF,MAAM,OAAO,GAAG,OAAO,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC,CAAA;IAExD,qYAAO,WAAA,AAAQ,EAAC;QAAE,GAAG,KAAK;QAAE,GAAG,OAAO;QAAE,OAAO;IAAA,CAAE,CAAC,CAAA;AACpD,CAAC","ignoreList":[0]}},
    {"offset": {"line": 1379, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1385, "column": 0}, "map": {"version":3,"file":"useEnsText.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useEnsText.ts"],"sourcesContent":["'use client'\n\nimport type { Config, GetEnsTextErrorType, ResolvedRegister } from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport {\n  type GetEnsTextData,\n  type GetEnsTextOptions,\n  type GetEnsTextQueryFnData,\n  type GetEnsTextQueryKey,\n  getEnsTextQueryOptions,\n} from '@wagmi/core/query'\n\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseEnsTextParameters<\n  config extends Config = Config,\n  selectData = GetEnsTextData,\n> = Compute<\n  GetEnsTextOptions<config> &\n    ConfigParameter<config> &\n    QueryParameter<\n      GetEnsTextQueryFnData,\n      GetEnsTextErrorType,\n      selectData,\n      GetEnsTextQueryKey<config>\n    >\n>\n\nexport type UseEnsTextReturnType<selectData = GetEnsTextData> =\n  UseQueryReturnType<selectData, GetEnsTextErrorType>\n\n/** https://wagmi.sh/react/api/hooks/useEnsText */\nexport function useEnsText<\n  config extends Config = ResolvedRegister['config'],\n  selectData = GetEnsTextData,\n>(\n  parameters: UseEnsTextParameters<config, selectData> = {},\n): UseEnsTextReturnType<selectData> {\n  const { key, name, query = {} } = parameters\n\n  const config = useConfig(parameters)\n  const chainId = useChainId({ config })\n\n  const options = getEnsTextQueryOptions(config, {\n    ...parameters,\n    chainId: parameters.chainId ?? chainId,\n  })\n  const enabled = Boolean(key && name && (query.enabled ?? true))\n\n  return useQuery({ ...query, ...options, enabled })\n}\n"],"names":[],"mappings":";;;AAeA,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAD1C,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAA;AAV5C,OAAO,EAKL,sBAAsB,GACvB,MAAM,mBAAmB,CAAA;AAG1B,OAAO,EAA2B,QAAQ,EAAE,MAAM,mBAAmB,CAAA;AAbrE,YAAY,CAAA;;;;;AAmCN,SAAU,UAAU,CAIxB,aAAuD,CAAA,CAAE;IAEzD,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,GAAG,CAAA,CAAE,EAAE,GAAG,UAAU,CAAA;IAE5C,MAAM,MAAM,IAAG,6XAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IACpC,MAAM,OAAO,sXAAG,aAAA,AAAU,EAAC;QAAE,MAAM;IAAA,CAAE,CAAC,CAAA;IAEtC,MAAM,OAAO,6XAAG,yBAAA,AAAsB,EAAC,MAAM,EAAE;QAC7C,GAAG,UAAU;QACb,OAAO,EAAE,UAAU,CAAC,OAAO,IAAI,OAAO;KACvC,CAAC,CAAA;IACF,MAAM,OAAO,GAAG,OAAO,CAAC,GAAG,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC,CAAA;IAE/D,qYAAO,WAAA,AAAQ,EAAC;QAAE,GAAG,KAAK;QAAE,GAAG,OAAO;QAAE,OAAO;IAAA,CAAE,CAAC,CAAA;AACpD,CAAC","ignoreList":[0]}},
    {"offset": {"line": 1414, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1420, "column": 0}, "map": {"version":3,"file":"useEstimateFeesPerGas.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useEstimateFeesPerGas.ts"],"sourcesContent":["'use client'\n\nimport type {\n  Config,\n  EstimateFeesPerGasErrorType,\n  ResolvedRegister,\n} from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport {\n  type EstimateFeesPerGasData,\n  type EstimateFeesPerGasOptions,\n  type EstimateFeesPerGasQueryFnData,\n  type EstimateFeesPerGasQueryKey,\n  estimateFeesPerGasQueryOptions,\n} from '@wagmi/core/query'\nimport type { FeeValuesType } from 'viem'\n\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseEstimateFeesPerGasParameters<\n  type extends FeeValuesType = FeeValuesType,\n  config extends Config = Config,\n  selectData = EstimateFeesPerGasData<type>,\n> = Compute<\n  EstimateFeesPerGasOptions<type, config> &\n    ConfigParameter<config> &\n    QueryParameter<\n      EstimateFeesPerGasQueryFnData<type>,\n      EstimateFeesPerGasErrorType,\n      selectData,\n      EstimateFeesPerGasQueryKey<config, type>\n    >\n>\n\nexport type UseEstimateFeesPerGasReturnType<\n  type extends FeeValuesType = FeeValuesType,\n  selectData = EstimateFeesPerGasData<type>,\n> = UseQueryReturnType<selectData, EstimateFeesPerGasErrorType>\n\n/** https://wagmi.sh/react/api/hooks/useEstimateFeesPerGas */\nexport function useEstimateFeesPerGas<\n  config extends Config = ResolvedRegister['config'],\n  type extends FeeValuesType = 'eip1559',\n  selectData = EstimateFeesPerGasData<type>,\n>(\n  parameters: UseEstimateFeesPerGasParameters<type, config, selectData> = {},\n): UseEstimateFeesPerGasReturnType<type, selectData> {\n  const { query = {} } = parameters\n\n  const config = useConfig(parameters)\n  const chainId = useChainId({ config })\n\n  const options = estimateFeesPerGasQueryOptions(config, {\n    ...parameters,\n    chainId: parameters.chainId ?? chainId,\n  })\n\n  return useQuery({ ...query, ...options })\n}\n"],"names":[],"mappings":";;;AAoBA,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAD1C,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAA;AAX5C,OAAO,EAKL,8BAA8B,GAC/B,MAAM,mBAAmB,CAAA;AAI1B,OAAO,EAA2B,QAAQ,EAAE,MAAM,mBAAmB,CAAA;AAlBrE,YAAY,CAAA;;;;;AA2CN,SAAU,qBAAqB,CAKnC,aAAwE,CAAA,CAAE;IAE1E,MAAM,EAAE,KAAK,GAAG,CAAA,CAAE,EAAE,GAAG,UAAU,CAAA;IAEjC,MAAM,MAAM,IAAG,6XAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IACpC,MAAM,OAAO,sXAAG,aAAA,AAAU,EAAC;QAAE,MAAM;IAAA,CAAE,CAAC,CAAA;IAEtC,MAAM,OAAO,IAAG,kaAAA,AAA8B,EAAC,MAAM,EAAE;QACrD,GAAG,UAAU;QACb,OAAO,EAAE,UAAU,CAAC,OAAO,IAAI,OAAO;KACvC,CAAC,CAAA;IAEF,qYAAO,WAAA,AAAQ,EAAC;QAAE,GAAG,KAAK;QAAE,GAAG,OAAO;IAAA,CAAE,CAAC,CAAA;AAC3C,CAAC","ignoreList":[0]}},
    {"offset": {"line": 1447, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1453, "column": 0}, "map": {"version":3,"file":"useEstimateGas.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useEstimateGas.ts"],"sourcesContent":["'use client'\n\nimport type {\n  Config,\n  EstimateGasErrorType,\n  ResolvedRegister,\n} from '@wagmi/core'\nimport {\n  type EstimateGasData,\n  type EstimateGasOptions,\n  type EstimateGasQueryFnData,\n  type EstimateGasQueryKey,\n  estimateGasQueryOptions,\n} from '@wagmi/core/query'\n\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\nimport { useConnectorClient } from './useConnectorClient.js'\n\nexport type UseEstimateGasParameters<\n  config extends Config = Config,\n  chainId extends config['chains'][number]['id'] | undefined = undefined,\n  selectData = EstimateGasData,\n> = EstimateGasOptions<config, chainId> &\n  ConfigParameter<config> &\n  QueryParameter<\n    EstimateGasQueryFnData,\n    EstimateGasErrorType,\n    selectData,\n    EstimateGasQueryKey<config, chainId>\n  >\n\nexport type UseEstimateGasReturnType<selectData = EstimateGasData> =\n  UseQueryReturnType<selectData, EstimateGasErrorType>\n\n/** https://wagmi.sh/react/api/hooks/useEstimateGas */\nexport function useEstimateGas<\n  config extends Config = ResolvedRegister['config'],\n  chainId extends config['chains'][number]['id'] | undefined = undefined,\n  selectData = EstimateGasData,\n>(\n  parameters?: UseEstimateGasParameters<config, chainId, selectData>,\n): UseEstimateGasReturnType<selectData>\n\nexport function useEstimateGas(\n  parameters: UseEstimateGasParameters = {},\n): UseEstimateGasReturnType {\n  const { connector, query = {} } = parameters\n\n  const config = useConfig(parameters)\n  const { data: connectorClient } = useConnectorClient({\n    config,\n    connector,\n    query: { enabled: parameters.account === undefined },\n  })\n  const account = parameters.account ?? connectorClient?.account\n  const chainId = useChainId({ config })\n\n  const options = estimateGasQueryOptions(config, {\n    ...parameters,\n    account,\n    chainId: parameters.chainId ?? chainId,\n    connector,\n  })\n  const enabled = Boolean((account || connector) && (query.enabled ?? true))\n\n  return useQuery({ ...query, ...options, enabled })\n}\n"],"names":[],"mappings":";;;AAkBA,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAC1C,OAAO,EAAE,kBAAkB,EAAE,MAAM,yBAAyB,CAAA;AAF5D,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAA;AAV5C,OAAO,EAKL,uBAAuB,GACxB,MAAM,mBAAmB,CAAA;AAG1B,OAAO,EAA2B,QAAQ,EAAE,MAAM,mBAAmB,CAAA;AAhBrE,YAAY,CAAA;;;;;;AA8CN,SAAU,cAAc,CAC5B,aAAuC,CAAA,CAAE;IAEzC,MAAM,EAAE,SAAS,EAAE,KAAK,GAAG,CAAA,CAAE,EAAE,GAAG,UAAU,CAAA;IAE5C,MAAM,MAAM,qXAAG,YAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IACpC,MAAM,EAAE,IAAI,EAAE,eAAe,EAAE,GAAG,gZAAA,AAAkB,EAAC;QACnD,MAAM;QACN,SAAS;QACT,KAAK,EAAE;YAAE,OAAO,EAAE,UAAU,CAAC,OAAO,KAAK,SAAS;QAAA,CAAE;KACrD,CAAC,CAAA;IACF,MAAM,OAAO,GAAG,UAAU,CAAC,OAAO,IAAI,eAAe,EAAE,OAAO,CAAA;IAC9D,MAAM,OAAO,sXAAG,aAAA,AAAU,EAAC;QAAE,MAAM;IAAA,CAAE,CAAC,CAAA;IAEtC,MAAM,OAAO,8XAAG,0BAAA,AAAuB,EAAC,MAAM,EAAE;QAC9C,GAAG,UAAU;QACb,OAAO;QACP,OAAO,EAAE,UAAU,CAAC,OAAO,IAAI,OAAO;QACtC,SAAS;KACV,CAAC,CAAA;IACF,MAAM,OAAO,GAAG,OAAO,CAAC,CAAC,OAAO,IAAI,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC,CAAA;IAE1E,qYAAO,WAAA,AAAQ,EAAC;QAAE,GAAG,KAAK;QAAE,GAAG,OAAO;QAAE,OAAO;IAAA,CAAE,CAAC,CAAA;AACpD,CAAC","ignoreList":[0]}},
    {"offset": {"line": 1494, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1500, "column": 0}, "map": {"version":3,"file":"useEstimateMaxPriorityFeePerGas.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useEstimateMaxPriorityFeePerGas.ts"],"sourcesContent":["'use client'\n\nimport type {\n  Config,\n  EstimateMaxPriorityFeePerGasErrorType,\n  ResolvedRegister,\n} from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport {\n  type EstimateMaxPriorityFeePerGasData,\n  type EstimateMaxPriorityFeePerGasOptions,\n  type EstimateMaxPriorityFeePerGasQueryFnData,\n  type EstimateMaxPriorityFeePerGasQueryKey,\n  estimateMaxPriorityFeePerGasQueryOptions,\n} from '@wagmi/core/query'\n\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseEstimateMaxPriorityFeePerGasParameters<\n  config extends Config = Config,\n  selectData = EstimateMaxPriorityFeePerGasData,\n> = Compute<\n  EstimateMaxPriorityFeePerGasOptions<config> &\n    ConfigParameter<config> &\n    QueryParameter<\n      EstimateMaxPriorityFeePerGasQueryFnData,\n      EstimateMaxPriorityFeePerGasErrorType,\n      selectData,\n      EstimateMaxPriorityFeePerGasQueryKey<config>\n    >\n>\n\nexport type UseEstimateMaxPriorityFeePerGasReturnType<\n  selectData = EstimateMaxPriorityFeePerGasData,\n> = UseQueryReturnType<selectData, EstimateMaxPriorityFeePerGasErrorType>\n\n/** https://wagmi.sh/react/api/hooks/useEstimateMaxPriorityFeePerGas */\nexport function useEstimateMaxPriorityFeePerGas<\n  config extends Config = ResolvedRegister['config'],\n  selectData = EstimateMaxPriorityFeePerGasData,\n>(\n  parameters: UseEstimateMaxPriorityFeePerGasParameters<\n    config,\n    selectData\n  > = {},\n): UseEstimateMaxPriorityFeePerGasReturnType<selectData> {\n  const { query = {} } = parameters\n\n  const config = useConfig(parameters)\n  const chainId = useChainId({ config })\n\n  const options = estimateMaxPriorityFeePerGasQueryOptions(config, {\n    ...parameters,\n    chainId: parameters.chainId ?? chainId,\n  })\n\n  return useQuery({ ...query, ...options })\n}\n"],"names":[],"mappings":";;;AAmBA,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAD1C,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAA;AAV5C,OAAO,EAKL,wCAAwC,GACzC,MAAM,mBAAmB,CAAA;AAG1B,OAAO,EAA2B,QAAQ,EAAE,MAAM,mBAAmB,CAAA;AAjBrE,YAAY,CAAA;;;;;AAwCN,SAAU,+BAA+B,CAI7C,aAGI,CAAA,CAAE;IAEN,MAAM,EAAE,KAAK,GAAG,CAAA,CAAE,EAAE,GAAG,UAAU,CAAA;IAEjC,MAAM,MAAM,IAAG,6XAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IACpC,MAAM,OAAO,sXAAG,aAAA,AAAU,EAAC;QAAE,MAAM;IAAA,CAAE,CAAC,CAAA;IAEtC,MAAM,OAAO,IAAG,sbAAA,AAAwC,EAAC,MAAM,EAAE;QAC/D,GAAG,UAAU;QACb,OAAO,EAAE,UAAU,CAAC,OAAO,IAAI,OAAO;KACvC,CAAC,CAAA;IAEF,qYAAO,WAAA,AAAQ,EAAC;QAAE,GAAG,KAAK;QAAE,GAAG,OAAO;IAAA,CAAE,CAAC,CAAA;AAC3C,CAAC","ignoreList":[0]}},
    {"offset": {"line": 1527, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1533, "column": 0}, "map": {"version":3,"file":"useFeeHistory.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useFeeHistory.ts"],"sourcesContent":["'use client'\n\nimport type {\n  Config,\n  GetFeeHistoryErrorType,\n  ResolvedRegister,\n} from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport {\n  type GetFeeHistoryData,\n  type GetFeeHistoryOptions,\n  type GetFeeHistoryQueryFnData,\n  type GetFeeHistoryQueryKey,\n  getFeeHistoryQueryOptions,\n} from '@wagmi/core/query'\n\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseFeeHistoryParameters<\n  config extends Config = Config,\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n  selectData = GetFeeHistoryData,\n> = Compute<\n  GetFeeHistoryOptions<config, chainId> &\n    ConfigParameter<config> &\n    QueryParameter<\n      GetFeeHistoryQueryFnData,\n      GetFeeHistoryErrorType,\n      selectData,\n      GetFeeHistoryQueryKey<config, chainId>\n    >\n>\n\nexport type UseFeeHistoryReturnType<selectData = GetFeeHistoryData> =\n  UseQueryReturnType<selectData, GetFeeHistoryErrorType>\n\n/** https://wagmi.sh/react/api/hooks/useFeeHistory */\nexport function useFeeHistory<\n  config extends Config = ResolvedRegister['config'],\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n  selectData = GetFeeHistoryData,\n>(\n  parameters: UseFeeHistoryParameters<config, chainId, selectData> = {},\n): UseFeeHistoryReturnType<selectData> {\n  const { blockCount, rewardPercentiles, query = {} } = parameters\n\n  const config = useConfig(parameters)\n  const chainId = useChainId({ config })\n\n  const options = getFeeHistoryQueryOptions(config, {\n    ...parameters,\n    chainId: parameters.chainId ?? chainId,\n  })\n  const enabled = Boolean(\n    blockCount && rewardPercentiles && (query.enabled ?? true),\n  )\n\n  return useQuery({ ...query, ...options, enabled })\n}\n"],"names":[],"mappings":";;;AAmBA,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAD1C,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAA;AAV5C,OAAO,EAKL,yBAAyB,GAC1B,MAAM,mBAAmB,CAAA;AAG1B,OAAO,EAA2B,QAAQ,EAAE,MAAM,mBAAmB,CAAA;AAjBrE,YAAY,CAAA;;;;;AAyCN,SAAU,aAAa,CAM3B,aAAmE,CAAA,CAAE;IAErE,MAAM,EAAE,UAAU,EAAE,iBAAiB,EAAE,KAAK,GAAG,CAAA,CAAE,EAAE,GAAG,UAAU,CAAA;IAEhE,MAAM,MAAM,IAAG,6XAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IACpC,MAAM,OAAO,sXAAG,aAAA,AAAU,EAAC;QAAE,MAAM;IAAA,CAAE,CAAC,CAAA;IAEtC,MAAM,OAAO,gYAAG,4BAAA,AAAyB,EAAC,MAAM,EAAE;QAChD,GAAG,UAAU;QACb,OAAO,EAAE,UAAU,CAAC,OAAO,IAAI,OAAO;KACvC,CAAC,CAAA;IACF,MAAM,OAAO,GAAG,OAAO,CACrB,UAAU,IAAI,iBAAiB,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,CAC3D,CAAA;IAED,qYAAO,WAAA,AAAQ,EAAC;QAAE,GAAG,KAAK;QAAE,GAAG,OAAO;QAAE,OAAO;IAAA,CAAE,CAAC,CAAA;AACpD,CAAC","ignoreList":[0]}},
    {"offset": {"line": 1562, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1568, "column": 0}, "map": {"version":3,"file":"useGasPrice.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useGasPrice.ts"],"sourcesContent":["'use client'\n\nimport type {\n  Config,\n  GetGasPriceErrorType,\n  ResolvedRegister,\n} from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport {\n  type GetGasPriceData,\n  type GetGasPriceOptions,\n  type GetGasPriceQueryFnData,\n  type GetGasPriceQueryKey,\n  getGasPriceQueryOptions,\n} from '@wagmi/core/query'\n\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseGasPriceParameters<\n  config extends Config = Config,\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n  selectData = GetGasPriceData,\n> = Compute<\n  GetGasPriceOptions<config, chainId> &\n    ConfigParameter<config> &\n    QueryParameter<\n      GetGasPriceQueryFnData,\n      GetGasPriceErrorType,\n      selectData,\n      GetGasPriceQueryKey<config, chainId>\n    >\n>\n\nexport type UseGasPriceReturnType<selectData = GetGasPriceData> =\n  UseQueryReturnType<selectData, GetGasPriceErrorType>\n\n/** https://wagmi.sh/react/api/hooks/useGasPrice */\nexport function useGasPrice<\n  config extends Config = ResolvedRegister['config'],\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n  selectData = GetGasPriceData,\n>(\n  parameters: UseGasPriceParameters<config, chainId, selectData> = {},\n): UseGasPriceReturnType<selectData> {\n  const { query = {} } = parameters\n\n  const config = useConfig(parameters)\n  const configChainId = useChainId({ config })\n  const chainId = parameters.chainId ?? configChainId\n\n  const options = getGasPriceQueryOptions(config, {\n    ...parameters,\n    chainId,\n  })\n\n  return useQuery({ ...query, ...options })\n}\n"],"names":[],"mappings":";;;AAmBA,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAD1C,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAA;AAV5C,OAAO,EAKL,uBAAuB,GACxB,MAAM,mBAAmB,CAAA;AAG1B,OAAO,EAA2B,QAAQ,EAAE,MAAM,mBAAmB,CAAA;AAjBrE,YAAY,CAAA;;;;;AAyCN,SAAU,WAAW,CAMzB,aAAiE,CAAA,CAAE;IAEnE,MAAM,EAAE,KAAK,GAAG,CAAA,CAAE,EAAE,GAAG,UAAU,CAAA;IAEjC,MAAM,MAAM,IAAG,6XAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IACpC,MAAM,aAAa,sXAAG,aAAA,AAAU,EAAC;QAAE,MAAM;IAAA,CAAE,CAAC,CAAA;IAC5C,MAAM,OAAO,GAAG,UAAU,CAAC,OAAO,IAAI,aAAa,CAAA;IAEnD,MAAM,OAAO,8XAAG,0BAAA,AAAuB,EAAC,MAAM,EAAE;QAC9C,GAAG,UAAU;QACb,OAAO;KACR,CAAC,CAAA;IAEF,qYAAO,WAAA,AAAQ,EAAC;QAAE,GAAG,KAAK;QAAE,GAAG,OAAO;IAAA,CAAE,CAAC,CAAA;AAC3C,CAAC","ignoreList":[0]}},
    {"offset": {"line": 1596, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1602, "column": 0}, "map": {"version":3,"file":"usePrepareTransactionRequest.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/usePrepareTransactionRequest.ts"],"sourcesContent":["'use client'\n\nimport type {\n  Config,\n  PrepareTransactionRequestErrorType,\n  ResolvedRegister,\n  SelectChains,\n} from '@wagmi/core'\nimport {\n  type PrepareTransactionRequestData,\n  type PrepareTransactionRequestOptions,\n  type PrepareTransactionRequestQueryKey,\n  prepareTransactionRequestQueryOptions,\n} from '@wagmi/core/query'\nimport type { PrepareTransactionRequestQueryFnData } from '@wagmi/core/query'\nimport type { PrepareTransactionRequestRequest as viem_PrepareTransactionRequestRequest } from 'viem'\n\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UsePrepareTransactionRequestParameters<\n  config extends Config = Config,\n  chainId extends config['chains'][number]['id'] | undefined = undefined,\n  request extends viem_PrepareTransactionRequestRequest<\n    SelectChains<config, chainId>[0],\n    SelectChains<config, chainId>[0]\n  > = viem_PrepareTransactionRequestRequest<\n    SelectChains<config, chainId>[0],\n    SelectChains<config, chainId>[0]\n  >,\n  selectData = PrepareTransactionRequestData<config, chainId, request>,\n> = PrepareTransactionRequestOptions<config, chainId, request> &\n  ConfigParameter<config> &\n  QueryParameter<\n    PrepareTransactionRequestQueryFnData<config, chainId, request>,\n    PrepareTransactionRequestErrorType,\n    selectData,\n    PrepareTransactionRequestQueryKey<config, chainId, request>\n  >\n\nexport type UsePrepareTransactionRequestReturnType<\n  config extends Config = Config,\n  chainId extends config['chains'][number]['id'] | undefined = undefined,\n  request extends viem_PrepareTransactionRequestRequest<\n    SelectChains<config, chainId>[0],\n    SelectChains<config, chainId>[0]\n  > = viem_PrepareTransactionRequestRequest<\n    SelectChains<config, chainId>[0],\n    SelectChains<config, chainId>[0]\n  >,\n  selectData = PrepareTransactionRequestData<config, chainId, request>,\n> = UseQueryReturnType<selectData, PrepareTransactionRequestErrorType>\n\n/** https://wagmi.sh/react/api/hooks/usePrepareTransactionRequest */\nexport function usePrepareTransactionRequest<\n  config extends Config = ResolvedRegister['config'],\n  chainId extends config['chains'][number]['id'] | undefined = undefined,\n  request extends viem_PrepareTransactionRequestRequest<\n    SelectChains<config, chainId>[0],\n    SelectChains<config, chainId>[0]\n  > = viem_PrepareTransactionRequestRequest<\n    SelectChains<config, chainId>[0],\n    SelectChains<config, chainId>[0]\n  >,\n  selectData = PrepareTransactionRequestData<config, chainId, request>,\n>(\n  parameters: UsePrepareTransactionRequestParameters<\n    config,\n    chainId,\n    request,\n    selectData\n  > = {} as any,\n): UsePrepareTransactionRequestReturnType<\n  config,\n  chainId,\n  request,\n  selectData\n> {\n  const { to, query = {} } = parameters\n\n  const config = useConfig(parameters)\n  const chainId = useChainId({ config })\n\n  const options = prepareTransactionRequestQueryOptions(config, {\n    ...parameters,\n    chainId: parameters.chainId ?? chainId,\n  } as PrepareTransactionRequestOptions<config, chainId, request>)\n  const enabled = Boolean(to && (query.enabled ?? true))\n\n  return useQuery({\n    ...(query as any),\n    ...options,\n    enabled,\n  }) as UsePrepareTransactionRequestReturnType<\n    config,\n    chainId,\n    request,\n    selectData\n  >\n}\n"],"names":[],"mappings":";;;AAoBA,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAD1C,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAA;AAX5C,OAAO,EAIL,qCAAqC,GACtC,MAAM,mBAAmB,CAAA;AAK1B,OAAO,EAA2B,QAAQ,EAAE,MAAM,mBAAmB,CAAA;AAlBrE,YAAY,CAAA;;;;;AAwDN,SAAU,4BAA4B,CAY1C,aAKI,CAAA,CAAS;IAOb,MAAM,EAAE,EAAE,EAAE,KAAK,GAAG,CAAA,CAAE,EAAE,GAAG,UAAU,CAAA;IAErC,MAAM,MAAM,qXAAG,YAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IACpC,MAAM,OAAO,sXAAG,aAAA,AAAU,EAAC;QAAE,MAAM;IAAA,CAAE,CAAC,CAAA;IAEtC,MAAM,OAAO,IAAG,gbAAA,AAAqC,EAAC,MAAM,EAAE;QAC5D,GAAG,UAAU;QACb,OAAO,EAAE,UAAU,CAAC,OAAO,IAAI,OAAO;KACuB,CAAC,CAAA;IAChE,MAAM,OAAO,GAAG,OAAO,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC,CAAA;IAEtD,qYAAO,WAAA,AAAQ,EAAC;QACd,GAAI,KAAa;QACjB,GAAG,OAAO;QACV,OAAO;KACR,CAKA,CAAA;AACH,CAAC","ignoreList":[0]}},
    {"offset": {"line": 1631, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1637, "column": 0}, "map": {"version":3,"file":"useProof.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useProof.ts"],"sourcesContent":["'use client'\n\nimport type { Config, GetProofErrorType, ResolvedRegister } from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport {\n  type GetProofData,\n  type GetProofOptions,\n  type GetProofQueryKey,\n  getProofQueryOptions,\n} from '@wagmi/core/query'\nimport type { GetProofQueryFnData } from '@wagmi/core/query'\n\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseProofParameters<\n  config extends Config = Config,\n  selectData = GetProofData,\n> = Compute<\n  GetProofOptions<config> &\n    ConfigParameter<config> &\n    QueryParameter<\n      GetProofQueryFnData,\n      GetProofErrorType,\n      selectData,\n      GetProofQueryKey<config>\n    >\n>\n\nexport type UseProofReturnType<selectData = GetProofData> = UseQueryReturnType<\n  selectData,\n  GetProofErrorType\n>\n\n/** https://wagmi.sh/react/api/hooks/useProof */\nexport function useProof<\n  config extends Config = ResolvedRegister['config'],\n  selectData = GetProofData,\n>(\n  parameters: UseProofParameters<config, selectData> = {},\n): UseProofReturnType<selectData> {\n  const { address, storageKeys, query = {} } = parameters\n\n  const config = useConfig(parameters)\n  const chainId = useChainId({ config })\n\n  const options = getProofQueryOptions(config, {\n    ...parameters,\n    chainId: parameters.chainId ?? chainId,\n  })\n  const enabled = Boolean(address && storageKeys && (query.enabled ?? true))\n\n  return useQuery({ ...query, ...options, enabled })\n}\n"],"names":[],"mappings":";;;AAeA,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAD1C,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAA;AAV5C,OAAO,EAIL,oBAAoB,GACrB,MAAM,mBAAmB,CAAA;AAI1B,OAAO,EAA2B,QAAQ,EAAE,MAAM,mBAAmB,CAAA;AAbrE,YAAY,CAAA;;;;;AAqCN,SAAU,QAAQ,CAItB,aAAqD,CAAA,CAAE;IAEvD,MAAM,EAAE,OAAO,EAAE,WAAW,EAAE,KAAK,GAAG,CAAA,CAAE,EAAE,GAAG,UAAU,CAAA;IAEvD,MAAM,MAAM,IAAG,6XAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IACpC,MAAM,OAAO,sXAAG,aAAA,AAAU,EAAC;QAAE,MAAM;IAAA,CAAE,CAAC,CAAA;IAEtC,MAAM,OAAO,2XAAG,uBAAA,AAAoB,EAAC,MAAM,EAAE;QAC3C,GAAG,UAAU;QACb,OAAO,EAAE,UAAU,CAAC,OAAO,IAAI,OAAO;KACvC,CAAC,CAAA;IACF,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,WAAW,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC,CAAA;IAE1E,qYAAO,WAAA,AAAQ,EAAC;QAAE,GAAG,KAAK;QAAE,GAAG,OAAO;QAAE,OAAO;IAAA,CAAE,CAAC,CAAA;AACpD,CAAC","ignoreList":[0]}},
    {"offset": {"line": 1666, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1672, "column": 0}, "map": {"version":3,"file":"usePublicClient.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/usePublicClient.ts"],"sourcesContent":["'use client'\n\nimport {\n  type Config,\n  type GetPublicClientParameters,\n  type GetPublicClientReturnType,\n  type ResolvedRegister,\n  getPublicClient,\n  watchPublicClient,\n} from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport { useSyncExternalStoreWithSelector } from 'use-sync-external-store/shim/with-selector.js'\n\nimport type { ConfigParameter } from '../types/properties.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UsePublicClientParameters<\n  config extends Config = Config,\n  chainId extends config['chains'][number]['id'] | number | undefined =\n    | config['chains'][number]['id']\n    | undefined,\n> = Compute<\n  GetPublicClientParameters<config, chainId> & ConfigParameter<config>\n>\n\nexport type UsePublicClientReturnType<\n  config extends Config = Config,\n  chainId extends config['chains'][number]['id'] | number | undefined =\n    | config['chains'][number]['id']\n    | undefined,\n> = GetPublicClientReturnType<config, chainId>\n\n/** https://wagmi.sh/react/api/hooks/usePublicClient */\nexport function usePublicClient<\n  config extends Config = ResolvedRegister['config'],\n  chainId extends config['chains'][number]['id'] | number | undefined =\n    | config['chains'][number]['id']\n    | undefined,\n>(\n  parameters: UsePublicClientParameters<config, chainId> = {},\n): UsePublicClientReturnType<config, chainId> {\n  const config = useConfig(parameters)\n\n  return useSyncExternalStoreWithSelector(\n    (onChange) => watchPublicClient(config, { onChange }),\n    () => getPublicClient(config, parameters),\n    () => getPublicClient(config, parameters),\n    (x) => x,\n    (a, b) => a?.uid === b?.uid,\n  ) as any\n}\n"],"names":[],"mappings":";;;AAWA,OAAO,EAAE,gCAAgC,EAAE,MAAM,+CAA+C,CAAA;AAGhG,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;;AAZ1C,OAAO,EAKL,eAAe,EACf,iBAAiB,GAClB,MAAM,aAAa,CAAA;AATpB,YAAY,CAAA;;;;AAiCN,SAAU,eAAe,CAM7B,aAAyD,CAAA,CAAE;IAE3D,MAAM,MAAM,qXAAG,YAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IAEpC,OAAO,0TAAA,AAAgC;4DACrC,CAAC,QAAQ,EAAE,EAAE,kYAAC,oBAAA,AAAiB,EAAC,MAAM,EAAE;gBAAE,QAAQ;YAAA,CAAE,CAAC;;4DACrD,GAAG,EAAE,gYAAC,kBAAA,AAAe,EAAC,MAAM,EAAE,UAAU,CAAC;;4DACzC,GAAG,CAAG,CAAD,kZAAC,AAAe,EAAC,MAAM,EAAE,UAAU,CAAC;;4DACzC,CAAC,CAAC,EAAE,CAAG,CAAD,AAAE;;4DACR,CAAC,CAAC,EAAE,CAAC,EAAE,CAAG,CAAD,AAAE,EAAE,GAAG,KAAK,CAAC,EAAE,GAAG,CACrB,CAAA;;AACV,CAAC","ignoreList":[0]}},
    {"offset": {"line": 1699, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1705, "column": 0}, "map": {"version":3,"file":"useReconnect.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useReconnect.ts"],"sourcesContent":["'use client'\n\nimport { useMutation } from '@tanstack/react-query'\nimport type { Connector, ReconnectErrorType } from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport {\n  type ReconnectData,\n  type ReconnectMutate,\n  type ReconnectMutateAsync,\n  type ReconnectVariables,\n  reconnectMutationOptions,\n} from '@wagmi/core/query'\n\nimport type { ConfigParameter } from '../types/properties.js'\nimport type {\n  UseMutationParameters,\n  UseMutationReturnType,\n} from '../utils/query.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseReconnectParameters<context = unknown> = Compute<\n  ConfigParameter & {\n    mutation?:\n      | UseMutationParameters<\n          ReconnectData,\n          ReconnectErrorType,\n          ReconnectVariables,\n          context\n        >\n      | undefined\n  }\n>\n\nexport type UseReconnectReturnType<context = unknown> = Compute<\n  UseMutationReturnType<\n    ReconnectData,\n    ReconnectErrorType,\n    ReconnectVariables,\n    context\n  > & {\n    connectors: readonly Connector[]\n    reconnect: ReconnectMutate<context>\n    reconnectAsync: ReconnectMutateAsync<context>\n  }\n>\n\n/** https://wagmi.sh/react/api/hooks/useReconnect */\nexport function useReconnect<context = unknown>(\n  parameters: UseReconnectParameters<context> = {},\n): UseReconnectReturnType<context> {\n  const { mutation } = parameters\n\n  const config = useConfig(parameters)\n\n  const mutationOptions = reconnectMutationOptions(config)\n  const { mutate, mutateAsync, ...result } = useMutation({\n    ...mutation,\n    ...mutationOptions,\n  })\n\n  return {\n    ...result,\n    connectors: config.connectors,\n    reconnect: mutate,\n    reconnectAsync: mutateAsync,\n  }\n}\n"],"names":[],"mappings":";;;AAkBA,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAb1C,OAAO,EAKL,wBAAwB,GACzB,MAAM,mBAAmB,CAAA;AAT1B,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAA;AAFnD,YAAY,CAAA;;;;AA+CN,SAAU,YAAY,CAC1B,aAA8C,CAAA,CAAE;IAEhD,MAAM,EAAE,QAAQ,EAAE,GAAG,UAAU,CAAA;IAE/B,MAAM,MAAM,IAAG,6XAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IAEpC,MAAM,eAAe,4XAAG,2BAAA,AAAwB,EAAC,MAAM,CAAC,CAAA;IACxD,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,GAAG,MAAM,EAAE,yRAAG,cAAA,AAAW,EAAC;QACrD,GAAG,QAAQ;QACX,GAAG,eAAe;KACnB,CAAC,CAAA;IAEF,OAAO;QACL,GAAG,MAAM;QACT,UAAU,EAAE,MAAM,CAAC,UAAU;QAC7B,SAAS,EAAE,MAAM;QACjB,cAAc,EAAE,WAAW;KAC5B,CAAA;AACH,CAAC","ignoreList":[0]}},
    {"offset": {"line": 1730, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1736, "column": 0}, "map": {"version":3,"file":"useSendTransaction.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useSendTransaction.ts"],"sourcesContent":["'use client'\n\nimport { useMutation } from '@tanstack/react-query'\nimport type {\n  Config,\n  ResolvedRegister,\n  SendTransactionErrorType,\n} from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport {\n  type SendTransactionData,\n  type SendTransactionMutate,\n  type SendTransactionMutateAsync,\n  type SendTransactionVariables,\n  sendTransactionMutationOptions,\n} from '@wagmi/core/query'\n\nimport type { ConfigParameter } from '../types/properties.js'\nimport type {\n  UseMutationParameters,\n  UseMutationReturnType,\n} from '../utils/query.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseSendTransactionParameters<\n  config extends Config = Config,\n  context = unknown,\n> = Compute<\n  ConfigParameter<config> & {\n    mutation?:\n      | UseMutationParameters<\n          SendTransactionData,\n          SendTransactionErrorType,\n          SendTransactionVariables<config, config['chains'][number]['id']>,\n          context\n        >\n      | undefined\n  }\n>\n\nexport type UseSendTransactionReturnType<\n  config extends Config = Config,\n  context = unknown,\n> = Compute<\n  UseMutationReturnType<\n    SendTransactionData,\n    SendTransactionErrorType,\n    SendTransactionVariables<config, config['chains'][number]['id']>,\n    context\n  > & {\n    sendTransaction: SendTransactionMutate<config, context>\n    sendTransactionAsync: SendTransactionMutateAsync<config, context>\n  }\n>\n\n/** https://wagmi.sh/react/api/hooks/useSendTransaction */\nexport function useSendTransaction<\n  config extends Config = ResolvedRegister['config'],\n  context = unknown,\n>(\n  parameters: UseSendTransactionParameters<config, context> = {},\n): UseSendTransactionReturnType<config, context> {\n  const { mutation } = parameters\n\n  const config = useConfig(parameters)\n\n  const mutationOptions = sendTransactionMutationOptions(config)\n  const { mutate, mutateAsync, ...result } = useMutation({\n    ...mutation,\n    ...mutationOptions,\n  })\n\n  type Return = UseSendTransactionReturnType<config, context>\n  return {\n    ...result,\n    sendTransaction: mutate as Return['sendTransaction'],\n    sendTransactionAsync: mutateAsync as Return['sendTransactionAsync'],\n  }\n}\n"],"names":[],"mappings":";;;AAsBA,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAb1C,OAAO,EAKL,8BAA8B,GAC/B,MAAM,mBAAmB,CAAA;AAb1B,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAA;AAFnD,YAAY,CAAA;;;;AAwDN,SAAU,kBAAkB,CAIhC,aAA4D,CAAA,CAAE;IAE9D,MAAM,EAAE,QAAQ,EAAE,GAAG,UAAU,CAAA;IAE/B,MAAM,MAAM,IAAG,6XAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IAEpC,MAAM,eAAe,kYAAG,iCAAA,AAA8B,EAAC,MAAM,CAAC,CAAA;IAC9D,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,GAAG,MAAM,EAAE,yRAAG,cAAA,AAAW,EAAC;QACrD,GAAG,QAAQ;QACX,GAAG,eAAe;KACnB,CAAC,CAAA;IAGF,OAAO;QACL,GAAG,MAAM;QACT,eAAe,EAAE,MAAmC;QACpD,oBAAoB,EAAE,WAA6C;KACpE,CAAA;AACH,CAAC","ignoreList":[0]}},
    {"offset": {"line": 1760, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1766, "column": 0}, "map": {"version":3,"file":"useSignTypedData.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useSignTypedData.ts"],"sourcesContent":["'use client'\n\nimport { useMutation } from '@tanstack/react-query'\nimport type { SignTypedDataErrorType } from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport {\n  type SignTypedDataData,\n  type SignTypedDataMutate,\n  type SignTypedDataMutateAsync,\n  type SignTypedDataVariables,\n  signTypedDataMutationOptions,\n} from '@wagmi/core/query'\n\nimport type { ConfigParameter } from '../types/properties.js'\nimport type {\n  UseMutationParameters,\n  UseMutationReturnType,\n} from '../utils/query.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseSignTypedDataParameters<context = unknown> = Compute<\n  ConfigParameter & {\n    mutation?:\n      | UseMutationParameters<\n          SignTypedDataData,\n          SignTypedDataErrorType,\n          SignTypedDataVariables,\n          context\n        >\n      | undefined\n  }\n>\n\nexport type UseSignTypedDataReturnType<context = unknown> = Compute<\n  UseMutationReturnType<\n    SignTypedDataData,\n    SignTypedDataErrorType,\n    SignTypedDataVariables,\n    context\n  > & {\n    signTypedData: SignTypedDataMutate<context>\n    signTypedDataAsync: SignTypedDataMutateAsync<context>\n  }\n>\n\n/** https://wagmi.sh/react/api/hooks/useSignTypedData */\nexport function useSignTypedData<context = unknown>(\n  parameters: UseSignTypedDataParameters<context> = {},\n): UseSignTypedDataReturnType<context> {\n  const { mutation } = parameters\n\n  const config = useConfig(parameters)\n\n  const mutationOptions = signTypedDataMutationOptions(config)\n  const { mutate, mutateAsync, ...result } = useMutation({\n    ...mutation,\n    ...mutationOptions,\n  })\n\n  type Return = UseSignTypedDataReturnType<context>\n  return {\n    ...result,\n    signTypedData: mutate as Return['signTypedData'],\n    signTypedDataAsync: mutateAsync as Return['signTypedDataAsync'],\n  }\n}\n"],"names":[],"mappings":";;;AAkBA,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAb1C,OAAO,EAKL,4BAA4B,GAC7B,MAAM,mBAAmB,CAAA;AAT1B,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAA;AAFnD,YAAY,CAAA;;;;AA8CN,SAAU,gBAAgB,CAC9B,aAAkD,CAAA,CAAE;IAEpD,MAAM,EAAE,QAAQ,EAAE,GAAG,UAAU,CAAA;IAE/B,MAAM,MAAM,IAAG,6XAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IAEpC,MAAM,eAAe,gYAAG,+BAAA,AAA4B,EAAC,MAAM,CAAC,CAAA;IAC5D,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,GAAG,MAAM,EAAE,yRAAG,cAAA,AAAW,EAAC;QACrD,GAAG,QAAQ;QACX,GAAG,eAAe;KACnB,CAAC,CAAA;IAGF,OAAO;QACL,GAAG,MAAM;QACT,aAAa,EAAE,MAAiC;QAChD,kBAAkB,EAAE,WAA2C;KAChE,CAAA;AACH,CAAC","ignoreList":[0]}},
    {"offset": {"line": 1790, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1796, "column": 0}, "map": {"version":3,"file":"useSimulateContract.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useSimulateContract.ts"],"sourcesContent":["'use client'\n\nimport type {\n  Config,\n  ResolvedRegister,\n  SimulateContractErrorType,\n} from '@wagmi/core'\nimport {\n  type SimulateContractData,\n  type SimulateContractOptions,\n  type SimulateContractQueryFnData,\n  type SimulateContractQueryKey,\n  simulateContractQueryOptions,\n} from '@wagmi/core/query'\nimport type { Abi, ContractFunctionArgs, ContractFunctionName } from 'viem'\n\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\nimport { useConnectorClient } from './useConnectorClient.js'\n\nexport type UseSimulateContractParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  functionName extends ContractFunctionName<\n    abi,\n    'nonpayable' | 'payable'\n  > = ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'nonpayable' | 'payable',\n    functionName\n  > = ContractFunctionArgs<abi, 'nonpayable' | 'payable', functionName>,\n  config extends Config = Config,\n  chainId extends config['chains'][number]['id'] | undefined = undefined,\n  selectData = SimulateContractData<abi, functionName, args, config, chainId>,\n> = SimulateContractOptions<abi, functionName, args, config, chainId> &\n  ConfigParameter<config> &\n  QueryParameter<\n    SimulateContractQueryFnData<abi, functionName, args, config, chainId>,\n    SimulateContractErrorType,\n    selectData,\n    SimulateContractQueryKey<abi, functionName, args, config, chainId>\n  >\n\nexport type UseSimulateContractReturnType<\n  abi extends Abi | readonly unknown[] = Abi,\n  functionName extends ContractFunctionName<\n    abi,\n    'nonpayable' | 'payable'\n  > = ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'nonpayable' | 'payable',\n    functionName\n  > = ContractFunctionArgs<abi, 'nonpayable' | 'payable', functionName>,\n  config extends Config = Config,\n  chainId extends config['chains'][number]['id'] | undefined = undefined,\n  selectData = SimulateContractData<abi, functionName, args, config, chainId>,\n> = UseQueryReturnType<selectData, SimulateContractErrorType>\n\n/** https://wagmi.sh/react/api/hooks/useSimulateContract */\nexport function useSimulateContract<\n  const abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'nonpayable' | 'payable',\n    functionName\n  >,\n  config extends Config = ResolvedRegister['config'],\n  chainId extends config['chains'][number]['id'] | undefined = undefined,\n  selectData = SimulateContractData<abi, functionName, args, config, chainId>,\n>(\n  parameters: UseSimulateContractParameters<\n    abi,\n    functionName,\n    args,\n    config,\n    chainId,\n    selectData\n  > = {} as any,\n): UseSimulateContractReturnType<\n  abi,\n  functionName,\n  args,\n  config,\n  chainId,\n  selectData\n> {\n  const { abi, address, connector, functionName, query = {} } = parameters\n\n  const config = useConfig(parameters)\n  const { data: connectorClient } = useConnectorClient({\n    config,\n    connector,\n    query: { enabled: parameters.account === undefined },\n  })\n  const chainId = useChainId({ config })\n\n  const options = simulateContractQueryOptions<\n    config,\n    abi,\n    functionName,\n    args,\n    chainId\n  >(config, {\n    ...parameters,\n    account: parameters.account ?? connectorClient?.account,\n    chainId: parameters.chainId ?? chainId,\n  })\n  const enabled = Boolean(\n    abi && address && functionName && (query.enabled ?? true),\n  )\n\n  return useQuery({ ...query, ...options, enabled })\n}\n"],"names":[],"mappings":";;;AAmBA,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAC1C,OAAO,EAAE,kBAAkB,EAAE,MAAM,yBAAyB,CAAA;AAF5D,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAA;AAX5C,OAAO,EAKL,4BAA4B,GAC7B,MAAM,mBAAmB,CAAA;AAI1B,OAAO,EAA2B,QAAQ,EAAE,MAAM,mBAAmB,CAAA;AAjBrE,YAAY,CAAA;;;;;;AA8DN,SAAU,mBAAmB,CAYjC,aAOI,CAAA,CAAS;IASb,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,SAAS,EAAE,YAAY,EAAE,KAAK,GAAG,CAAA,CAAE,EAAE,GAAG,UAAU,CAAA;IAExE,MAAM,MAAM,qXAAG,YAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IACpC,MAAM,EAAE,IAAI,EAAE,eAAe,EAAE,8XAAG,qBAAA,AAAkB,EAAC;QACnD,MAAM;QACN,SAAS;QACT,KAAK,EAAE;YAAE,OAAO,EAAE,UAAU,CAAC,OAAO,KAAK,SAAS;QAAA,CAAE;KACrD,CAAC,CAAA;IACF,MAAM,OAAO,sXAAG,aAAA,AAAU,EAAC;QAAE,MAAM;IAAA,CAAE,CAAC,CAAA;IAEtC,MAAM,OAAO,mYAAG,+BAAA,AAA4B,EAM1C,MAAM,EAAE;QACR,GAAG,UAAU;QACb,OAAO,EAAE,UAAU,CAAC,OAAO,IAAI,eAAe,EAAE,OAAO;QACvD,OAAO,EAAE,UAAU,CAAC,OAAO,IAAI,OAAO;KACvC,CAAC,CAAA;IACF,MAAM,OAAO,GAAG,OAAO,CACrB,GAAG,IAAI,OAAO,IAAI,YAAY,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,CAC1D,CAAA;IAED,qYAAO,WAAA,AAAQ,EAAC;QAAE,GAAG,KAAK;QAAE,GAAG,OAAO;QAAE,OAAO;IAAA,CAAE,CAAC,CAAA;AACpD,CAAC","ignoreList":[0]}},
    {"offset": {"line": 1835, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1841, "column": 0}, "map": {"version":3,"file":"useStorageAt.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useStorageAt.ts"],"sourcesContent":["'use client'\n\nimport type {\n  Config,\n  GetStorageAtErrorType,\n  ResolvedRegister,\n} from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport {\n  type GetStorageAtData,\n  type GetStorageAtOptions,\n  type GetStorageAtQueryKey,\n  getStorageAtQueryOptions,\n} from '@wagmi/core/query'\nimport type { GetStorageAtQueryFnData } from '@wagmi/core/query'\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseStorageAtParameters<\n  config extends Config = Config,\n  selectData = GetStorageAtData,\n> = Compute<\n  GetStorageAtOptions<config> &\n    ConfigParameter<config> &\n    QueryParameter<\n      GetStorageAtQueryFnData,\n      GetStorageAtErrorType,\n      selectData,\n      GetStorageAtQueryKey<config>\n    >\n>\n\nexport type UseStorageAtReturnType<selectData = GetStorageAtData> =\n  UseQueryReturnType<selectData, GetStorageAtErrorType>\n\n/** https://wagmi.sh/react/api/hooks/useStorageAt */\nexport function useStorageAt<\n  config extends Config = ResolvedRegister['config'],\n  selectData = GetStorageAtData,\n>(\n  parameters: UseStorageAtParameters<config, selectData> = {},\n): UseStorageAtReturnType<selectData> {\n  const { address, slot, query = {} } = parameters\n\n  const config = useConfig(parameters)\n  const chainId = useChainId({ config })\n\n  const options = getStorageAtQueryOptions(config, {\n    ...parameters,\n    chainId: parameters.chainId ?? chainId,\n  })\n  const enabled = Boolean(address && slot && (query.enabled ?? true))\n\n  return useQuery({ ...query, ...options, enabled })\n}\n"],"names":[],"mappings":";;;AAkBA,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAD1C,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAA;AAT5C,OAAO,EAIL,wBAAwB,GACzB,MAAM,mBAAmB,CAAA;AAG1B,OAAO,EAA2B,QAAQ,EAAE,MAAM,mBAAmB,CAAA;AAhBrE,YAAY,CAAA;;;;;AAsCN,SAAU,YAAY,CAI1B,aAAyD,CAAA,CAAE;IAE3D,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,GAAG,CAAA,CAAE,EAAE,GAAG,UAAU,CAAA;IAEhD,MAAM,MAAM,IAAG,6XAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IACpC,MAAM,OAAO,sXAAG,aAAA,AAAU,EAAC;QAAE,MAAM;IAAA,CAAE,CAAC,CAAA;IAEtC,MAAM,OAAO,+XAAG,2BAAA,AAAwB,EAAC,MAAM,EAAE;QAC/C,GAAG,UAAU;QACb,OAAO,EAAE,UAAU,CAAC,OAAO,IAAI,OAAO;KACvC,CAAC,CAAA;IACF,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC,CAAA;IAEnE,qYAAO,WAAA,AAAQ,EAAC;QAAE,GAAG,KAAK;QAAE,GAAG,OAAO;QAAE,OAAO;IAAA,CAAE,CAAC,CAAA;AACpD,CAAC","ignoreList":[0]}},
    {"offset": {"line": 1870, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1876, "column": 0}, "map": {"version":3,"file":"useSwitchAccount.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useSwitchAccount.ts"],"sourcesContent":["'use client'\n\nimport { useMutation } from '@tanstack/react-query'\nimport type {\n  Config,\n  Connector,\n  ResolvedRegister,\n  SwitchAccountErrorType,\n} from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport {\n  type SwitchAccountData,\n  type SwitchAccountMutate,\n  type SwitchAccountMutateAsync,\n  type SwitchAccountVariables,\n  switchAccountMutationOptions,\n} from '@wagmi/core/query'\n\nimport type { ConfigParameter } from '../types/properties.js'\nimport type {\n  UseMutationParameters,\n  UseMutationReturnType,\n} from '../utils/query.js'\nimport { useConfig } from './useConfig.js'\nimport { useConnections } from './useConnections.js'\n\nexport type UseSwitchAccountParameters<\n  config extends Config = Config,\n  context = unknown,\n> = Compute<\n  ConfigParameter<config> & {\n    mutation?:\n      | UseMutationParameters<\n          SwitchAccountData<config>,\n          SwitchAccountErrorType,\n          SwitchAccountVariables,\n          context\n        >\n      | undefined\n  }\n>\n\nexport type UseSwitchAccountReturnType<\n  config extends Config = Config,\n  context = unknown,\n> = Compute<\n  UseMutationReturnType<\n    SwitchAccountData<config>,\n    SwitchAccountErrorType,\n    SwitchAccountVariables,\n    context\n  > & {\n    connectors: readonly Connector[]\n    switchAccount: SwitchAccountMutate<config, context>\n    switchAccountAsync: SwitchAccountMutateAsync<config, context>\n  }\n>\n\n/** https://wagmi.sh/react/api/hooks/useSwitchAccount */\nexport function useSwitchAccount<\n  config extends Config = ResolvedRegister['config'],\n  context = unknown,\n>(\n  parameters: UseSwitchAccountParameters<config, context> = {},\n): UseSwitchAccountReturnType<config, context> {\n  const { mutation } = parameters\n\n  const config = useConfig(parameters)\n\n  const mutationOptions = switchAccountMutationOptions(config)\n  const { mutate, mutateAsync, ...result } = useMutation({\n    ...mutation,\n    ...mutationOptions,\n  })\n\n  return {\n    ...result,\n    connectors: useConnections({ config }).map(\n      (connection) => connection.connector,\n    ),\n    switchAccount: mutate,\n    switchAccountAsync: mutateAsync,\n  }\n}\n"],"names":[],"mappings":";;;AAuBA,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAb1C,OAAO,EAKL,4BAA4B,GAC7B,MAAM,mBAAmB,CAAA;AAd1B,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAA;AAsBnD,OAAO,EAAE,cAAc,EAAE,MAAM,qBAAqB,CAAA;AAxBpD,YAAY,CAAA;;;;;AA2DN,SAAU,gBAAgB,CAI9B,aAA0D,CAAA,CAAE;IAE5D,MAAM,EAAE,QAAQ,EAAE,GAAG,UAAU,CAAA;IAE/B,MAAM,MAAM,IAAG,6XAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IAEpC,MAAM,eAAe,gYAAG,+BAAA,AAA4B,EAAC,MAAM,CAAC,CAAA;IAC5D,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,GAAG,MAAM,EAAE,IAAG,mSAAA,AAAW,EAAC;QACrD,GAAG,QAAQ;QACX,GAAG,eAAe;KACnB,CAAC,CAAA;IAEF,OAAO;QACL,GAAG,MAAM;QACT,UAAU,yXAAE,iBAAA,AAAc,EAAC;YAAE,MAAM;QAAA,CAAE,CAAC,CAAC,GAAG,CACxC,CAAC,UAAU,EAAE,CAAG,CAAD,SAAW,CAAC,SAAS,CACrC;QACD,aAAa,EAAE,MAAM;QACrB,kBAAkB,EAAE,WAAW;KAChC,CAAA;AACH,CAAC","ignoreList":[0]}},
    {"offset": {"line": 1905, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1911, "column": 0}, "map": {"version":3,"file":"useToken.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useToken.ts"],"sourcesContent":["'use client'\n\nimport type { Config, GetTokenErrorType, ResolvedRegister } from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport {\n  type GetTokenData,\n  type GetTokenOptions,\n  type GetTokenQueryFnData,\n  type GetTokenQueryKey,\n  getTokenQueryOptions,\n} from '@wagmi/core/query'\n\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseTokenParameters<\n  config extends Config = Config,\n  selectData = GetTokenData,\n> = Compute<\n  GetTokenOptions<config> &\n    ConfigParameter<config> &\n    QueryParameter<\n      GetTokenQueryFnData,\n      GetTokenErrorType,\n      selectData,\n      GetTokenQueryKey<config>\n    >\n>\n\nexport type UseTokenReturnType<selectData = GetTokenData> = UseQueryReturnType<\n  selectData,\n  GetTokenErrorType\n>\n\n/**\n * @deprecated\n *\n * https://wagmi.sh/react/api/hooks/useToken\n */\nexport function useToken<\n  config extends Config = ResolvedRegister['config'],\n  selectData = GetTokenData,\n>(\n  parameters: UseTokenParameters<config, selectData> = {},\n): UseTokenReturnType<selectData> {\n  const { address, query = {} } = parameters\n\n  const config = useConfig(parameters)\n  const chainId = useChainId({ config })\n\n  const options = getTokenQueryOptions(config, {\n    ...parameters,\n    chainId: parameters.chainId ?? chainId,\n  })\n  const enabled = Boolean(address && (query.enabled ?? true))\n\n  return useQuery({ ...query, ...options, enabled })\n}\n"],"names":[],"mappings":";;;AAeA,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAD1C,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAA;AAV5C,OAAO,EAKL,oBAAoB,GACrB,MAAM,mBAAmB,CAAA;AAG1B,OAAO,EAA2B,QAAQ,EAAE,MAAM,mBAAmB,CAAA;AAbrE,YAAY,CAAA;;;;;AAyCN,SAAU,QAAQ,CAItB,aAAqD,CAAA,CAAE;IAEvD,MAAM,EAAE,OAAO,EAAE,KAAK,GAAG,CAAA,CAAE,EAAE,GAAG,UAAU,CAAA;IAE1C,MAAM,MAAM,qXAAG,YAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IACpC,MAAM,OAAO,sXAAG,aAAA,AAAU,EAAC;QAAE,MAAM;IAAA,CAAE,CAAC,CAAA;IAEtC,MAAM,OAAO,IAAG,8YAAA,AAAoB,EAAC,MAAM,EAAE;QAC3C,GAAG,UAAU;QACb,OAAO,EAAE,UAAU,CAAC,OAAO,IAAI,OAAO;KACvC,CAAC,CAAA;IACF,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC,CAAA;IAE3D,qYAAO,WAAA,AAAQ,EAAC;QAAE,GAAG,KAAK;QAAE,GAAG,OAAO;QAAE,OAAO;IAAA,CAAE,CAAC,CAAA;AACpD,CAAC","ignoreList":[0]}},
    {"offset": {"line": 1940, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1946, "column": 0}, "map": {"version":3,"file":"useTransaction.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useTransaction.ts"],"sourcesContent":["'use client'\n\nimport type {\n  Config,\n  GetTransactionErrorType,\n  ResolvedRegister,\n} from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport {\n  type GetTransactionData,\n  type GetTransactionOptions,\n  type GetTransactionQueryFnData,\n  type GetTransactionQueryKey,\n  getTransactionQueryOptions,\n} from '@wagmi/core/query'\n\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseTransactionParameters<\n  config extends Config = Config,\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n  selectData = GetTransactionData<config, chainId>,\n> = Compute<\n  GetTransactionOptions<config, chainId> &\n    ConfigParameter<config> &\n    QueryParameter<\n      GetTransactionQueryFnData<config, chainId>,\n      GetTransactionErrorType,\n      selectData,\n      GetTransactionQueryKey<config, chainId>\n    >\n>\n\nexport type UseTransactionReturnType<\n  config extends Config = Config,\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n  selectData = GetTransactionData<config, chainId>,\n> = UseQueryReturnType<selectData, GetTransactionErrorType>\n\n/** https://wagmi.sh/react/api/hooks/useTransaction */\nexport function useTransaction<\n  config extends Config = ResolvedRegister['config'],\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n  selectData = GetTransactionData<config, chainId>,\n>(\n  parameters: UseTransactionParameters<config, chainId, selectData> = {},\n): UseTransactionReturnType<config, chainId, selectData> {\n  const { blockHash, blockNumber, blockTag, hash, query = {} } = parameters\n\n  const config = useConfig(parameters)\n  const chainId = useChainId({ config })\n\n  const options = getTransactionQueryOptions(config, {\n    ...parameters,\n    chainId: parameters.chainId ?? chainId,\n  })\n  const enabled = Boolean(\n    !(blockHash && blockNumber && blockTag && hash) && (query.enabled ?? true),\n  )\n\n  return useQuery({\n    ...(query as any),\n    ...options,\n    enabled,\n  }) as UseTransactionReturnType<config, chainId, selectData>\n}\n"],"names":[],"mappings":";;;AAmBA,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAD1C,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAA;AAV5C,OAAO,EAKL,0BAA0B,GAC3B,MAAM,mBAAmB,CAAA;AAG1B,OAAO,EAA2B,QAAQ,EAAE,MAAM,mBAAmB,CAAA;AAjBrE,YAAY,CAAA;;;;;AA6CN,SAAU,cAAc,CAM5B,aAAoE,CAAA,CAAE;IAEtE,MAAM,EAAE,SAAS,EAAE,WAAW,EAAE,QAAQ,EAAE,IAAI,EAAE,KAAK,GAAG,CAAA,CAAE,EAAE,GAAG,UAAU,CAAA;IAEzE,MAAM,MAAM,IAAG,6XAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IACpC,MAAM,OAAO,sXAAG,aAAA,AAAU,EAAC;QAAE,MAAM;IAAA,CAAE,CAAC,CAAA;IAEtC,MAAM,OAAO,iYAAG,6BAAA,AAA0B,EAAC,MAAM,EAAE;QACjD,GAAG,UAAU;QACb,OAAO,EAAE,UAAU,CAAC,OAAO,IAAI,OAAO;KACvC,CAAC,CAAA;IACF,MAAM,OAAO,GAAG,OAAO,CACrB,CAAC,CAAC,SAAS,IAAI,WAAW,IAAI,QAAQ,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,CAC3E,CAAA;IAED,qYAAO,WAAA,AAAQ,EAAC;QACd,GAAI,KAAa;QACjB,GAAG,OAAO;QACV,OAAO;KACR,CAA0D,CAAA;AAC7D,CAAC","ignoreList":[0]}},
    {"offset": {"line": 1975, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1981, "column": 0}, "map": {"version":3,"file":"useTransactionConfirmations.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useTransactionConfirmations.ts"],"sourcesContent":["'use client'\n\nimport type {\n  Config,\n  GetTransactionConfirmationsErrorType,\n  ResolvedRegister,\n} from '@wagmi/core'\nimport {\n  type GetTransactionConfirmationsData,\n  type GetTransactionConfirmationsOptions,\n  type GetTransactionConfirmationsQueryFnData,\n  type GetTransactionConfirmationsQueryKey,\n  getTransactionConfirmationsQueryOptions,\n} from '@wagmi/core/query'\n\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseTransactionConfirmationsParameters<\n  config extends Config = Config,\n  chainId extends config['chains'][number]['id'] | undefined = undefined,\n  selectData = GetTransactionConfirmationsData,\n> = GetTransactionConfirmationsOptions<config, chainId> &\n  ConfigParameter<config> &\n  QueryParameter<\n    GetTransactionConfirmationsQueryFnData,\n    GetTransactionConfirmationsErrorType,\n    selectData,\n    GetTransactionConfirmationsQueryKey<config, chainId>\n  >\n\nexport type UseTransactionConfirmationsReturnType<\n  selectData = GetTransactionConfirmationsData,\n> = UseQueryReturnType<selectData, GetTransactionConfirmationsErrorType>\n\n/** https://wagmi.sh/react/api/hooks/useTransactionConfirmations */\nexport function useTransactionConfirmations<\n  config extends Config = ResolvedRegister['config'],\n  chainId extends config['chains'][number]['id'] | undefined = undefined,\n  selectData = GetTransactionConfirmationsData,\n>(\n  parameters: UseTransactionConfirmationsParameters<\n    config,\n    chainId,\n    selectData\n  > = {} as any,\n): UseTransactionConfirmationsReturnType<selectData> {\n  const { hash, transactionReceipt, query = {} } = parameters\n\n  const config = useConfig(parameters)\n  const chainId = useChainId({ config })\n\n  const options = getTransactionConfirmationsQueryOptions(config, {\n    ...parameters,\n    chainId: parameters.chainId ?? chainId,\n  })\n  const enabled = Boolean(\n    !(hash && transactionReceipt) &&\n      (hash || transactionReceipt) &&\n      (query.enabled ?? true),\n  )\n\n  return useQuery({ ...query, ...options, enabled })\n}\n"],"names":[],"mappings":";;;AAkBA,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAD1C,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAA;AAV5C,OAAO,EAKL,uCAAuC,GACxC,MAAM,mBAAmB,CAAA;AAG1B,OAAO,EAA2B,QAAQ,EAAE,MAAM,mBAAmB,CAAA;AAhBrE,YAAY,CAAA;;;;;AAsCN,SAAU,2BAA2B,CAKzC,aAII,CAAA,CAAS;IAEb,MAAM,EAAE,IAAI,EAAE,kBAAkB,EAAE,KAAK,GAAG,CAAA,CAAE,EAAE,GAAG,UAAU,CAAA;IAE3D,MAAM,MAAM,IAAG,6XAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IACpC,MAAM,OAAO,sXAAG,aAAA,AAAU,EAAC;QAAE,MAAM;IAAA,CAAE,CAAC,CAAA;IAEtC,MAAM,OAAO,8YAAG,0CAAA,AAAuC,EAAC,MAAM,EAAE;QAC9D,GAAG,UAAU;QACb,OAAO,EAAE,UAAU,CAAC,OAAO,IAAI,OAAO;KACvC,CAAC,CAAA;IACF,MAAM,OAAO,GAAG,OAAO,CACrB,CAAC,CAAC,IAAI,IAAI,kBAAkB,CAAC,IAC3B,CAAC,IAAI,IAAI,kBAAkB,CAAC,IAC5B,CAAC,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,CAC1B,CAAA;IAED,qYAAO,WAAA,AAAQ,EAAC;QAAE,GAAG,KAAK;QAAE,GAAG,OAAO;QAAE,OAAO;IAAA,CAAE,CAAC,CAAA;AACpD,CAAC","ignoreList":[0]}},
    {"offset": {"line": 2010, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2016, "column": 0}, "map": {"version":3,"file":"useTransactionCount.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useTransactionCount.ts"],"sourcesContent":["'use client'\n\nimport type {\n  Config,\n  GetTransactionCountErrorType,\n  ResolvedRegister,\n} from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport type { GetTransactionCountQueryFnData } from '@wagmi/core/query'\nimport {\n  type GetTransactionCountData,\n  type GetTransactionCountOptions,\n  type GetTransactionCountQueryKey,\n  getTransactionCountQueryOptions,\n} from '@wagmi/core/query'\n\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseTransactionCountParameters<\n  config extends Config = Config,\n  selectData = GetTransactionCountData,\n> = Compute<\n  GetTransactionCountOptions<config> &\n    ConfigParameter<config> &\n    QueryParameter<\n      GetTransactionCountQueryFnData,\n      GetTransactionCountErrorType,\n      selectData,\n      GetTransactionCountQueryKey<config>\n    >\n>\n\nexport type UseTransactionCountReturnType<\n  selectData = GetTransactionCountData,\n> = UseQueryReturnType<selectData, GetTransactionCountErrorType>\n\n/** https://wagmi.sh/react/api/hooks/useTransactionCount */\nexport function useTransactionCount<\n  config extends Config = ResolvedRegister['config'],\n  selectData = GetTransactionCountData,\n>(\n  parameters: UseTransactionCountParameters<config, selectData> = {},\n): UseTransactionCountReturnType<selectData> {\n  const { address, query = {} } = parameters\n\n  const config = useConfig(parameters)\n  const chainId = useChainId({ config })\n\n  const options = getTransactionCountQueryOptions(config, {\n    ...parameters,\n    chainId: parameters.chainId ?? chainId,\n  })\n  const enabled = Boolean(address && (query.enabled ?? true))\n\n  return useQuery({ ...query, ...options, enabled })\n}\n"],"names":[],"mappings":";;;AAmBA,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAD1C,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAA;AAT5C,OAAO,EAIL,+BAA+B,GAChC,MAAM,mBAAmB,CAAA;AAG1B,OAAO,EAA2B,QAAQ,EAAE,MAAM,mBAAmB,CAAA;AAjBrE,YAAY,CAAA;;;;;AAwCN,SAAU,mBAAmB,CAIjC,aAAgE,CAAA,CAAE;IAElE,MAAM,EAAE,OAAO,EAAE,KAAK,GAAG,CAAA,CAAE,EAAE,GAAG,UAAU,CAAA;IAE1C,MAAM,MAAM,qXAAG,YAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IACpC,MAAM,OAAO,sXAAG,aAAA,AAAU,EAAC;QAAE,MAAM;IAAA,CAAE,CAAC,CAAA;IAEtC,MAAM,OAAO,IAAG,oaAAA,AAA+B,EAAC,MAAM,EAAE;QACtD,GAAG,UAAU;QACb,OAAO,EAAE,UAAU,CAAC,OAAO,IAAI,OAAO;KACvC,CAAC,CAAA;IACF,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC,CAAA;IAE3D,qYAAO,WAAA,AAAQ,EAAC;QAAE,GAAG,KAAK;QAAE,GAAG,OAAO;QAAE,OAAO;IAAA,CAAE,CAAC,CAAA;AACpD,CAAC","ignoreList":[0]}},
    {"offset": {"line": 2045, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2051, "column": 0}, "map": {"version":3,"file":"useTransactionReceipt.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useTransactionReceipt.ts"],"sourcesContent":["'use client'\n\nimport type {\n  Config,\n  GetTransactionReceiptErrorType,\n  ResolvedRegister,\n} from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport {\n  type GetTransactionReceiptData,\n  type GetTransactionReceiptOptions,\n  type GetTransactionReceiptQueryKey,\n  getTransactionReceiptQueryOptions,\n} from '@wagmi/core/query'\nimport type { GetTransactionReceiptQueryFnData } from '@wagmi/core/query'\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseTransactionReceiptParameters<\n  config extends Config = Config,\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n  selectData = GetTransactionReceiptData<config, chainId>,\n> = Compute<\n  GetTransactionReceiptOptions<config, chainId> &\n    ConfigParameter<config> &\n    QueryParameter<\n      GetTransactionReceiptQueryFnData<config, chainId>,\n      GetTransactionReceiptErrorType,\n      selectData,\n      GetTransactionReceiptQueryKey<config, chainId>\n    >\n>\n\nexport type UseTransactionReceiptReturnType<\n  config extends Config = Config,\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n  selectData = GetTransactionReceiptData<config, chainId>,\n> = UseQueryReturnType<selectData, GetTransactionReceiptErrorType>\n\n/** https://wagmi.sh/react/api/hooks/useTransactionReceipt */\nexport function useTransactionReceipt<\n  config extends Config = ResolvedRegister['config'],\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n  selectData = GetTransactionReceiptData<config, chainId>,\n>(\n  parameters: UseTransactionReceiptParameters<config, chainId, selectData> = {},\n): UseTransactionReceiptReturnType<config, chainId, selectData> {\n  const { hash, query = {} } = parameters\n\n  const config = useConfig(parameters)\n  const chainId = useChainId({ config })\n\n  const options = getTransactionReceiptQueryOptions(config, {\n    ...parameters,\n    chainId: parameters.chainId ?? chainId,\n  })\n  const enabled = Boolean(hash && (query.enabled ?? true))\n\n  return useQuery({\n    ...(query as any),\n    ...options,\n    enabled,\n  }) as UseTransactionReceiptReturnType<config, chainId, selectData>\n}\n"],"names":[],"mappings":";;;AAkBA,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAD1C,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAA;AAT5C,OAAO,EAIL,iCAAiC,GAClC,MAAM,mBAAmB,CAAA;AAG1B,OAAO,EAA2B,QAAQ,EAAE,MAAM,mBAAmB,CAAA;AAhBrE,YAAY,CAAA;;;;;AA4CN,SAAU,qBAAqB,CAMnC,aAA2E,CAAA,CAAE;IAE7E,MAAM,EAAE,IAAI,EAAE,KAAK,GAAG,CAAA,CAAE,EAAE,GAAG,UAAU,CAAA;IAEvC,MAAM,MAAM,qXAAG,YAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IACpC,MAAM,OAAO,sXAAG,aAAA,AAAU,EAAC;QAAE,MAAM;IAAA,CAAE,CAAC,CAAA;IAEtC,MAAM,OAAO,IAAG,waAAA,AAAiC,EAAC,MAAM,EAAE;QACxD,GAAG,UAAU;QACb,OAAO,EAAE,UAAU,CAAC,OAAO,IAAI,OAAO;KACvC,CAAC,CAAA;IACF,MAAM,OAAO,GAAG,OAAO,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC,CAAA;IAExD,qYAAO,WAAA,AAAQ,EAAC;QACd,GAAI,KAAa;QACjB,GAAG,OAAO;QACV,OAAO;KACR,CAAiE,CAAA;AACpE,CAAC","ignoreList":[0]}},
    {"offset": {"line": 2080, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2086, "column": 0}, "map": {"version":3,"file":"useVerifyMessage.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useVerifyMessage.ts"],"sourcesContent":["'use client'\n\nimport type {\n  Config,\n  ResolvedRegister,\n  VerifyMessageErrorType,\n} from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport {\n  type VerifyMessageData,\n  type VerifyMessageOptions,\n  type VerifyMessageQueryKey,\n  verifyMessageQueryOptions,\n} from '@wagmi/core/query'\nimport type { VerifyMessageQueryFnData } from '@wagmi/core/query'\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseVerifyMessageParameters<\n  config extends Config = Config,\n  selectData = VerifyMessageData,\n> = Compute<\n  VerifyMessageOptions<config> &\n    ConfigParameter<config> &\n    QueryParameter<\n      VerifyMessageQueryFnData,\n      VerifyMessageErrorType,\n      selectData,\n      VerifyMessageQueryKey<config>\n    >\n>\n\nexport type UseVerifyMessageReturnType<selectData = VerifyMessageData> =\n  UseQueryReturnType<selectData, VerifyMessageErrorType>\n\n/** https://wagmi.sh/react/api/hooks/useVerifyMessage */\nexport function useVerifyMessage<\n  config extends Config = ResolvedRegister['config'],\n  selectData = VerifyMessageData,\n>(\n  parameters: UseVerifyMessageParameters<config, selectData> = {},\n): UseVerifyMessageReturnType<selectData> {\n  const { address, message, signature, query = {} } = parameters\n\n  const config = useConfig(parameters)\n  const chainId = useChainId({ config })\n\n  const options = verifyMessageQueryOptions(config, {\n    ...parameters,\n    chainId: parameters.chainId ?? chainId,\n  })\n  const enabled = Boolean(\n    address && message && signature && (query.enabled ?? true),\n  )\n\n  return useQuery({ ...query, ...options, enabled })\n}\n"],"names":[],"mappings":";;;AAkBA,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAD1C,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAA;AAT5C,OAAO,EAIL,yBAAyB,GAC1B,MAAM,mBAAmB,CAAA;AAG1B,OAAO,EAA2B,QAAQ,EAAE,MAAM,mBAAmB,CAAA;AAhBrE,YAAY,CAAA;;;;;AAsCN,SAAU,gBAAgB,CAI9B,aAA6D,CAAA,CAAE;IAE/D,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,KAAK,GAAG,CAAA,CAAE,EAAE,GAAG,UAAU,CAAA;IAE9D,MAAM,MAAM,qXAAG,YAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IACpC,MAAM,OAAO,sXAAG,aAAA,AAAU,EAAC;QAAE,MAAM;IAAA,CAAE,CAAC,CAAA;IAEtC,MAAM,OAAO,IAAG,wZAAA,AAAyB,EAAC,MAAM,EAAE;QAChD,GAAG,UAAU;QACb,OAAO,EAAE,UAAU,CAAC,OAAO,IAAI,OAAO;KACvC,CAAC,CAAA;IACF,MAAM,OAAO,GAAG,OAAO,CACrB,OAAO,IAAI,OAAO,IAAI,SAAS,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,CAC3D,CAAA;IAED,qYAAO,WAAA,AAAQ,EAAC;QAAE,GAAG,KAAK;QAAE,GAAG,OAAO;QAAE,OAAO;IAAA,CAAE,CAAC,CAAA;AACpD,CAAC","ignoreList":[0]}},
    {"offset": {"line": 2115, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2121, "column": 0}, "map": {"version":3,"file":"useVerifyTypedData.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useVerifyTypedData.ts"],"sourcesContent":["'use client'\n\nimport type {\n  Config,\n  ResolvedRegister,\n  VerifyTypedDataErrorType,\n} from '@wagmi/core'\nimport {\n  type VerifyTypedDataData,\n  type VerifyTypedDataOptions,\n  type VerifyTypedDataQueryKey,\n  verifyTypedDataQueryOptions,\n} from '@wagmi/core/query'\nimport type { VerifyTypedDataQueryFnData } from '@wagmi/core/query'\nimport type { TypedData } from 'viem'\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseVerifyTypedDataParameters<\n  typedData extends TypedData | Record<string, unknown> = TypedData,\n  primaryType extends keyof typedData | 'EIP712Domain' = keyof typedData,\n  config extends Config = Config,\n  selectData = VerifyTypedDataData,\n> = VerifyTypedDataOptions<typedData, primaryType, config> &\n  ConfigParameter<config> &\n  QueryParameter<\n    VerifyTypedDataQueryFnData,\n    VerifyTypedDataErrorType,\n    selectData,\n    VerifyTypedDataQueryKey<typedData, primaryType, config>\n  >\n\nexport type UseVerifyTypedDataReturnType<selectData = VerifyTypedDataData> =\n  UseQueryReturnType<selectData, VerifyTypedDataErrorType>\n\n/** https://wagmi.sh/react/api/hooks/useVerifyTypedData */\nexport function useVerifyTypedData<\n  const typedData extends TypedData | Record<string, unknown>,\n  primaryType extends keyof typedData | 'EIP712Domain',\n  config extends Config = ResolvedRegister['config'],\n  selectData = VerifyTypedDataData,\n>(\n  parameters: UseVerifyTypedDataParameters<\n    typedData,\n    primaryType,\n    config,\n    selectData\n  > = {} as any,\n): UseVerifyTypedDataReturnType<selectData> {\n  const {\n    address,\n    message,\n    primaryType,\n    signature,\n    types,\n    query = {},\n  } = parameters\n\n  const config = useConfig(parameters)\n  const chainId = useChainId({ config })\n\n  const options = verifyTypedDataQueryOptions<config, typedData, primaryType>(\n    config,\n    {\n      ...parameters,\n      chainId: parameters.chainId ?? chainId,\n    },\n  )\n  const enabled = Boolean(\n    address &&\n      message &&\n      primaryType &&\n      signature &&\n      types &&\n      (query.enabled ?? true),\n  )\n\n  return useQuery({ ...query, ...options, enabled })\n}\n"],"names":[],"mappings":";;;AAkBA,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAD1C,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAA;AAV5C,OAAO,EAIL,2BAA2B,GAC5B,MAAM,mBAAmB,CAAA;AAI1B,OAAO,EAA2B,QAAQ,EAAE,MAAM,mBAAmB,CAAA;AAhBrE,YAAY,CAAA;;;;;AAsCN,SAAU,kBAAkB,CAMhC,aAKI,CAAA,CAAS;IAEb,MAAM,EACJ,OAAO,EACP,OAAO,EACP,WAAW,EACX,SAAS,EACT,KAAK,EACL,KAAK,GAAG,CAAA,CAAE,EACX,GAAG,UAAU,CAAA;IAEd,MAAM,MAAM,qXAAG,YAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IACpC,MAAM,OAAO,sXAAG,aAAA,AAAU,EAAC;QAAE,MAAM;IAAA,CAAE,CAAC,CAAA;IAEtC,MAAM,OAAO,IAAG,4ZAAA,AAA2B,EACzC,MAAM,EACN;QACE,GAAG,UAAU;QACb,OAAO,EAAE,UAAU,CAAC,OAAO,IAAI,OAAO;KACvC,CACF,CAAA;IACD,MAAM,OAAO,GAAG,OAAO,CACrB,OAAO,IACL,OAAO,IACP,WAAW,IACX,SAAS,IACT,KAAK,IACL,CAAC,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,CAC1B,CAAA;IAED,qYAAO,WAAA,AAAQ,EAAC;QAAE,GAAG,KAAK;QAAE,GAAG,OAAO;QAAE,OAAO;IAAA,CAAE,CAAC,CAAA;AACpD,CAAC","ignoreList":[0]}},
    {"offset": {"line": 2150, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2156, "column": 0}, "map": {"version":3,"file":"useWaitForTransactionReceipt.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useWaitForTransactionReceipt.ts"],"sourcesContent":["'use client'\n\nimport type {\n  Config,\n  ResolvedRegister,\n  WaitForTransactionReceiptErrorType,\n} from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport {\n  type WaitForTransactionReceiptData,\n  type WaitForTransactionReceiptOptions,\n  type WaitForTransactionReceiptQueryFnData,\n  type WaitForTransactionReceiptQueryKey,\n  waitForTransactionReceiptQueryOptions,\n} from '@wagmi/core/query'\n\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseWaitForTransactionReceiptParameters<\n  config extends Config = Config,\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n  selectData = WaitForTransactionReceiptData<config, chainId>,\n> = Compute<\n  WaitForTransactionReceiptOptions<config, chainId> &\n    ConfigParameter<config> &\n    QueryParameter<\n      WaitForTransactionReceiptQueryFnData<config, chainId>,\n      WaitForTransactionReceiptErrorType,\n      selectData,\n      WaitForTransactionReceiptQueryKey<config, chainId>\n    >\n>\n\nexport type UseWaitForTransactionReceiptReturnType<\n  config extends Config = Config,\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n  selectData = WaitForTransactionReceiptData<config, chainId>,\n> = UseQueryReturnType<selectData, WaitForTransactionReceiptErrorType>\n\n/** https://wagmi.sh/react/api/hooks/useWaitForTransactionReceipt */\nexport function useWaitForTransactionReceipt<\n  config extends Config = ResolvedRegister['config'],\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n  selectData = WaitForTransactionReceiptData<config, chainId>,\n>(\n  parameters: UseWaitForTransactionReceiptParameters<\n    config,\n    chainId,\n    selectData\n  > = {},\n): UseWaitForTransactionReceiptReturnType<config, chainId, selectData> {\n  const { hash, query = {} } = parameters\n\n  const config = useConfig(parameters)\n  const chainId = useChainId({ config })\n\n  const options = waitForTransactionReceiptQueryOptions(config, {\n    ...parameters,\n    chainId: parameters.chainId ?? chainId,\n  })\n  const enabled = Boolean(hash && (query.enabled ?? true))\n\n  return useQuery({\n    ...(query as any),\n    ...options,\n    enabled,\n  }) as UseWaitForTransactionReceiptReturnType<config, chainId, selectData>\n}\n"],"names":[],"mappings":";;;AAmBA,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAD1C,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAA;AAV5C,OAAO,EAKL,qCAAqC,GACtC,MAAM,mBAAmB,CAAA;AAG1B,OAAO,EAA2B,QAAQ,EAAE,MAAM,mBAAmB,CAAA;AAjBrE,YAAY,CAAA;;;;;AA6CN,SAAU,4BAA4B,CAM1C,aAII,CAAA,CAAE;IAEN,MAAM,EAAE,IAAI,EAAE,KAAK,GAAG,CAAA,CAAE,EAAE,GAAG,UAAU,CAAA;IAEvC,MAAM,MAAM,qXAAG,YAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IACpC,MAAM,OAAO,sXAAG,aAAA,AAAU,EAAC;QAAE,MAAM;IAAA,CAAE,CAAC,CAAA;IAEtC,MAAM,OAAO,IAAG,gbAAA,AAAqC,EAAC,MAAM,EAAE;QAC5D,GAAG,UAAU;QACb,OAAO,EAAE,UAAU,CAAC,OAAO,IAAI,OAAO;KACvC,CAAC,CAAA;IACF,MAAM,OAAO,GAAG,OAAO,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC,CAAA;IAExD,qYAAO,WAAA,AAAQ,EAAC;QACd,GAAI,KAAa;QACjB,GAAG,OAAO;QACV,OAAO;KACR,CAAwE,CAAA;AAC3E,CAAC","ignoreList":[0]}},
    {"offset": {"line": 2185, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2191, "column": 0}, "map": {"version":3,"file":"useWalletClient.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useWalletClient.ts"],"sourcesContent":["'use client'\n\n// Almost identical implementation to `useConnectorClient` (except for return type)\n// Should update both in tandem\n\nimport { useQueryClient } from '@tanstack/react-query'\nimport type {\n  Config,\n  GetWalletClientErrorType,\n  ResolvedRegister,\n} from '@wagmi/core'\nimport type { Compute, Omit } from '@wagmi/core/internal'\nimport {\n  type GetWalletClientData,\n  type GetWalletClientOptions,\n  type GetWalletClientQueryFnData,\n  type GetWalletClientQueryKey,\n  getWalletClientQueryOptions,\n} from '@wagmi/core/query'\nimport { useEffect, useRef } from 'react'\n\nimport type { ConfigParameter } from '../types/properties.js'\nimport {\n  type UseQueryParameters,\n  type UseQueryReturnType,\n  useQuery,\n} from '../utils/query.js'\nimport { useAccount } from './useAccount.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseWalletClientParameters<\n  config extends Config = Config,\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n  selectData = GetWalletClientData<config, chainId>,\n> = Compute<\n  GetWalletClientOptions<config, chainId> &\n    ConfigParameter<config> & {\n      query?:\n        | Compute<\n            Omit<\n              UseQueryParameters<\n                GetWalletClientQueryFnData<config, chainId>,\n                GetWalletClientErrorType,\n                selectData,\n                GetWalletClientQueryKey<config, chainId>\n              >,\n              'gcTime' | 'staleTime'\n            >\n          >\n        | undefined\n    }\n>\n\nexport type UseWalletClientReturnType<\n  config extends Config = Config,\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n  selectData = GetWalletClientData<config, chainId>,\n> = UseQueryReturnType<selectData, GetWalletClientErrorType>\n\n/** https://wagmi.sh/react/api/hooks/useWalletClient */\nexport function useWalletClient<\n  config extends Config = ResolvedRegister['config'],\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n  selectData = GetWalletClientData<config, chainId>,\n>(\n  parameters: UseWalletClientParameters<config, chainId, selectData> = {},\n): UseWalletClientReturnType<config, chainId, selectData> {\n  const { query = {}, ...rest } = parameters\n\n  const config = useConfig(rest)\n  const queryClient = useQueryClient()\n  const { address, connector, status } = useAccount({ config })\n  const chainId = useChainId({ config })\n  const activeConnector = parameters.connector ?? connector\n\n  const { queryKey, ...options } = getWalletClientQueryOptions<config, chainId>(\n    config,\n    {\n      ...parameters,\n      chainId: parameters.chainId ?? chainId,\n      connector: parameters.connector ?? connector,\n    },\n  )\n  const enabled = Boolean(\n    (status === 'connected' ||\n      (status === 'reconnecting' && activeConnector?.getProvider)) &&\n      (query.enabled ?? true),\n  )\n\n  const addressRef = useRef(address)\n  // biome-ignore lint/correctness/useExhaustiveDependencies: `queryKey` not required\n  useEffect(() => {\n    const previousAddress = addressRef.current\n    if (!address && previousAddress) {\n      // remove when account is disconnected\n      queryClient.removeQueries({ queryKey })\n      addressRef.current = undefined\n    } else if (address !== previousAddress) {\n      // invalidate when address changes\n      queryClient.invalidateQueries({ queryKey })\n      addressRef.current = address\n    }\n  }, [address, queryClient])\n\n  return useQuery({\n    ...query,\n    ...options,\n    queryKey,\n    enabled,\n    staleTime: Number.POSITIVE_INFINITY,\n  } as any) as UseWalletClientReturnType<config, chainId, selectData>\n}\n"],"names":[],"mappings":";;;AAmBA,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,OAAO,CAAA;AAUzC,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AA3B1C,mFAAmF;AACnF,+BAA+B;AAE/B,OAAO,EAAE,cAAc,EAAE,MAAM,uBAAuB,CAAA;AAsBtD,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAA;AAC5C,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAA;AAhB5C,OAAO,EAKL,2BAA2B,GAC5B,MAAM,mBAAmB,CAAA;AAI1B,OAAO,EAGL,QAAQ,GACT,MAAM,mBAAmB,CAAA;AA1B1B,YAAY,CAAA;;;;;;;;AA+DN,SAAU,eAAe,CAM7B,aAAqE,CAAA,CAAE;IAEvE,MAAM,EAAE,KAAK,GAAG,CAAA,CAAE,EAAE,GAAG,IAAI,EAAE,GAAG,UAAU,CAAA;IAE1C,MAAM,MAAM,qXAAG,YAAA,AAAS,EAAC,IAAI,CAAC,CAAA;IAC9B,MAAM,WAAW,GAAG,+SAAc,AAAd,EAAgB,CAAA;IACpC,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,sXAAG,aAAA,AAAU,EAAC;QAAE,MAAM;IAAA,CAAE,CAAC,CAAA;IAC7D,MAAM,OAAO,sXAAG,aAAA,AAAU,EAAC;QAAE,MAAM;IAAA,CAAE,CAAC,CAAA;IACtC,MAAM,eAAe,GAAG,UAAU,CAAC,SAAS,IAAI,SAAS,CAAA;IAEzD,MAAM,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,IAAG,4ZAAA,AAA2B,EAC1D,MAAM,EACN;QACE,GAAG,UAAU;QACb,OAAO,EAAE,UAAU,CAAC,OAAO,IAAI,OAAO;QACtC,SAAS,EAAE,UAAU,CAAC,SAAS,IAAI,SAAS;KAC7C,CACF,CAAA;IACD,MAAM,OAAO,GAAG,OAAO,CACrB,CAAC,MAAM,KAAK,WAAW,IACpB,MAAM,KAAK,cAAc,IAAI,eAAe,EAAE,WAAW,AAAC,CAAC,IAC5D,CAAC,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,CAC1B,CAAA;IAED,MAAM,UAAU,sUAAG,SAAA,AAAM,EAAC,OAAO,CAAC,CAAA;IAClC,mFAAmF;KACnF,8UAAA,AAAS;qCAAC,GAAG,EAAE;YACb,MAAM,eAAe,GAAG,UAAU,CAAC,OAAO,CAAA;YAC1C,IAAI,CAAC,OAAO,IAAI,eAAe,EAAE,CAAC;gBAChC,sCAAsC;gBACtC,WAAW,CAAC,aAAa,CAAC;oBAAE,QAAQ;gBAAA,CAAE,CAAC,CAAA;gBACvC,UAAU,CAAC,OAAO,GAAG,SAAS,CAAA;YAChC,CAAC,MAAM,IAAI,OAAO,KAAK,eAAe,EAAE,CAAC;gBACvC,kCAAkC;gBAClC,WAAW,CAAC,iBAAiB,CAAC;oBAAE,QAAQ;gBAAA,CAAE,CAAC,CAAA;gBAC3C,UAAU,CAAC,OAAO,GAAG,OAAO,CAAA;YAC9B,CAAC;QACH,CAAC;oCAAE;QAAC,OAAO;QAAE,WAAW;KAAC,CAAC,CAAA;IAE1B,qYAAO,WAAA,AAAQ,EAAC;QACd,GAAG,KAAK;QACR,GAAG,OAAO;QACV,QAAQ;QACR,OAAO;QACP,SAAS,EAAE,MAAM,CAAC,iBAAiB;KAC7B,CAA2D,CAAA;AACrE,CAAC","ignoreList":[0]}},
    {"offset": {"line": 2259, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2265, "column": 0}, "map": {"version":3,"file":"useWatchAsset.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useWatchAsset.ts"],"sourcesContent":["'use client'\n\nimport { useMutation } from '@tanstack/react-query'\nimport type { WatchAssetErrorType } from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport {\n  type WatchAssetData,\n  type WatchAssetMutate,\n  type WatchAssetMutateAsync,\n  type WatchAssetVariables,\n  watchAssetMutationOptions,\n} from '@wagmi/core/query'\n\nimport type { ConfigParameter } from '../types/properties.js'\nimport type {\n  UseMutationParameters,\n  UseMutationReturnType,\n} from '../utils/query.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseWatchAssetParameters<context = unknown> = Compute<\n  ConfigParameter & {\n    mutation?:\n      | UseMutationParameters<\n          WatchAssetData,\n          WatchAssetErrorType,\n          WatchAssetVariables,\n          context\n        >\n      | undefined\n  }\n>\n\nexport type UseWatchAssetReturnType<context = unknown> = Compute<\n  UseMutationReturnType<\n    WatchAssetData,\n    WatchAssetErrorType,\n    WatchAssetVariables,\n    context\n  > & {\n    watchAsset: WatchAssetMutate<context>\n    watchAssetAsync: WatchAssetMutateAsync<context>\n  }\n>\n\n/** https://wagmi.sh/react/api/hooks/useWatchAsset */\nexport function useWatchAsset<context = unknown>(\n  parameters: UseWatchAssetParameters<context> = {},\n): UseWatchAssetReturnType<context> {\n  const { mutation } = parameters\n\n  const config = useConfig(parameters)\n\n  const mutationOptions = watchAssetMutationOptions(config)\n  const { mutate, mutateAsync, ...result } = useMutation({\n    ...mutation,\n    ...mutationOptions,\n  })\n\n  return {\n    ...result,\n    watchAsset: mutate,\n    watchAssetAsync: mutateAsync,\n  }\n}\n"],"names":[],"mappings":";;;AAkBA,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAb1C,OAAO,EAKL,yBAAyB,GAC1B,MAAM,mBAAmB,CAAA;AAT1B,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAA;AAFnD,YAAY,CAAA;;;;AA8CN,SAAU,aAAa,CAC3B,aAA+C,CAAA,CAAE;IAEjD,MAAM,EAAE,QAAQ,EAAE,GAAG,UAAU,CAAA;IAE/B,MAAM,MAAM,IAAG,6XAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IAEpC,MAAM,eAAe,6XAAG,4BAAA,AAAyB,EAAC,MAAM,CAAC,CAAA;IACzD,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,GAAG,MAAM,EAAE,yRAAG,cAAA,AAAW,EAAC;QACrD,GAAG,QAAQ;QACX,GAAG,eAAe;KACnB,CAAC,CAAA;IAEF,OAAO;QACL,GAAG,MAAM;QACT,UAAU,EAAE,MAAM;QAClB,eAAe,EAAE,WAAW;KAC7B,CAAA;AACH,CAAC","ignoreList":[0]}},
    {"offset": {"line": 2289, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2295, "column": 0}, "map": {"version":3,"file":"useWatchContractEvent.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useWatchContractEvent.ts"],"sourcesContent":["'use client'\n\nimport {\n  type Config,\n  type ResolvedRegister,\n  type WatchContractEventParameters,\n  watchContractEvent,\n} from '@wagmi/core'\nimport type { UnionCompute, UnionExactPartial } from '@wagmi/core/internal'\nimport { useEffect } from 'react'\nimport type { Abi, ContractEventName } from 'viem'\n\nimport type { ConfigParameter, EnabledParameter } from '../types/properties.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseWatchContractEventParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  eventName extends ContractEventName<abi> = ContractEventName<abi>,\n  strict extends boolean | undefined = undefined,\n  config extends Config = Config,\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n> = UnionCompute<\n  UnionExactPartial<\n    WatchContractEventParameters<abi, eventName, strict, config, chainId>\n  > &\n    ConfigParameter<config> &\n    EnabledParameter\n>\n\nexport type UseWatchContractEventReturnType = void\n\n/** https://wagmi.sh/react/api/hooks/useWatchContractEvent */\nexport function useWatchContractEvent<\n  const abi extends Abi | readonly unknown[],\n  eventName extends ContractEventName<abi>,\n  strict extends boolean | undefined = undefined,\n  config extends Config = ResolvedRegister['config'],\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n>(\n  parameters: UseWatchContractEventParameters<\n    abi,\n    eventName,\n    strict,\n    config,\n    chainId\n  > = {} as any,\n): UseWatchContractEventReturnType {\n  const { enabled = true, onLogs, config: _, ...rest } = parameters\n\n  const config = useConfig(parameters)\n  const configChainId = useChainId({ config })\n  const chainId = parameters.chainId ?? configChainId\n\n  // TODO(react@19): cleanup\n  // biome-ignore lint/correctness/useExhaustiveDependencies: `rest` changes every render so only including properties in dependency array\n  useEffect(() => {\n    if (!enabled) return\n    if (!onLogs) return\n    return watchContractEvent(config, {\n      ...(rest as any),\n      chainId,\n      onLogs,\n    })\n  }, [\n    chainId,\n    config,\n    enabled,\n    onLogs,\n    ///\n    rest.abi,\n    rest.address,\n    rest.args,\n    rest.batch,\n    rest.eventName,\n    rest.fromBlock,\n    rest.onError,\n    rest.poll,\n    rest.pollingInterval,\n    rest.strict,\n    rest.syncConnectedChain,\n  ])\n}\n"],"names":[],"mappings":";;;AASA,OAAO,EAAE,SAAS,EAAE,MAAM,OAAO,CAAA;AAKjC,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAD1C,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAA;AAX5C,OAAO,EAIL,kBAAkB,GACnB,MAAM,aAAa,CAAA;AAPpB,YAAY,CAAA;;;;;AAkCN,SAAU,qBAAqB,CAQnC,aAMI,CAAA,CAAS;IAEb,MAAM,EAAE,OAAO,GAAG,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,EAAE,GAAG,IAAI,EAAE,GAAG,UAAU,CAAA;IAEjE,MAAM,MAAM,qXAAG,YAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IACpC,MAAM,aAAa,IAAG,+XAAA,AAAU,EAAC;QAAE,MAAM;IAAA,CAAE,CAAC,CAAA;IAC5C,MAAM,OAAO,GAAG,UAAU,CAAC,OAAO,IAAI,aAAa,CAAA;IAEnD,0BAA0B;IAC1B,wIAAwI;uUACxI,YAAA,AAAS;2CAAC,GAAG,EAAE;YACb,IAAI,CAAC,OAAO,EAAE,OAAM;YACpB,IAAI,CAAC,MAAM,EAAE,OAAM;YACnB,2YAAO,qBAAA,AAAkB,EAAC,MAAM,EAAE;gBAChC,GAAI,IAAY;gBAChB,OAAO;gBACP,MAAM;aACP,CAAC,CAAA;QACJ,CAAC;0CAAE;QACD,OAAO;QACP,MAAM;QACN,OAAO;QACP,MAAM;QACN,GAAG;QACH,IAAI,CAAC,GAAG;QACR,IAAI,CAAC,OAAO;QACZ,IAAI,CAAC,IAAI;QACT,IAAI,CAAC,KAAK;QACV,IAAI,CAAC,SAAS;QACd,IAAI,CAAC,SAAS;QACd,IAAI,CAAC,OAAO;QACZ,IAAI,CAAC,IAAI;QACT,IAAI,CAAC,eAAe;QACpB,IAAI,CAAC,MAAM;QACX,IAAI,CAAC,kBAAkB;KACxB,CAAC,CAAA;AACJ,CAAC","ignoreList":[0]}},
    {"offset": {"line": 2345, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2351, "column": 0}, "map": {"version":3,"file":"useWatchPendingTransactions.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/hooks/useWatchPendingTransactions.ts"],"sourcesContent":["'use client'\n\nimport {\n  type Config,\n  type ResolvedRegister,\n  type WatchPendingTransactionsParameters,\n  watchPendingTransactions,\n} from '@wagmi/core'\nimport type { UnionCompute, UnionExactPartial } from '@wagmi/core/internal'\nimport { useEffect } from 'react'\n\nimport type { ConfigParameter, EnabledParameter } from '../types/properties.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseWatchPendingTransactionsParameters<\n  config extends Config = Config,\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n> = UnionCompute<\n  UnionExactPartial<WatchPendingTransactionsParameters<config, chainId>> &\n    ConfigParameter<config> &\n    EnabledParameter\n>\n\nexport type UseWatchPendingTransactionsReturnType = void\n\n/** https://wagmi.sh/react/api/hooks/useWatchPendingTransactions */\nexport function useWatchPendingTransactions<\n  config extends Config = ResolvedRegister['config'],\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n>(\n  parameters: UseWatchPendingTransactionsParameters<\n    config,\n    chainId\n  > = {} as any,\n): UseWatchPendingTransactionsReturnType {\n  const { enabled = true, onTransactions, config: _, ...rest } = parameters\n\n  const config = useConfig(parameters)\n  const configChainId = useChainId({ config })\n  const chainId = parameters.chainId ?? configChainId\n\n  // TODO(react@19): cleanup\n  // biome-ignore lint/correctness/useExhaustiveDependencies: `rest` changes every render so only including properties in dependency array\n  useEffect(() => {\n    if (!enabled) return\n    if (!onTransactions) return\n    return watchPendingTransactions(config, {\n      ...(rest as any),\n      chainId,\n      onTransactions,\n    })\n  }, [\n    chainId,\n    config,\n    enabled,\n    onTransactions,\n    ///\n    rest.batch,\n    rest.onError,\n    rest.poll,\n    rest.pollingInterval,\n    rest.syncConnectedChain,\n  ])\n}\n"],"names":[],"mappings":";;;AASA,OAAO,EAAE,SAAS,EAAE,MAAM,OAAO,CAAA;AAIjC,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAD1C,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAA;AAV5C,OAAO,EAIL,wBAAwB,GACzB,MAAM,aAAa,CAAA;AAPpB,YAAY,CAAA;;;;;AA4BN,SAAU,2BAA2B,CAKzC,aAGI,CAAA,CAAS;IAEb,MAAM,EAAE,OAAO,GAAG,IAAI,EAAE,cAAc,EAAE,MAAM,EAAE,CAAC,EAAE,GAAG,IAAI,EAAE,GAAG,UAAU,CAAA;IAEzE,MAAM,MAAM,IAAG,6XAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IACpC,MAAM,aAAa,sXAAG,aAAA,AAAU,EAAC;QAAE,MAAM;IAAA,CAAE,CAAC,CAAA;IAC5C,MAAM,OAAO,GAAG,UAAU,CAAC,OAAO,IAAI,aAAa,CAAA;IAEnD,0BAA0B;IAC1B,wIAAwI;KACxI,8UAAA,AAAS;iDAAC,GAAG,EAAE;YACb,IAAI,CAAC,OAAO,EAAE,OAAM;YACpB,IAAI,CAAC,cAAc,EAAE,OAAM;YAC3B,iZAAO,2BAAA,AAAwB,EAAC,MAAM,EAAE;gBACtC,GAAI,IAAY;gBAChB,OAAO;gBACP,cAAc;aACf,CAAC,CAAA;QACJ,CAAC;gDAAE;QACD,OAAO;QACP,MAAM;QACN,OAAO;QACP,cAAc;QACd,GAAG;QACH,IAAI,CAAC,KAAK;QACV,IAAI,CAAC,OAAO;QACZ,IAAI,CAAC,IAAI;QACT,IAAI,CAAC,eAAe;QACpB,IAAI,CAAC,kBAAkB;KACxB,CAAC,CAAA;AACJ,CAAC","ignoreList":[0]}},
    {"offset": {"line": 2395, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2401, "column": 0}, "map": {"version":3,"file":"index.js","sources":["file:///Users/sc_liu/Desktop/ts/dapp/node_modules/.pnpm/wagmi%402.14.11_%40tanstack%2Bquery-core%405.66.4_%40tanstack%2Breact-query%405.66.8_react%4019.0.0__%40t_ed681f263f67eaa2ed51fafc48dbe43b/node_modules/wagmi/src/exports/index.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n// Context\n////////////////////////////////////////////////////////////////////////////////\n\n// biome-ignore lint/performance/noBarrelFile: entrypoint module\nexport {\n  type WagmiProviderProps,\n  WagmiContext,\n  WagmiProvider,\n  /** @deprecated Use `WagmiContext` instead */\n  WagmiContext as Context,\n  /** @deprecated Use `WagmiProvider` instead */\n  WagmiProvider as WagmiConfig,\n} from '../context.js'\n\n////////////////////////////////////////////////////////////////////////////////\n// Errors\n////////////////////////////////////////////////////////////////////////////////\n\nexport { type BaseErrorType, BaseError } from '../errors/base.js'\n\nexport {\n  type WagmiProviderNotFoundErrorType,\n  WagmiProviderNotFoundError,\n} from '../errors/context.js'\n\n////////////////////////////////////////////////////////////////////////////////\n// Hooks\n////////////////////////////////////////////////////////////////////////////////\n\nexport {\n  type UseAccountParameters,\n  type UseAccountReturnType,\n  useAccount,\n} from '../hooks/useAccount.js'\n\nexport {\n  type UseAccountEffectParameters,\n  useAccountEffect,\n} from '../hooks/useAccountEffect.js'\n\nexport {\n  type UseBalanceParameters,\n  type UseBalanceReturnType,\n  useBalance,\n} from '../hooks/useBalance.js'\n\nexport {\n  type UseBlockParameters,\n  type UseBlockReturnType,\n  useBlock,\n} from '../hooks/useBlock.js'\n\nexport {\n  type UseBlockNumberParameters,\n  type UseBlockNumberReturnType,\n  useBlockNumber,\n} from '../hooks/useBlockNumber.js'\n\nexport {\n  type UseBlockTransactionCountParameters,\n  type UseBlockTransactionCountReturnType,\n  useBlockTransactionCount,\n} from '../hooks/useBlockTransactionCount.js'\n\nexport {\n  type UseBytecodeParameters,\n  type UseBytecodeReturnType,\n  useBytecode,\n} from '../hooks/useBytecode.js'\n\nexport {\n  type UseCallParameters,\n  type UseCallReturnType,\n  useCall,\n} from '../hooks/useCall.js'\n\nexport {\n  type UseChainIdParameters,\n  type UseChainIdReturnType,\n  useChainId,\n} from '../hooks/useChainId.js'\n\nexport {\n  type UseChainsParameters,\n  type UseChainsReturnType,\n  useChains,\n} from '../hooks/useChains.js'\n\nexport {\n  type UseClientParameters,\n  type UseClientReturnType,\n  useClient,\n} from '../hooks/useClient.js'\n\nexport {\n  type UseConfigParameters,\n  type UseConfigReturnType,\n  useConfig,\n} from '../hooks/useConfig.js'\n\nexport {\n  type UseConnectParameters,\n  type UseConnectReturnType,\n  useConnect,\n} from '../hooks/useConnect.js'\n\nexport {\n  type UseConnectionsParameters,\n  type UseConnectionsReturnType,\n  useConnections,\n} from '../hooks/useConnections.js'\n\nexport {\n  type UseConnectorsParameters,\n  type UseConnectorsReturnType,\n  useConnectors,\n} from '../hooks/useConnectors.js'\n\nexport {\n  type UseConnectorClientParameters,\n  type UseConnectorClientReturnType,\n  useConnectorClient,\n} from '../hooks/useConnectorClient.js'\n\nexport {\n  type UseDeployContractParameters,\n  type UseDeployContractReturnType,\n  useDeployContract,\n} from '../hooks/useDeployContract.js'\n\nexport {\n  type UseDisconnectParameters,\n  type UseDisconnectReturnType,\n  useDisconnect,\n} from '../hooks/useDisconnect.js'\n\nexport {\n  type UseEnsAddressParameters,\n  type UseEnsAddressReturnType,\n  useEnsAddress,\n} from '../hooks/useEnsAddress.js'\n\nexport {\n  type UseEnsAvatarParameters,\n  type UseEnsAvatarReturnType,\n  useEnsAvatar,\n} from '../hooks/useEnsAvatar.js'\n\nexport {\n  type UseEnsNameParameters,\n  type UseEnsNameReturnType,\n  useEnsName,\n} from '../hooks/useEnsName.js'\n\nexport {\n  type UseEnsResolverParameters,\n  type UseEnsResolverReturnType,\n  useEnsResolver,\n} from '../hooks/useEnsResolver.js'\n\nexport {\n  type UseEnsTextParameters,\n  type UseEnsTextReturnType,\n  useEnsText,\n} from '../hooks/useEnsText.js'\n\nexport {\n  type UseEstimateFeesPerGasParameters,\n  type UseEstimateFeesPerGasReturnType,\n  useEstimateFeesPerGas,\n  /** @deprecated Use `useEstimateFeesPerGas` instead */\n  useEstimateFeesPerGas as useFeeData,\n} from '../hooks/useEstimateFeesPerGas.js'\n\nexport {\n  type UseEstimateGasParameters,\n  type UseEstimateGasReturnType,\n  useEstimateGas,\n} from '../hooks/useEstimateGas.js'\n\nexport {\n  type UseEstimateMaxPriorityFeePerGasParameters,\n  type UseEstimateMaxPriorityFeePerGasReturnType,\n  useEstimateMaxPriorityFeePerGas,\n} from '../hooks/useEstimateMaxPriorityFeePerGas.js'\n\nexport {\n  type UseFeeHistoryParameters,\n  type UseFeeHistoryReturnType,\n  useFeeHistory,\n} from '../hooks/useFeeHistory.js'\n\nexport {\n  type UseGasPriceParameters,\n  type UseGasPriceReturnType,\n  useGasPrice,\n} from '../hooks/useGasPrice.js'\n\nexport {\n  type UseInfiniteContractReadsParameters,\n  type UseInfiniteContractReadsReturnType,\n  useInfiniteReadContracts,\n  /** @deprecated Use `useInfiniteReadContracts` instead */\n  useInfiniteReadContracts as useContractInfiniteReads,\n} from '../hooks/useInfiniteReadContracts.js'\n\nexport {\n  type UsePrepareTransactionRequestParameters,\n  type UsePrepareTransactionRequestReturnType,\n  usePrepareTransactionRequest,\n} from '../hooks/usePrepareTransactionRequest.js'\n\nexport {\n  type UseProofParameters,\n  type UseProofReturnType,\n  useProof,\n} from '../hooks/useProof.js'\n\nexport {\n  type UsePublicClientParameters,\n  type UsePublicClientReturnType,\n  usePublicClient,\n} from '../hooks/usePublicClient.js'\n\nexport {\n  type UseReadContractParameters,\n  type UseReadContractReturnType,\n  useReadContract,\n  /** @deprecated Use `useWriteContract` instead */\n  useReadContract as useContractRead,\n} from '../hooks/useReadContract.js'\n\nexport {\n  type UseReadContractsParameters,\n  type UseReadContractsReturnType,\n  useReadContracts,\n  /** @deprecated Use `useWriteContract` instead */\n  useReadContracts as useContractReads,\n} from '../hooks/useReadContracts.js'\n\nexport {\n  type UseReconnectParameters,\n  type UseReconnectReturnType,\n  useReconnect,\n} from '../hooks/useReconnect.js'\n\nexport {\n  type UseSendTransactionParameters,\n  type UseSendTransactionReturnType,\n  useSendTransaction,\n} from '../hooks/useSendTransaction.js'\n\nexport {\n  type UseSignMessageParameters,\n  type UseSignMessageReturnType,\n  useSignMessage,\n} from '../hooks/useSignMessage.js'\n\nexport {\n  type UseSignTypedDataParameters,\n  type UseSignTypedDataReturnType,\n  useSignTypedData,\n} from '../hooks/useSignTypedData.js'\n\nexport {\n  type UseSimulateContractParameters,\n  type UseSimulateContractReturnType,\n  useSimulateContract,\n} from '../hooks/useSimulateContract.js'\n\nexport {\n  type UseStorageAtParameters,\n  type UseStorageAtReturnType,\n  useStorageAt,\n} from '../hooks/useStorageAt.js'\n\nexport {\n  type UseSwitchAccountParameters,\n  type UseSwitchAccountReturnType,\n  useSwitchAccount,\n} from '../hooks/useSwitchAccount.js'\n\nexport {\n  type UseSwitchChainParameters,\n  type UseSwitchChainReturnType,\n  useSwitchChain,\n} from '../hooks/useSwitchChain.js'\n\nexport {\n  type UseTokenParameters,\n  type UseTokenReturnType,\n  /** @deprecated Use `useReadContracts` instead */\n  useToken,\n} from '../hooks/useToken.js'\n\nexport {\n  type UseTransactionParameters,\n  type UseTransactionReturnType,\n  useTransaction,\n} from '../hooks/useTransaction.js'\n\nexport {\n  type UseTransactionConfirmationsParameters,\n  type UseTransactionConfirmationsReturnType,\n  useTransactionConfirmations,\n} from '../hooks/useTransactionConfirmations.js'\n\nexport {\n  type UseTransactionCountParameters,\n  type UseTransactionCountReturnType,\n  useTransactionCount,\n} from '../hooks/useTransactionCount.js'\n\nexport {\n  type UseTransactionReceiptParameters,\n  type UseTransactionReceiptReturnType,\n  useTransactionReceipt,\n} from '../hooks/useTransactionReceipt.js'\n\nexport {\n  type UseVerifyMessageParameters,\n  type UseVerifyMessageReturnType,\n  useVerifyMessage,\n} from '../hooks/useVerifyMessage.js'\n\nexport {\n  type UseVerifyTypedDataParameters,\n  type UseVerifyTypedDataReturnType,\n  useVerifyTypedData,\n} from '../hooks/useVerifyTypedData.js'\n\nexport {\n  type UseWalletClientParameters,\n  type UseWalletClientReturnType,\n  useWalletClient,\n} from '../hooks/useWalletClient.js'\n\nexport {\n  type UseWaitForTransactionReceiptParameters,\n  type UseWaitForTransactionReceiptReturnType,\n  useWaitForTransactionReceipt,\n} from '../hooks/useWaitForTransactionReceipt.js'\n\nexport {\n  type UseWatchAssetParameters,\n  type UseWatchAssetReturnType,\n  useWatchAsset,\n} from '../hooks/useWatchAsset.js'\n\nexport {\n  type UseWatchBlocksParameters,\n  type UseWatchBlocksReturnType,\n  useWatchBlocks,\n} from '../hooks/useWatchBlocks.js'\n\nexport {\n  type UseWatchBlockNumberParameters,\n  type UseWatchBlockNumberReturnType,\n  useWatchBlockNumber,\n} from '../hooks/useWatchBlockNumber.js'\n\nexport {\n  type UseWatchContractEventParameters,\n  type UseWatchContractEventReturnType,\n  useWatchContractEvent,\n} from '../hooks/useWatchContractEvent.js'\n\nexport {\n  type UseWatchPendingTransactionsParameters,\n  type UseWatchPendingTransactionsReturnType,\n  useWatchPendingTransactions,\n} from '../hooks/useWatchPendingTransactions.js'\n\nexport {\n  type UseWriteContractParameters,\n  type UseWriteContractReturnType,\n  useWriteContract,\n  /** @deprecated Use `useWriteContract` instead */\n  useWriteContract as useContractWrite,\n} from '../hooks/useWriteContract.js'\n\n////////////////////////////////////////////////////////////////////////////////\n// Hydrate\n////////////////////////////////////////////////////////////////////////////////\n\nexport {\n  type HydrateProps,\n  Hydrate,\n} from '../hydrate.js'\n\n////////////////////////////////////////////////////////////////////////////////\n// @wagmi/core\n////////////////////////////////////////////////////////////////////////////////\n\nexport {\n  // Config\n  type Connection,\n  type Connector,\n  type Config,\n  type CreateConfigParameters,\n  type PartializedState,\n  type State,\n  createConfig,\n  // Connector\n  type ConnectorEventMap,\n  type CreateConnectorFn,\n  createConnector,\n  injected,\n  mock,\n  // Errors\n  type ChainNotConfiguredErrorType,\n  ChainNotConfiguredError,\n  type ConnectorAlreadyConnectedErrorType,\n  ConnectorAlreadyConnectedError,\n  type ConnectorNotFoundErrorType,\n  ConnectorNotFoundError,\n  type ConnectorAccountNotFoundErrorType,\n  ConnectorAccountNotFoundError,\n  type ConnectorChainMismatchErrorType,\n  ConnectorChainMismatchError,\n  type ConnectorUnavailableReconnectingErrorType,\n  ConnectorUnavailableReconnectingError,\n  type ProviderNotFoundErrorType,\n  ProviderNotFoundError,\n  type SwitchChainNotSupportedErrorType,\n  SwitchChainNotSupportedError,\n  // Storage\n  type CreateStorageParameters,\n  type Storage,\n  createStorage,\n  noopStorage,\n  // Transports\n  custom,\n  fallback,\n  http,\n  webSocket,\n  unstable_connector,\n  type Transport,\n  // Types\n  type Register,\n  type ResolvedRegister,\n  // Utilities\n  cookieStorage,\n  cookieToInitialState,\n  deepEqual,\n  deserialize,\n  normalizeChainId,\n  parseCookie,\n  serialize,\n} from '@wagmi/core'\n\n////////////////////////////////////////////////////////////////////////////////\n// Version\n////////////////////////////////////////////////////////////////////////////////\n\nexport { version } from '../version.js'\n"],"names":[],"mappings":"AAAA,gFAAgF;AAChF,UAAU;AACV,gFAAgF;AAEhF,gEAAgE","ignoreList":[0]}},
    {"offset": {"line": 2470, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}